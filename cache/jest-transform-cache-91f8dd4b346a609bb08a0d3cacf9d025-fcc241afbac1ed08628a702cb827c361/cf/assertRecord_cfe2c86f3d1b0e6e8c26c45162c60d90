637cc8581b1f392a722a16b7f1259797
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $TypeError = GetIntrinsic('%TypeError%');
var $SyntaxError = GetIntrinsic('%SyntaxError%');
var has = require('has');
var isMatchRecord = require('./isMatchRecord');
var predicates = {
  // https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type
  'Property Descriptor': function isPropertyDescriptor(Desc) {
    var allowed = {
      '[[Configurable]]': true,
      '[[Enumerable]]': true,
      '[[Get]]': true,
      '[[Set]]': true,
      '[[Value]]': true,
      '[[Writable]]': true
    };
    for (var key in Desc) {
      // eslint-disable-line
      if (has(Desc, key) && !allowed[key]) {
        return false;
      }
    }
    var isData = has(Desc, '[[Value]]');
    var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
    if (isData && IsAccessor) {
      throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
    }
    return true;
  },
  // https://262.ecma-international.org/13.0/#sec-match-records
  'Match Record': isMatchRecord,
  'Iterator Record': function isIteratorRecord(value) {
    return has(value, '[[Iterator]]') && has(value, '[[NextMethod]]') && has(value, '[[Done]]');
  },
  'PromiseCapability Record': function isPromiseCapabilityRecord(value) {
    return value && has(value, '[[Resolve]]') && typeof value['[[Resolve]]'] === 'function' && has(value, '[[Reject]]') && typeof value['[[Reject]]'] === 'function' && has(value, '[[Promise]]') && value['[[Promise]]'] && typeof value['[[Promise]]'].then === 'function';
  },
  'AsyncGeneratorRequest Record': function isAsyncGeneratorRequestRecord(value) {
    return value && has(value, '[[Completion]]') // TODO: confirm is a completion record
    && has(value, '[[Capability]]') && predicates['PromiseCapability Record'](value['[[Capability]]']);
  }
};
module.exports = function assertRecord(Type, recordType, argumentName, value) {
  var predicate = predicates[recordType];
  if (typeof predicate !== 'function') {
    throw new $SyntaxError('unknown record type: ' + recordType);
  }
  if (Type(value) !== 'Object' || !predicate(value)) {
    throw new $TypeError(argumentName + ' must be a ' + recordType);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsIiRTeW50YXhFcnJvciIsImhhcyIsImlzTWF0Y2hSZWNvcmQiLCJwcmVkaWNhdGVzIiwiaXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJEZXNjIiwiYWxsb3dlZCIsImtleSIsImlzRGF0YSIsIklzQWNjZXNzb3IiLCJpc0l0ZXJhdG9yUmVjb3JkIiwidmFsdWUiLCJpc1Byb21pc2VDYXBhYmlsaXR5UmVjb3JkIiwidGhlbiIsImlzQXN5bmNHZW5lcmF0b3JSZXF1ZXN0UmVjb3JkIiwibW9kdWxlIiwiZXhwb3J0cyIsImFzc2VydFJlY29yZCIsIlR5cGUiLCJyZWNvcmRUeXBlIiwiYXJndW1lbnROYW1lIiwicHJlZGljYXRlIl0sInNvdXJjZXMiOlsiYXNzZXJ0UmVjb3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG52YXIgJFN5bnRheEVycm9yID0gR2V0SW50cmluc2ljKCclU3ludGF4RXJyb3IlJyk7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIGlzTWF0Y2hSZWNvcmQgPSByZXF1aXJlKCcuL2lzTWF0Y2hSZWNvcmQnKTtcblxudmFyIHByZWRpY2F0ZXMgPSB7XG5cdC8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtcHJvcGVydHktZGVzY3JpcHRvci1zcGVjaWZpY2F0aW9uLXR5cGVcblx0J1Byb3BlcnR5IERlc2NyaXB0b3InOiBmdW5jdGlvbiBpc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSB7XG5cdFx0dmFyIGFsbG93ZWQgPSB7XG5cdFx0XHQnW1tDb25maWd1cmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tFbnVtZXJhYmxlXV0nOiB0cnVlLFxuXHRcdFx0J1tbR2V0XV0nOiB0cnVlLFxuXHRcdFx0J1tbU2V0XV0nOiB0cnVlLFxuXHRcdFx0J1tbVmFsdWVdXSc6IHRydWUsXG5cdFx0XHQnW1tXcml0YWJsZV1dJzogdHJ1ZVxuXHRcdH07XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gRGVzYykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cdFx0XHRpZiAoaGFzKERlc2MsIGtleSkgJiYgIWFsbG93ZWRba2V5XSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGlzRGF0YSA9IGhhcyhEZXNjLCAnW1tWYWx1ZV1dJyk7XG5cdFx0dmFyIElzQWNjZXNzb3IgPSBoYXMoRGVzYywgJ1tbR2V0XV0nKSB8fCBoYXMoRGVzYywgJ1tbU2V0XV0nKTtcblx0XHRpZiAoaXNEYXRhICYmIElzQWNjZXNzb3IpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdQcm9wZXJ0eSBEZXNjcmlwdG9ycyBtYXkgbm90IGJlIGJvdGggYWNjZXNzb3IgYW5kIGRhdGEgZGVzY3JpcHRvcnMnKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cdC8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTMuMC8jc2VjLW1hdGNoLXJlY29yZHNcblx0J01hdGNoIFJlY29yZCc6IGlzTWF0Y2hSZWNvcmQsXG5cdCdJdGVyYXRvciBSZWNvcmQnOiBmdW5jdGlvbiBpc0l0ZXJhdG9yUmVjb3JkKHZhbHVlKSB7XG5cdFx0cmV0dXJuIGhhcyh2YWx1ZSwgJ1tbSXRlcmF0b3JdXScpICYmIGhhcyh2YWx1ZSwgJ1tbTmV4dE1ldGhvZF1dJykgJiYgaGFzKHZhbHVlLCAnW1tEb25lXV0nKTtcblx0fSxcblx0J1Byb21pc2VDYXBhYmlsaXR5IFJlY29yZCc6IGZ1bmN0aW9uIGlzUHJvbWlzZUNhcGFiaWxpdHlSZWNvcmQodmFsdWUpIHtcblx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdCYmIGhhcyh2YWx1ZSwgJ1tbUmVzb2x2ZV1dJylcblx0XHRcdCYmIHR5cGVvZiB2YWx1ZVsnW1tSZXNvbHZlXV0nXSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdFx0JiYgaGFzKHZhbHVlLCAnW1tSZWplY3RdXScpXG5cdFx0XHQmJiB0eXBlb2YgdmFsdWVbJ1tbUmVqZWN0XV0nXSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdFx0JiYgaGFzKHZhbHVlLCAnW1tQcm9taXNlXV0nKVxuXHRcdFx0JiYgdmFsdWVbJ1tbUHJvbWlzZV1dJ11cblx0XHRcdCYmIHR5cGVvZiB2YWx1ZVsnW1tQcm9taXNlXV0nXS50aGVuID09PSAnZnVuY3Rpb24nO1xuXHR9LFxuXHQnQXN5bmNHZW5lcmF0b3JSZXF1ZXN0IFJlY29yZCc6IGZ1bmN0aW9uIGlzQXN5bmNHZW5lcmF0b3JSZXF1ZXN0UmVjb3JkKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHQmJiBoYXModmFsdWUsICdbW0NvbXBsZXRpb25dXScpIC8vIFRPRE86IGNvbmZpcm0gaXMgYSBjb21wbGV0aW9uIHJlY29yZFxuXHRcdFx0JiYgaGFzKHZhbHVlLCAnW1tDYXBhYmlsaXR5XV0nKVxuXHRcdFx0JiYgcHJlZGljYXRlc1snUHJvbWlzZUNhcGFiaWxpdHkgUmVjb3JkJ10odmFsdWVbJ1tbQ2FwYWJpbGl0eV1dJ10pO1xuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFzc2VydFJlY29yZChUeXBlLCByZWNvcmRUeXBlLCBhcmd1bWVudE5hbWUsIHZhbHVlKSB7XG5cdHZhciBwcmVkaWNhdGUgPSBwcmVkaWNhdGVzW3JlY29yZFR5cGVdO1xuXHRpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ3Vua25vd24gcmVjb3JkIHR5cGU6ICcgKyByZWNvcmRUeXBlKTtcblx0fVxuXHRpZiAoVHlwZSh2YWx1ZSkgIT09ICdPYmplY3QnIHx8ICFwcmVkaWNhdGUodmFsdWUpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoYXJndW1lbnROYW1lICsgJyBtdXN0IGJlIGEgJyArIHJlY29yZFR5cGUpO1xuXHR9XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLFlBQVksR0FBR0MsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUUzQyxJQUFJQyxVQUFVLEdBQUdGLFlBQVksQ0FBQyxhQUFhLENBQUM7QUFDNUMsSUFBSUcsWUFBWSxHQUFHSCxZQUFZLENBQUMsZUFBZSxDQUFDO0FBRWhELElBQUlJLEdBQUcsR0FBR0gsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUV4QixJQUFJSSxhQUFhLEdBQUdKLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUU5QyxJQUFJSyxVQUFVLEdBQUc7RUFDaEI7RUFDQSxxQkFBcUIsRUFBRSxTQUFTQyxvQkFBb0JBLENBQUNDLElBQUksRUFBRTtJQUMxRCxJQUFJQyxPQUFPLEdBQUc7TUFDYixrQkFBa0IsRUFBRSxJQUFJO01BQ3hCLGdCQUFnQixFQUFFLElBQUk7TUFDdEIsU0FBUyxFQUFFLElBQUk7TUFDZixTQUFTLEVBQUUsSUFBSTtNQUNmLFdBQVcsRUFBRSxJQUFJO01BQ2pCLGNBQWMsRUFBRTtJQUNqQixDQUFDO0lBRUQsS0FBSyxJQUFJQyxHQUFHLElBQUlGLElBQUksRUFBRTtNQUFFO01BQ3ZCLElBQUlKLEdBQUcsQ0FBQ0ksSUFBSSxFQUFFRSxHQUFHLENBQUMsSUFBSSxDQUFDRCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BDLE9BQU8sS0FBSztNQUNiO0lBQ0Q7SUFFQSxJQUFJQyxNQUFNLEdBQUdQLEdBQUcsQ0FBQ0ksSUFBSSxFQUFFLFdBQVcsQ0FBQztJQUNuQyxJQUFJSSxVQUFVLEdBQUdSLEdBQUcsQ0FBQ0ksSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJSixHQUFHLENBQUNJLElBQUksRUFBRSxTQUFTLENBQUM7SUFDN0QsSUFBSUcsTUFBTSxJQUFJQyxVQUFVLEVBQUU7TUFDekIsTUFBTSxJQUFJVixVQUFVLENBQUMsb0VBQW9FLENBQUM7SUFDM0Y7SUFDQSxPQUFPLElBQUk7RUFDWixDQUFDO0VBQ0Q7RUFDQSxjQUFjLEVBQUVHLGFBQWE7RUFDN0IsaUJBQWlCLEVBQUUsU0FBU1EsZ0JBQWdCQSxDQUFDQyxLQUFLLEVBQUU7SUFDbkQsT0FBT1YsR0FBRyxDQUFDVSxLQUFLLEVBQUUsY0FBYyxDQUFDLElBQUlWLEdBQUcsQ0FBQ1UsS0FBSyxFQUFFLGdCQUFnQixDQUFDLElBQUlWLEdBQUcsQ0FBQ1UsS0FBSyxFQUFFLFVBQVUsQ0FBQztFQUM1RixDQUFDO0VBQ0QsMEJBQTBCLEVBQUUsU0FBU0MseUJBQXlCQSxDQUFDRCxLQUFLLEVBQUU7SUFDckUsT0FBT0EsS0FBSyxJQUNSVixHQUFHLENBQUNVLEtBQUssRUFBRSxhQUFhLENBQUMsSUFDekIsT0FBT0EsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLFVBQVUsSUFDMUNWLEdBQUcsQ0FBQ1UsS0FBSyxFQUFFLFlBQVksQ0FBQyxJQUN4QixPQUFPQSxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssVUFBVSxJQUN6Q1YsR0FBRyxDQUFDVSxLQUFLLEVBQUUsYUFBYSxDQUFDLElBQ3pCQSxLQUFLLENBQUMsYUFBYSxDQUFDLElBQ3BCLE9BQU9BLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQ0UsSUFBSSxLQUFLLFVBQVU7RUFDcEQsQ0FBQztFQUNELDhCQUE4QixFQUFFLFNBQVNDLDZCQUE2QkEsQ0FBQ0gsS0FBSyxFQUFFO0lBQzdFLE9BQU9BLEtBQUssSUFDUlYsR0FBRyxDQUFDVSxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUFBLEdBQzdCVixHQUFHLENBQUNVLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxJQUM1QlIsVUFBVSxDQUFDLDBCQUEwQixDQUFDLENBQUNRLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ3BFO0FBQ0QsQ0FBQztBQUVESSxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxZQUFZQSxDQUFDQyxJQUFJLEVBQUVDLFVBQVUsRUFBRUMsWUFBWSxFQUFFVCxLQUFLLEVBQUU7RUFDN0UsSUFBSVUsU0FBUyxHQUFHbEIsVUFBVSxDQUFDZ0IsVUFBVSxDQUFDO0VBQ3RDLElBQUksT0FBT0UsU0FBUyxLQUFLLFVBQVUsRUFBRTtJQUNwQyxNQUFNLElBQUlyQixZQUFZLENBQUMsdUJBQXVCLEdBQUdtQixVQUFVLENBQUM7RUFDN0Q7RUFDQSxJQUFJRCxJQUFJLENBQUNQLEtBQUssQ0FBQyxLQUFLLFFBQVEsSUFBSSxDQUFDVSxTQUFTLENBQUNWLEtBQUssQ0FBQyxFQUFFO0lBQ2xELE1BQU0sSUFBSVosVUFBVSxDQUFDcUIsWUFBWSxHQUFHLGFBQWEsR0FBR0QsVUFBVSxDQUFDO0VBQ2hFO0FBQ0QsQ0FBQyJ9