4f240675339aab023d68f35e0b627123
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRouterDom = require("react-router-dom");
var _App = require("../../../App");
var _Home = _interopRequireDefault(require("./../../homeandsubmit/Home"));
var _SubmitScreen = _interopRequireDefault(require("../../homeandsubmit/SubmitScreen"));
var _reactDnd = require("react-dnd");
var _reactDndHtml5Backend = require("react-dnd-html5-backend");
require("jest-canvas-mock");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/submitscreen.feature");
global.ResizeObserver = require("resize-observer-polyfill");
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    document.body.innerHTML = "";
  });
  test("User submits their quiz and sees their results", ({
    given,
    when,
    then,
    and
  }) => {
    const mockQuizContext = {
      score: 5,
      setScore: jest.fn(),
      name: "chandu",
      setName: jest.fn(),
      age: 25,
      setAge: jest.fn(),
      email: "chandra@chandu.com",
      setMail: jest.fn(),
      phoneNumber: "1234567890",
      setPhone: jest.fn(),
      selectedLanguage: "ReactJS",
      setSelector: jest.fn(),
      trackScore: false,
      setTracker: jest.fn()
    };
    given("the user has completed the quiz is on the Submit Screen", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactDnd.DndProvider, {
        backend: _reactDndHtml5Backend.HTML5Backend,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_App.QuizContext.Provider, {
          value: mockQuizContext,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactRouterDom.Routes, {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
                path: "/",
                element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SubmitScreen.default, {})
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
                element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Home.default, {})
              })]
            })
          })
        })
      }));
      expect(screen).toBeTruthy();
      const container = screen.getByTestId("submission-container");
      expect(container).toBeTruthy();
    });
    when("the user should see the details they entered in the home screen", () => {
      expect(_react2.screen.getByText("chandu")).toBeTruthy();
      expect(_react2.screen.getByText("chandra@chandu.com")).toBeTruthy();
      expect(_react2.screen.getByText("1234567890")).toBeTruthy();
      expect(_react2.screen.getByText("ReactJS")).toBeTruthy();
      expect(_react2.screen.getByText("5/8")).toBeTruthy();
      expect(_react2.screen.getByText("25")).toBeTruthy();
    });
    and("the user should see their score in a pie chart", async () => {
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByTestId("submitscreen-piechart")).toBeInTheDocument();
      });
    });
    and("the user should see a button to re-enter their details", () => {
      const tryAgainButton = _react2.screen.getByRole("button", {
        name: "Try again?"
      });
      expect(tryAgainButton).toBeTruthy();
      _react2.fireEvent.click(tryAgainButton);
      expect(window.location.pathname).toEqual("/");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0Um91dGVyRG9tIiwiX0FwcCIsIl9Ib21lIiwiX1N1Ym1pdFNjcmVlbiIsIl9yZWFjdERuZCIsIl9yZWFjdERuZEh0bWw1QmFja2VuZCIsIl9qc3hSdW50aW1lIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJmZWF0dXJlIiwibG9hZEZlYXR1cmUiLCJnbG9iYWwiLCJSZXNpemVPYnNlcnZlciIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiYmVmb3JlRWFjaCIsImRvY3VtZW50IiwiYm9keSIsImlubmVySFRNTCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJhbmQiLCJtb2NrUXVpekNvbnRleHQiLCJzY29yZSIsInNldFNjb3JlIiwiamVzdCIsImZuIiwibmFtZSIsInNldE5hbWUiLCJhZ2UiLCJzZXRBZ2UiLCJlbWFpbCIsInNldE1haWwiLCJwaG9uZU51bWJlciIsInNldFBob25lIiwic2VsZWN0ZWRMYW5ndWFnZSIsInNldFNlbGVjdG9yIiwidHJhY2tTY29yZSIsInNldFRyYWNrZXIiLCJzY3JlZW4iLCJyZW5kZXIiLCJqc3giLCJEbmRQcm92aWRlciIsImJhY2tlbmQiLCJIVE1MNUJhY2tlbmQiLCJjaGlsZHJlbiIsIlF1aXpDb250ZXh0IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsIkJyb3dzZXJSb3V0ZXIiLCJqc3hzIiwiUm91dGVzIiwiUm91dGUiLCJwYXRoIiwiZWxlbWVudCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJjb250YWluZXIiLCJnZXRCeVRlc3RJZCIsImdldEJ5VGV4dCIsIndhaXRGb3IiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInRyeUFnYWluQnV0dG9uIiwiZ2V0QnlSb2xlIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwidG9FcXVhbCJdLCJzb3VyY2VzIjpbInN1Ym1pdHNjcmVlbi5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBkZWZpbmVGZWF0dXJlLCBsb2FkRmVhdHVyZSB9IGZyb20gXCJqZXN0LWN1Y3VtYmVyXCI7XHJcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgXCJ0ZXh0LWVuY29kaW5nXCI7XHJcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdFwiO1xyXG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIFJvdXRlcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IFF1aXpDb250ZXh0IH0gZnJvbSBcIi4uLy4uLy4uL0FwcFwiO1xyXG5pbXBvcnQgSG9tZSBmcm9tIFwiLi8uLi8uLi9ob21lYW5kc3VibWl0L0hvbWVcIjtcclxuaW1wb3J0IFF1ZXN0aW9uNSBmcm9tIFwiLi8uLi8uLi9xdWVzdGlvbnMvUXVlc3Rpb241XCI7XHJcbmltcG9ydCBTdWJtaXRTY3JlZW4gZnJvbSBcIi4uLy4uL2hvbWVhbmRzdWJtaXQvU3VibWl0U2NyZWVuXCI7XHJcbmltcG9ydCB7IERuZFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LWRuZFwiO1xyXG5pbXBvcnQgeyBIVE1MNUJhY2tlbmQgfSBmcm9tIFwicmVhY3QtZG5kLWh0bWw1LWJhY2tlbmRcIjtcclxuaW1wb3J0IFwiamVzdC1jYW52YXMtbW9ja1wiO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJzcmMvY29tcG9uZW50cy9mZWF0dXJlcy9zdWJtaXRzY3JlZW4uZmVhdHVyZVwiKTtcclxuZ2xvYmFsLlJlc2l6ZU9ic2VydmVyID0gcmVxdWlyZShcInJlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbFwiKTtcclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSBcIlwiO1xyXG4gIH0pO1xyXG4gIHRlc3QoXCJVc2VyIHN1Ym1pdHMgdGhlaXIgcXVpeiBhbmQgc2VlcyB0aGVpciByZXN1bHRzXCIsICh7XHJcbiAgICBnaXZlbixcclxuICAgIHdoZW4sXHJcbiAgICB0aGVuLFxyXG4gICAgYW5kLFxyXG4gIH0pID0+IHtcclxuICAgIGNvbnN0IG1vY2tRdWl6Q29udGV4dCA9IHtcclxuICAgICAgc2NvcmU6IDUsXHJcbiAgICAgIHNldFNjb3JlOiBqZXN0LmZuKCksXHJcbiAgICAgIG5hbWU6IFwiY2hhbmR1XCIsXHJcbiAgICAgIHNldE5hbWU6IGplc3QuZm4oKSxcclxuICAgICAgYWdlOiAyNSxcclxuICAgICAgc2V0QWdlOiBqZXN0LmZuKCksXHJcbiAgICAgIGVtYWlsOiBcImNoYW5kcmFAY2hhbmR1LmNvbVwiLFxyXG4gICAgICBzZXRNYWlsOiBqZXN0LmZuKCksXHJcbiAgICAgIHBob25lTnVtYmVyOiBcIjEyMzQ1Njc4OTBcIixcclxuICAgICAgc2V0UGhvbmU6IGplc3QuZm4oKSxcclxuICAgICAgc2VsZWN0ZWRMYW5ndWFnZTogXCJSZWFjdEpTXCIsXHJcbiAgICAgIHNldFNlbGVjdG9yOiBqZXN0LmZuKCksXHJcbiAgICAgIHRyYWNrU2NvcmU6IGZhbHNlLFxyXG4gICAgICBzZXRUcmFja2VyOiBqZXN0LmZuKCksXHJcbiAgICB9O1xyXG4gICAgZ2l2ZW4oXCJ0aGUgdXNlciBoYXMgY29tcGxldGVkIHRoZSBxdWl6IGlzIG9uIHRoZSBTdWJtaXQgU2NyZWVuXCIsICgpID0+IHtcclxuICAgICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICAgIDxEbmRQcm92aWRlciBiYWNrZW5kPXtIVE1MNUJhY2tlbmR9PlxyXG4gICAgICAgICAgPFF1aXpDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXttb2NrUXVpekNvbnRleHR9PlxyXG4gICAgICAgICAgICA8Um91dGVyPlxyXG4gICAgICAgICAgICAgIDxSb3V0ZXM+XHJcbiAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9cIiBlbGVtZW50PXs8U3VibWl0U2NyZWVuIC8+fSAvPlxyXG4gICAgICAgICAgICAgICAgPFJvdXRlIGVsZW1lbnQ9ezxIb21lIC8+fSAvPlxyXG4gICAgICAgICAgICAgIDwvUm91dGVzPlxyXG4gICAgICAgICAgICA8L1JvdXRlcj5cclxuICAgICAgICAgIDwvUXVpekNvbnRleHQuUHJvdmlkZXI+XHJcbiAgICAgICAgPC9EbmRQcm92aWRlcj5cclxuICAgICAgKTtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZVRydXRoeSgpO1xyXG4gICAgICBjb25zdCBjb250YWluZXIgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJzdWJtaXNzaW9uLWNvbnRhaW5lclwiKTtcclxuICAgICAgZXhwZWN0KGNvbnRhaW5lcikudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKFxyXG4gICAgICBcInRoZSB1c2VyIHNob3VsZCBzZWUgdGhlIGRldGFpbHMgdGhleSBlbnRlcmVkIGluIHRoZSBob21lIHNjcmVlblwiLFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCJjaGFuZHVcIikpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcImNoYW5kcmFAY2hhbmR1LmNvbVwiKSkudG9CZVRydXRoeSgpO1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiMTIzNDU2Nzg5MFwiKSkudG9CZVRydXRoeSgpO1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiUmVhY3RKU1wiKSkudG9CZVRydXRoeSgpO1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiNS84XCIpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCIyNVwiKSkudG9CZVRydXRoeSgpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gICAgYW5kKFwidGhlIHVzZXIgc2hvdWxkIHNlZSB0aGVpciBzY29yZSBpbiBhIHBpZSBjaGFydFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoXCJzdWJtaXRzY3JlZW4tcGllY2hhcnRcIikpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBhbmQoXCJ0aGUgdXNlciBzaG91bGQgc2VlIGEgYnV0dG9uIHRvIHJlLWVudGVyIHRoZWlyIGRldGFpbHNcIiwgKCkgPT4ge1xyXG4gICAgICBjb25zdCB0cnlBZ2FpbkJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoXCJidXR0b25cIiwgeyBuYW1lOiBcIlRyeSBhZ2Fpbj9cIiB9KTtcclxuICAgICAgZXhwZWN0KHRyeUFnYWluQnV0dG9uKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgIGZpcmVFdmVudC5jbGljayh0cnlBZ2FpbkJ1dHRvbik7XHJcbiAgICAgIGV4cGVjdCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpLnRvRXF1YWwoXCIvXCIpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0FBLE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFHLGVBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLElBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLEtBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFNLGFBQUEsR0FBQVAs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