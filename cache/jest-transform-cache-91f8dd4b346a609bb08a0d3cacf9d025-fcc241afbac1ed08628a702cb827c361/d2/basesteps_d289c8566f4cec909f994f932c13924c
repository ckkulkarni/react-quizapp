d4fde0b8dc5b674df831e0b346a57cc0
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
var _Home = _interopRequireDefault(require("./../../homeandsubmit/Home"));
require("@testing-library/jest-dom/extend-expect");
var _reactRouterDom = require("react-router-dom");
var _Question = _interopRequireDefault(require("../../questions/Question1"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/base.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User submits form with valid inputs", ({
    given,
    when,
    and,
    then
  }) => {
    let wrapper;
    given("I am on the Home Screen", () => {
      const wrapper = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactRouterDom.Routes, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
            path: "/",
            element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Home.default, {})
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
            path: "/question",
            element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Question.default, {})
          })]
        })
      }));
      expect(wrapper).toBeTruthy();
    });
    when('I enter a valid email "test@test.com"', () => {
      const emailInput = wrapper.getByLabelText("Enter MailID:");
      _react2.fireEvent.change(emailInput, {
        target: {
          value: "test@test.com"
        }
      });
      expect(emailInput).toHaveValue("test@test.com");
    });
    and('I enter a valid name "John"', () => {
      const nameInput = wrapper.getByLabelText("Enter your name:");
      _react2.fireEvent.change(nameInput, {
        target: {
          value: "John"
        }
      });
      expect(nameInput).toHaveValue("John");
    });
    and('I enter a valid phone number "1234567890"', () => {
      const phoneInput = wrapper.getByLabelText("Enter your Phone Number:");
      _react2.fireEvent.change(phoneInput, {
        target: {
          value: "1234567890"
        }
      });
      expect(phoneInput).toHaveValue("1234567890");
    });
    and("I submit the form", () => {
      const {
        getByText,
        getByLabelText
      } = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactRouterDom.Routes, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
            path: "/",
            element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Home.default, {})
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
            path: "/question",
            element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Question.default, {})
          })]
        })
      }));
      const submitButton = getByText("Submit");
      _react2.fireEvent.click(submitButton);
      expect(submitButton).toBeDisabled();
    });
    then("I should see the start quiz button", () => {
      const {
        getByText
      } = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactRouterDom.Routes, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
            path: "/",
            element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Home.default, {})
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
            path: "/question",
            element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Question.default, {})
          })]
        })
      }));
      const startQuizButton = getByText("Start Quiz");
      expect(startQuizButton).toBeInTheDocument();
      expect(startQuizButton).not.toBeDisabled();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,