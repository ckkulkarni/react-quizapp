5da1624b5592ae2df6b4ab63ec5d3374
"use strict";

var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _Home = _interopRequireDefault(require("./../../homeandsubmit/Home"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/base.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User submits form with valid inputs", ({
    given,
    when,
    and,
    then
  }) => {
    let container;
    let getByLabelText;
    let getByText;
    given("I am on the Home screen", () => {
      container = (0, _react.render)( /*#__PURE__*/React.createElement(_Home.default, null));
      getByLabelText = container.getByLabelText;
      getByText = container.getByText;
    });
    when('I enter a valid email "test@test.com"', email => {
      const emailInput = getByLabelText("Enter MailID:");
      _react.fireEvent.change(emailInput, {
        target: {
          value: "test@test.com"
        }
      });
    });
    and('I enter a valid name "John"', name => {
      const nameInput = getByLabelText("Enter your name:");
      _react.fireEvent.change(nameInput, {
        target: {
          value: "John"
        }
      });
    });
    and('I enter a valid phone number "1234567890"', phone => {
      const phoneInput = getByLabelText("Enter your Phone Number:");
      _react.fireEvent.change(phoneInput, {
        target: {
          value: "1234567890"
        }
      });
    });
    and("I submit the form", () => {
      const submitButton = getByText("Submit");
      _react.fireEvent.click(submitButton);
    });
    then("I should see the start quiz button", () => {
      expect(_react.screen.getByText("Start Quiz")).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfamVzdEN1Y3VtYmVyIiwicmVxdWlyZSIsIl9yZWFjdCIsIl9Ib21lIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJnaXZlbiIsIndoZW4iLCJhbmQiLCJ0aGVuIiwiY29udGFpbmVyIiwiZ2V0QnlMYWJlbFRleHQiLCJnZXRCeVRleHQiLCJyZW5kZXIiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJlbWFpbCIsImVtYWlsSW5wdXQiLCJmaXJlRXZlbnQiLCJjaGFuZ2UiLCJ0YXJnZXQiLCJ2YWx1ZSIsIm5hbWUiLCJuYW1lSW5wdXQiLCJwaG9uZSIsInBob25lSW5wdXQiLCJzdWJtaXRCdXR0b24iLCJjbGljayIsImV4cGVjdCIsInNjcmVlbiIsInRvQmVJblRoZURvY3VtZW50Il0sInNvdXJjZXMiOlsiYmFzZS5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lRmVhdHVyZSwgbG9hZEZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50IH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcclxuaW1wb3J0IHsgYWN0IH0gZnJvbSBcInJlYWN0LWRvbS90ZXN0LXV0aWxzXCI7XHJcbmltcG9ydCBIb21lIGZyb20gXCIuLy4uLy4uL2hvbWVhbmRzdWJtaXQvSG9tZVwiO1xyXG5pbXBvcnQgeyBRdWl6Q29udGV4dCB9IGZyb20gXCIuLy4uLy4uLy4uL0FwcFwiO1xyXG5cclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKFwic3JjL2NvbXBvbmVudHMvZmVhdHVyZXMvYmFzZS5mZWF0dXJlXCIpO1xyXG5cclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIHRlc3QoXCJVc2VyIHN1Ym1pdHMgZm9ybSB3aXRoIHZhbGlkIGlucHV0c1wiLCAoeyBnaXZlbiwgd2hlbiwgYW5kLCB0aGVuIH0pID0+IHtcclxuICAgIGxldCBjb250YWluZXI7XHJcbiAgICBsZXQgZ2V0QnlMYWJlbFRleHQ6IGFueTtcclxuICAgIGxldCBnZXRCeVRleHQ6IGFueTtcclxuXHJcbiAgICBnaXZlbihcIkkgYW0gb24gdGhlIEhvbWUgc2NyZWVuXCIsICgpID0+IHtcclxuICAgICAgY29udGFpbmVyID0gcmVuZGVyKDxIb21lIC8+KTtcclxuICAgICAgZ2V0QnlMYWJlbFRleHQgPSBjb250YWluZXIuZ2V0QnlMYWJlbFRleHQ7XHJcbiAgICAgIGdldEJ5VGV4dCA9IGNvbnRhaW5lci5nZXRCeVRleHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICB3aGVuKCdJIGVudGVyIGEgdmFsaWQgZW1haWwgXCJ0ZXN0QHRlc3QuY29tXCInLCAoZW1haWwpID0+IHtcclxuICAgICAgY29uc3QgZW1haWxJbnB1dCA9IGdldEJ5TGFiZWxUZXh0KFwiRW50ZXIgTWFpbElEOlwiKTtcclxuICAgICAgZmlyZUV2ZW50LmNoYW5nZShlbWFpbElucHV0LCB7IHRhcmdldDogeyB2YWx1ZTogXCJ0ZXN0QHRlc3QuY29tXCIgfSB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGFuZCgnSSBlbnRlciBhIHZhbGlkIG5hbWUgXCJKb2huXCInLCAobmFtZSkgPT4ge1xyXG4gICAgICBjb25zdCBuYW1lSW5wdXQgPSBnZXRCeUxhYmVsVGV4dChcIkVudGVyIHlvdXIgbmFtZTpcIik7XHJcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UobmFtZUlucHV0LCB7IHRhcmdldDogeyB2YWx1ZTogXCJKb2huXCIgfSB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGFuZCgnSSBlbnRlciBhIHZhbGlkIHBob25lIG51bWJlciBcIjEyMzQ1Njc4OTBcIicsIChwaG9uZSkgPT4ge1xyXG4gICAgICBjb25zdCBwaG9uZUlucHV0ID0gZ2V0QnlMYWJlbFRleHQoXCJFbnRlciB5b3VyIFBob25lIE51bWJlcjpcIik7XHJcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UocGhvbmVJbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6IFwiMTIzNDU2Nzg5MFwiIH0gfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhbmQoXCJJIHN1Ym1pdCB0aGUgZm9ybVwiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGdldEJ5VGV4dChcIlN1Ym1pdFwiKTtcclxuICAgICAgZmlyZUV2ZW50LmNsaWNrKHN1Ym1pdEJ1dHRvbik7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGVuKFwiSSBzaG91bGQgc2VlIHRoZSBzdGFydCBxdWl6IGJ1dHRvblwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiU3RhcnQgUXVpelwiKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLGFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUE4QyxTQUFBRyx1QkFBQUMsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUc5QyxNQUFNRyxPQUFPLEdBQUcsSUFBQUMseUJBQVcsRUFBQyxzQ0FBc0MsQ0FBQztBQUVuRSxJQUFBQywyQkFBYSxFQUFDRixPQUFPLEVBQUdHLElBQUksSUFBSztFQUMvQkEsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLENBQUM7SUFBRUMsS0FBSztJQUFFQyxJQUFJO0lBQUVDLEdBQUc7SUFBRUM7RUFBSyxDQUFDLEtBQUs7SUFDMUUsSUFBSUMsU0FBUztJQUNiLElBQUlDLGNBQW1CO0lBQ3ZCLElBQUlDLFNBQWM7SUFFbEJOLEtBQUssQ0FBQyx5QkFBeUIsRUFBRSxNQUFNO01BQ3JDSSxTQUFTLEdBQUcsSUFBQUcsYUFBTSxnQkFBQ0MsS0FBQSxDQUFBQyxhQUFBLENBQUNsQixLQUFBLENBQUFJLE9BQUksT0FBRyxDQUFDO01BQzVCVSxjQUFjLEdBQUdELFNBQVMsQ0FBQ0MsY0FBYztNQUN6Q0MsU0FBUyxHQUFHRixTQUFTLENBQUNFLFNBQVM7SUFDakMsQ0FBQyxDQUFDO0lBRUZMLElBQUksQ0FBQyx1Q0FBdUMsRUFBR1MsS0FBSyxJQUFLO01BQ3ZELE1BQU1DLFVBQVUsR0FBR04sY0FBYyxDQUFDLGVBQWUsQ0FBQztNQUNsRE8sZ0JBQVMsQ0FBQ0MsTUFBTSxDQUFDRixVQUFVLEVBQUU7UUFBRUcsTUFBTSxFQUFFO1VBQUVDLEtBQUssRUFBRTtRQUFnQjtNQUFFLENBQUMsQ0FBQztJQUN0RSxDQUFDLENBQUM7SUFFRmIsR0FBRyxDQUFDLDZCQUE2QixFQUFHYyxJQUFJLElBQUs7TUFDM0MsTUFBTUMsU0FBUyxHQUFHWixjQUFjLENBQUMsa0JBQWtCLENBQUM7TUFDcERPLGdCQUFTLENBQUNDLE1BQU0sQ0FBQ0ksU0FBUyxFQUFFO1FBQUVILE1BQU0sRUFBRTtVQUFFQyxLQUFLLEVBQUU7UUFBTztNQUFFLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUM7SUFFRmIsR0FBRyxDQUFDLDJDQUEyQyxFQUFHZ0IsS0FBSyxJQUFLO01BQzFELE1BQU1DLFVBQVUsR0FBR2QsY0FBYyxDQUFDLDBCQUEwQixDQUFDO01BQzdETyxnQkFBUyxDQUFDQyxNQUFNLENBQUNNLFVBQVUsRUFBRTtRQUFFTCxNQUFNLEVBQUU7VUFBRUMsS0FBSyxFQUFFO1FBQWE7TUFBRSxDQUFDLENBQUM7SUFDbkUsQ0FBQyxDQUFDO0lBRUZiLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNO01BQzdCLE1BQU1rQixZQUFZLEdBQUdkLFNBQVMsQ0FBQyxRQUFRLENBQUM7TUFDeENNLGdCQUFTLENBQUNTLEtBQUssQ0FBQ0QsWUFBWSxDQUFDO0lBQy9CLENBQUMsQ0FBQztJQUVGakIsSUFBSSxDQUFDLG9DQUFvQyxFQUFFLE1BQU07TUFDL0NtQixNQUFNLENBQUNDLGFBQU0sQ0FBQ2pCLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDa0IsaUJBQWlCLEVBQUU7SUFDNUQsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=