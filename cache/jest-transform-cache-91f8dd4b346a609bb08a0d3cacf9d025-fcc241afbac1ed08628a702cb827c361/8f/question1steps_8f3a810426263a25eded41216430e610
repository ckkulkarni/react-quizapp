10dce4e71965616a7afe3728b34c2167
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRouterDom = require("react-router-dom");
var _Question = _interopRequireDefault(require("../../questions/Question1"));
var _Question2 = _interopRequireDefault(require("../../questions/Question2"));
var _App = require("../../../App");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/question1.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User answers first quiz question correctly", ({
    given,
    when,
    and,
    then
  }) => {
    const mockQuizContext = {
      score: 0,
      setScore: jest.fn(),
      name: "chandu",
      setName: jest.fn(),
      age: 0,
      setAge: jest.fn(),
      email: "chandra@chandu.com",
      setMail: jest.fn(),
      phoneNumber: "1234567890",
      setPhone: jest.fn(),
      selectedLanguage: "ReactJS",
      setSelector: jest.fn(),
      trackScore: false,
      setTracker: jest.fn()
    };
    given("I am on the Question 1 screen", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_App.QuizContext.Provider, {
        value: mockQuizContext,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactRouterDom.Routes, {
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
              path: "/",
              element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Question.default, {})
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
              path: "/question2",
              element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Question2.default, {})
            })]
          })
        })
      }));
      expect(screen).toBeTruthy();
      const questionText = screen.getByText("What is the extension used for TypeScript in ReactJS?");
      expect(questionText).toBeTruthy();
    });
    when('I select the correct answer and press "Answer", then the score should update', () => {
      const correctAnswer = _react2.screen.getByRole("radio", {
        name: ".tsx"
      });
      expect(correctAnswer).toBeTruthy();
      expect(correctAnswer).not.toBeChecked();
    });
    and('The "Answer" button should now be disabled', () => {});
    when("I select any of the numbers above the questions, then it should navigate to that respective question screen", () => {});
    then('I navigate to the next question when I click on the "Next Question" button', () => {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0Um91dGVyRG9tIiwiX1F1ZXN0aW9uIiwiX1F1ZXN0aW9uMiIsIl9BcHAiLCJfanN4UnVudGltZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJnaXZlbiIsIndoZW4iLCJhbmQiLCJ0aGVuIiwibW9ja1F1aXpDb250ZXh0Iiwic2NvcmUiLCJzZXRTY29yZSIsImplc3QiLCJmbiIsIm5hbWUiLCJzZXROYW1lIiwiYWdlIiwic2V0QWdlIiwiZW1haWwiLCJzZXRNYWlsIiwicGhvbmVOdW1iZXIiLCJzZXRQaG9uZSIsInNlbGVjdGVkTGFuZ3VhZ2UiLCJzZXRTZWxlY3RvciIsInRyYWNrU2NvcmUiLCJzZXRUcmFja2VyIiwic2NyZWVuIiwicmVuZGVyIiwianN4IiwiUXVpekNvbnRleHQiLCJQcm92aWRlciIsInZhbHVlIiwiY2hpbGRyZW4iLCJCcm93c2VyUm91dGVyIiwianN4cyIsIlJvdXRlcyIsIlJvdXRlIiwicGF0aCIsImVsZW1lbnQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwicXVlc3Rpb25UZXh0IiwiZ2V0QnlUZXh0IiwiY29ycmVjdEFuc3dlciIsImdldEJ5Um9sZSIsIm5vdCIsInRvQmVDaGVja2VkIl0sInNvdXJjZXMiOlsicXVlc3Rpb24xLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGRlZmluZUZlYXR1cmUsIGxvYWRGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XHJcbmltcG9ydCBcInRleHQtZW5jb2RpbmdcIjtcclxuaW1wb3J0IEhvbWUgZnJvbSBcIi4vLi4vLi4vaG9tZWFuZHN1Ym1pdC9Ib21lXCI7XHJcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdFwiO1xyXG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIFJvdXRlcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBRdWVzdGlvbjEgZnJvbSBcIi4uLy4uL3F1ZXN0aW9ucy9RdWVzdGlvbjFcIjtcclxuaW1wb3J0IFF1ZXN0aW9uMiBmcm9tIFwiLi4vLi4vcXVlc3Rpb25zL1F1ZXN0aW9uMlwiO1xyXG5pbXBvcnQgeyBRdWl6Q29udGV4dCB9IGZyb20gXCIuLi8uLi8uLi9BcHBcIjtcclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKFwic3JjL2NvbXBvbmVudHMvZmVhdHVyZXMvcXVlc3Rpb24xLmZlYXR1cmVcIik7XHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICB0ZXN0KFwiVXNlciBhbnN3ZXJzIGZpcnN0IHF1aXogcXVlc3Rpb24gY29ycmVjdGx5XCIsICh7XHJcbiAgICBnaXZlbixcclxuICAgIHdoZW4sXHJcbiAgICBhbmQsXHJcbiAgICB0aGVuLFxyXG4gIH0pID0+IHtcclxuICAgIGNvbnN0IG1vY2tRdWl6Q29udGV4dCA9IHtcclxuICAgICAgc2NvcmU6IDAsXHJcbiAgICAgIHNldFNjb3JlOiBqZXN0LmZuKCksXHJcbiAgICAgIG5hbWU6IFwiY2hhbmR1XCIsXHJcbiAgICAgIHNldE5hbWU6IGplc3QuZm4oKSxcclxuICAgICAgYWdlOiAwLFxyXG4gICAgICBzZXRBZ2U6IGplc3QuZm4oKSxcclxuICAgICAgZW1haWw6IFwiY2hhbmRyYUBjaGFuZHUuY29tXCIsXHJcbiAgICAgIHNldE1haWw6IGplc3QuZm4oKSxcclxuICAgICAgcGhvbmVOdW1iZXI6IFwiMTIzNDU2Nzg5MFwiLFxyXG4gICAgICBzZXRQaG9uZTogamVzdC5mbigpLFxyXG4gICAgICBzZWxlY3RlZExhbmd1YWdlOiBcIlJlYWN0SlNcIixcclxuICAgICAgc2V0U2VsZWN0b3I6IGplc3QuZm4oKSxcclxuICAgICAgdHJhY2tTY29yZTogZmFsc2UsXHJcbiAgICAgIHNldFRyYWNrZXI6IGplc3QuZm4oKSxcclxuICAgIH07XHJcbiAgICBnaXZlbihcIkkgYW0gb24gdGhlIFF1ZXN0aW9uIDEgc2NyZWVuXCIsICgpID0+IHtcclxuICAgICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICAgIDxRdWl6Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja1F1aXpDb250ZXh0fT5cclxuICAgICAgICAgIDxSb3V0ZXI+XHJcbiAgICAgICAgICAgIDxSb3V0ZXM+XHJcbiAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgZWxlbWVudD17PFF1ZXN0aW9uMSAvPn0gLz5cclxuICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9xdWVzdGlvbjJcIiBlbGVtZW50PXs8UXVlc3Rpb24yIC8+fSAvPlxyXG4gICAgICAgICAgICA8L1JvdXRlcz5cclxuICAgICAgICAgIDwvUm91dGVyPlxyXG4gICAgICAgIDwvUXVpekNvbnRleHQuUHJvdmlkZXI+XHJcbiAgICAgICk7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVUcnV0aHkoKTtcclxuICAgICAgY29uc3QgcXVlc3Rpb25UZXh0ID0gc2NyZWVuLmdldEJ5VGV4dChcclxuICAgICAgICBcIldoYXQgaXMgdGhlIGV4dGVuc2lvbiB1c2VkIGZvciBUeXBlU2NyaXB0IGluIFJlYWN0SlM/XCJcclxuICAgICAgKTtcclxuICAgICAgZXhwZWN0KHF1ZXN0aW9uVGV4dCkudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKFxyXG4gICAgICAnSSBzZWxlY3QgdGhlIGNvcnJlY3QgYW5zd2VyIGFuZCBwcmVzcyBcIkFuc3dlclwiLCB0aGVuIHRoZSBzY29yZSBzaG91bGQgdXBkYXRlJyxcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvcnJlY3RBbnN3ZXIgPSBzY3JlZW4uZ2V0QnlSb2xlKFwicmFkaW9cIiwgeyBuYW1lOiBcIi50c3hcIiB9KTtcclxuICAgICAgICBleHBlY3QoY29ycmVjdEFuc3dlcikudG9CZVRydXRoeSgpO1xyXG4gICAgICAgIGV4cGVjdChjb3JyZWN0QW5zd2VyKS5ub3QudG9CZUNoZWNrZWQoKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICAgIGFuZCgnVGhlIFwiQW5zd2VyXCIgYnV0dG9uIHNob3VsZCBub3cgYmUgZGlzYWJsZWQnLCAoKSA9PiB7fSk7XHJcbiAgICB3aGVuKFxyXG4gICAgICBcIkkgc2VsZWN0IGFueSBvZiB0aGUgbnVtYmVycyBhYm92ZSB0aGUgcXVlc3Rpb25zLCB0aGVuIGl0IHNob3VsZCBuYXZpZ2F0ZSB0byB0aGF0IHJlc3BlY3RpdmUgcXVlc3Rpb24gc2NyZWVuXCIsXHJcbiAgICAgICgpID0+IHt9XHJcbiAgICApO1xyXG4gICAgdGhlbihcclxuICAgICAgJ0kgbmF2aWdhdGUgdG8gdGhlIG5leHQgcXVlc3Rpb24gd2hlbiBJIGNsaWNrIG9uIHRoZSBcIk5leHQgUXVlc3Rpb25cIiBidXR0b24nLFxyXG4gICAgICAoKSA9PiB7fVxyXG4gICAgKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFDQUEsT0FBQTtBQUVBQSxPQUFBO0FBQ0EsSUFBQUcsZUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksU0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssVUFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sSUFBQSxHQUFBTixPQUFBO0FBQTJDLElBQUFP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