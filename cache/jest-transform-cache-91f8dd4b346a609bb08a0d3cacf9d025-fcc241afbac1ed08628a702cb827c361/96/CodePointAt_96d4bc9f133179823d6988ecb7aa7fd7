066b8d177e8ee2c6e3393e47f13978b3
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $TypeError = GetIntrinsic('%TypeError%');
var callBound = require('call-bind/callBound');
var isLeadingSurrogate = require('../helpers/isLeadingSurrogate');
var isTrailingSurrogate = require('../helpers/isTrailingSurrogate');
var Type = require('./Type');
var UTF16SurrogatePairToCodePoint = require('./UTF16SurrogatePairToCodePoint');
var $charAt = callBound('String.prototype.charAt');
var $charCodeAt = callBound('String.prototype.charCodeAt');

// https://ecma-international.org/ecma-262/12.0/#sec-codepointat

module.exports = function CodePointAt(string, position) {
  if (Type(string) !== 'String') {
    throw new $TypeError('Assertion failed: `string` must be a String');
  }
  var size = string.length;
  if (position < 0 || position >= size) {
    throw new $TypeError('Assertion failed: `position` must be >= 0, and < the length of `string`');
  }
  var first = $charCodeAt(string, position);
  var cp = $charAt(string, position);
  var firstIsLeading = isLeadingSurrogate(first);
  var firstIsTrailing = isTrailingSurrogate(first);
  if (!firstIsLeading && !firstIsTrailing) {
    return {
      '[[CodePoint]]': cp,
      '[[CodeUnitCount]]': 1,
      '[[IsUnpairedSurrogate]]': false
    };
  }
  if (firstIsTrailing || position + 1 === size) {
    return {
      '[[CodePoint]]': cp,
      '[[CodeUnitCount]]': 1,
      '[[IsUnpairedSurrogate]]': true
    };
  }
  var second = $charCodeAt(string, position + 1);
  if (!isTrailingSurrogate(second)) {
    return {
      '[[CodePoint]]': cp,
      '[[CodeUnitCount]]': 1,
      '[[IsUnpairedSurrogate]]': true
    };
  }
  return {
    '[[CodePoint]]': UTF16SurrogatePairToCodePoint(first, second),
    '[[CodeUnitCount]]': 2,
    '[[IsUnpairedSurrogate]]': false
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsImNhbGxCb3VuZCIsImlzTGVhZGluZ1N1cnJvZ2F0ZSIsImlzVHJhaWxpbmdTdXJyb2dhdGUiLCJUeXBlIiwiVVRGMTZTdXJyb2dhdGVQYWlyVG9Db2RlUG9pbnQiLCIkY2hhckF0IiwiJGNoYXJDb2RlQXQiLCJtb2R1bGUiLCJleHBvcnRzIiwiQ29kZVBvaW50QXQiLCJzdHJpbmciLCJwb3NpdGlvbiIsInNpemUiLCJsZW5ndGgiLCJmaXJzdCIsImNwIiwiZmlyc3RJc0xlYWRpbmciLCJmaXJzdElzVHJhaWxpbmciLCJzZWNvbmQiXSwic291cmNlcyI6WyJDb2RlUG9pbnRBdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciBpc0xlYWRpbmdTdXJyb2dhdGUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzTGVhZGluZ1N1cnJvZ2F0ZScpO1xudmFyIGlzVHJhaWxpbmdTdXJyb2dhdGUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzVHJhaWxpbmdTdXJyb2dhdGUnKTtcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcbnZhciBVVEYxNlN1cnJvZ2F0ZVBhaXJUb0NvZGVQb2ludCA9IHJlcXVpcmUoJy4vVVRGMTZTdXJyb2dhdGVQYWlyVG9Db2RlUG9pbnQnKTtcblxudmFyICRjaGFyQXQgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuY2hhckF0Jyk7XG52YXIgJGNoYXJDb2RlQXQgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuY2hhckNvZGVBdCcpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvMTIuMC8jc2VjLWNvZGVwb2ludGF0XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ29kZVBvaW50QXQoc3RyaW5nLCBwb3NpdGlvbikge1xuXHRpZiAoVHlwZShzdHJpbmcpICE9PSAnU3RyaW5nJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgc3RyaW5nYCBtdXN0IGJlIGEgU3RyaW5nJyk7XG5cdH1cblx0dmFyIHNpemUgPSBzdHJpbmcubGVuZ3RoO1xuXHRpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYHBvc2l0aW9uYCBtdXN0IGJlID49IDAsIGFuZCA8IHRoZSBsZW5ndGggb2YgYHN0cmluZ2AnKTtcblx0fVxuXHR2YXIgZmlyc3QgPSAkY2hhckNvZGVBdChzdHJpbmcsIHBvc2l0aW9uKTtcblx0dmFyIGNwID0gJGNoYXJBdChzdHJpbmcsIHBvc2l0aW9uKTtcblx0dmFyIGZpcnN0SXNMZWFkaW5nID0gaXNMZWFkaW5nU3Vycm9nYXRlKGZpcnN0KTtcblx0dmFyIGZpcnN0SXNUcmFpbGluZyA9IGlzVHJhaWxpbmdTdXJyb2dhdGUoZmlyc3QpO1xuXHRpZiAoIWZpcnN0SXNMZWFkaW5nICYmICFmaXJzdElzVHJhaWxpbmcpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0J1tbQ29kZVBvaW50XV0nOiBjcCxcblx0XHRcdCdbW0NvZGVVbml0Q291bnRdXSc6IDEsXG5cdFx0XHQnW1tJc1VucGFpcmVkU3Vycm9nYXRlXV0nOiBmYWxzZVxuXHRcdH07XG5cdH1cblx0aWYgKGZpcnN0SXNUcmFpbGluZyB8fCAocG9zaXRpb24gKyAxID09PSBzaXplKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHQnW1tDb2RlUG9pbnRdXSc6IGNwLFxuXHRcdFx0J1tbQ29kZVVuaXRDb3VudF1dJzogMSxcblx0XHRcdCdbW0lzVW5wYWlyZWRTdXJyb2dhdGVdXSc6IHRydWVcblx0XHR9O1xuXHR9XG5cdHZhciBzZWNvbmQgPSAkY2hhckNvZGVBdChzdHJpbmcsIHBvc2l0aW9uICsgMSk7XG5cdGlmICghaXNUcmFpbGluZ1N1cnJvZ2F0ZShzZWNvbmQpKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdCdbW0NvZGVQb2ludF1dJzogY3AsXG5cdFx0XHQnW1tDb2RlVW5pdENvdW50XV0nOiAxLFxuXHRcdFx0J1tbSXNVbnBhaXJlZFN1cnJvZ2F0ZV1dJzogdHJ1ZVxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdCdbW0NvZGVQb2ludF1dJzogVVRGMTZTdXJyb2dhdGVQYWlyVG9Db2RlUG9pbnQoZmlyc3QsIHNlY29uZCksXG5cdFx0J1tbQ29kZVVuaXRDb3VudF1dJzogMixcblx0XHQnW1tJc1VucGFpcmVkU3Vycm9nYXRlXV0nOiBmYWxzZVxuXHR9O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFFM0MsSUFBSUMsVUFBVSxHQUFHRixZQUFZLENBQUMsYUFBYSxDQUFDO0FBQzVDLElBQUlHLFNBQVMsR0FBR0YsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FBQzlDLElBQUlHLGtCQUFrQixHQUFHSCxPQUFPLENBQUMsK0JBQStCLENBQUM7QUFDakUsSUFBSUksbUJBQW1CLEdBQUdKLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztBQUVuRSxJQUFJSyxJQUFJLEdBQUdMLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDNUIsSUFBSU0sNkJBQTZCLEdBQUdOLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQztBQUU5RSxJQUFJTyxPQUFPLEdBQUdMLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQztBQUNsRCxJQUFJTSxXQUFXLEdBQUdOLFNBQVMsQ0FBQyw2QkFBNkIsQ0FBQzs7QUFFMUQ7O0FBRUFPLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsUUFBUSxFQUFFO0VBQ3ZELElBQUlSLElBQUksQ0FBQ08sTUFBTSxDQUFDLEtBQUssUUFBUSxFQUFFO0lBQzlCLE1BQU0sSUFBSVgsVUFBVSxDQUFDLDZDQUE2QyxDQUFDO0VBQ3BFO0VBQ0EsSUFBSWEsSUFBSSxHQUFHRixNQUFNLENBQUNHLE1BQU07RUFDeEIsSUFBSUYsUUFBUSxHQUFHLENBQUMsSUFBSUEsUUFBUSxJQUFJQyxJQUFJLEVBQUU7SUFDckMsTUFBTSxJQUFJYixVQUFVLENBQUMseUVBQXlFLENBQUM7RUFDaEc7RUFDQSxJQUFJZSxLQUFLLEdBQUdSLFdBQVcsQ0FBQ0ksTUFBTSxFQUFFQyxRQUFRLENBQUM7RUFDekMsSUFBSUksRUFBRSxHQUFHVixPQUFPLENBQUNLLE1BQU0sRUFBRUMsUUFBUSxDQUFDO0VBQ2xDLElBQUlLLGNBQWMsR0FBR2Ysa0JBQWtCLENBQUNhLEtBQUssQ0FBQztFQUM5QyxJQUFJRyxlQUFlLEdBQUdmLG1CQUFtQixDQUFDWSxLQUFLLENBQUM7RUFDaEQsSUFBSSxDQUFDRSxjQUFjLElBQUksQ0FBQ0MsZUFBZSxFQUFFO0lBQ3hDLE9BQU87TUFDTixlQUFlLEVBQUVGLEVBQUU7TUFDbkIsbUJBQW1CLEVBQUUsQ0FBQztNQUN0Qix5QkFBeUIsRUFBRTtJQUM1QixDQUFDO0VBQ0Y7RUFDQSxJQUFJRSxlQUFlLElBQUtOLFFBQVEsR0FBRyxDQUFDLEtBQUtDLElBQUssRUFBRTtJQUMvQyxPQUFPO01BQ04sZUFBZSxFQUFFRyxFQUFFO01BQ25CLG1CQUFtQixFQUFFLENBQUM7TUFDdEIseUJBQXlCLEVBQUU7SUFDNUIsQ0FBQztFQUNGO0VBQ0EsSUFBSUcsTUFBTSxHQUFHWixXQUFXLENBQUNJLE1BQU0sRUFBRUMsUUFBUSxHQUFHLENBQUMsQ0FBQztFQUM5QyxJQUFJLENBQUNULG1CQUFtQixDQUFDZ0IsTUFBTSxDQUFDLEVBQUU7SUFDakMsT0FBTztNQUNOLGVBQWUsRUFBRUgsRUFBRTtNQUNuQixtQkFBbUIsRUFBRSxDQUFDO01BQ3RCLHlCQUF5QixFQUFFO0lBQzVCLENBQUM7RUFDRjtFQUVBLE9BQU87SUFDTixlQUFlLEVBQUVYLDZCQUE2QixDQUFDVSxLQUFLLEVBQUVJLE1BQU0sQ0FBQztJQUM3RCxtQkFBbUIsRUFBRSxDQUFDO0lBQ3RCLHlCQUF5QixFQUFFO0VBQzVCLENBQUM7QUFDRixDQUFDIn0=