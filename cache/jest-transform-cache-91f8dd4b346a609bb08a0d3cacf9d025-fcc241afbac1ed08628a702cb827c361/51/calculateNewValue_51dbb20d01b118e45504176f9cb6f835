f02ac2ca20a43f2ee4ba88caba1ae64f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateNewValue = calculateNewValue;
var _selectionRange = require("./selectionRange");
var _getValue2 = require("./getValue");
var _isValidDateValue = require("./isValidDateValue");
var _isValidInputTimeValue = require("./isValidInputTimeValue");
function calculateNewValue(newEntry, element, value = (() => {
  var _getValue;
  return (_getValue = (0, _getValue2.getValue)(element)) != null ? _getValue : /* istanbul ignore next */
  '';
})(), selectionRange = (0, _selectionRange.getSelectionRange)(element), deleteContent) {
  const selectionStart = selectionRange.selectionStart === null ? value.length : selectionRange.selectionStart;
  const selectionEnd = selectionRange.selectionEnd === null ? value.length : selectionRange.selectionEnd;
  const prologEnd = Math.max(0, selectionStart === selectionEnd && deleteContent === 'backward' ? selectionStart - 1 : selectionStart);
  const prolog = value.substring(0, prologEnd);
  const epilogStart = Math.min(value.length, selectionStart === selectionEnd && deleteContent === 'forward' ? selectionEnd + 1 : selectionEnd);
  const epilog = value.substring(epilogStart, value.length);
  let newValue = `${prolog}${newEntry}${epilog}`;
  const newSelectionStart = prologEnd + newEntry.length;
  if (element.type === 'date' && !(0, _isValidDateValue.isValidDateValue)(element, newValue)) {
    newValue = value;
  }
  if (element.type === 'time' && !(0, _isValidInputTimeValue.isValidInputTimeValue)(element, newValue)) {
    if ((0, _isValidInputTimeValue.isValidInputTimeValue)(element, newEntry)) {
      newValue = newEntry;
    } else {
      newValue = value;
    }
  }
  return {
    newValue,
    newSelectionStart
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNhbGN1bGF0ZU5ld1ZhbHVlIiwiX3NlbGVjdGlvblJhbmdlIiwicmVxdWlyZSIsIl9nZXRWYWx1ZTIiLCJfaXNWYWxpZERhdGVWYWx1ZSIsIl9pc1ZhbGlkSW5wdXRUaW1lVmFsdWUiLCJuZXdFbnRyeSIsImVsZW1lbnQiLCJfZ2V0VmFsdWUiLCJnZXRWYWx1ZSIsInNlbGVjdGlvblJhbmdlIiwiZ2V0U2VsZWN0aW9uUmFuZ2UiLCJkZWxldGVDb250ZW50Iiwic2VsZWN0aW9uU3RhcnQiLCJsZW5ndGgiLCJzZWxlY3Rpb25FbmQiLCJwcm9sb2dFbmQiLCJNYXRoIiwibWF4IiwicHJvbG9nIiwic3Vic3RyaW5nIiwiZXBpbG9nU3RhcnQiLCJtaW4iLCJlcGlsb2ciLCJuZXdWYWx1ZSIsIm5ld1NlbGVjdGlvblN0YXJ0IiwidHlwZSIsImlzVmFsaWREYXRlVmFsdWUiLCJpc1ZhbGlkSW5wdXRUaW1lVmFsdWUiXSwic291cmNlcyI6WyJjYWxjdWxhdGVOZXdWYWx1ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2FsY3VsYXRlTmV3VmFsdWUgPSBjYWxjdWxhdGVOZXdWYWx1ZTtcblxudmFyIF9zZWxlY3Rpb25SYW5nZSA9IHJlcXVpcmUoXCIuL3NlbGVjdGlvblJhbmdlXCIpO1xuXG52YXIgX2dldFZhbHVlMiA9IHJlcXVpcmUoXCIuL2dldFZhbHVlXCIpO1xuXG52YXIgX2lzVmFsaWREYXRlVmFsdWUgPSByZXF1aXJlKFwiLi9pc1ZhbGlkRGF0ZVZhbHVlXCIpO1xuXG52YXIgX2lzVmFsaWRJbnB1dFRpbWVWYWx1ZSA9IHJlcXVpcmUoXCIuL2lzVmFsaWRJbnB1dFRpbWVWYWx1ZVwiKTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlTmV3VmFsdWUobmV3RW50cnksIGVsZW1lbnQsIHZhbHVlID0gKCgpID0+IHtcbiAgdmFyIF9nZXRWYWx1ZTtcblxuICByZXR1cm4gKF9nZXRWYWx1ZSA9ICgwLCBfZ2V0VmFsdWUyLmdldFZhbHVlKShlbGVtZW50KSkgIT0gbnVsbCA/IF9nZXRWYWx1ZSA6XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICcnO1xufSkoKSwgc2VsZWN0aW9uUmFuZ2UgPSAoMCwgX3NlbGVjdGlvblJhbmdlLmdldFNlbGVjdGlvblJhbmdlKShlbGVtZW50KSwgZGVsZXRlQ29udGVudCkge1xuICBjb25zdCBzZWxlY3Rpb25TdGFydCA9IHNlbGVjdGlvblJhbmdlLnNlbGVjdGlvblN0YXJ0ID09PSBudWxsID8gdmFsdWUubGVuZ3RoIDogc2VsZWN0aW9uUmFuZ2Uuc2VsZWN0aW9uU3RhcnQ7XG4gIGNvbnN0IHNlbGVjdGlvbkVuZCA9IHNlbGVjdGlvblJhbmdlLnNlbGVjdGlvbkVuZCA9PT0gbnVsbCA/IHZhbHVlLmxlbmd0aCA6IHNlbGVjdGlvblJhbmdlLnNlbGVjdGlvbkVuZDtcbiAgY29uc3QgcHJvbG9nRW5kID0gTWF0aC5tYXgoMCwgc2VsZWN0aW9uU3RhcnQgPT09IHNlbGVjdGlvbkVuZCAmJiBkZWxldGVDb250ZW50ID09PSAnYmFja3dhcmQnID8gc2VsZWN0aW9uU3RhcnQgLSAxIDogc2VsZWN0aW9uU3RhcnQpO1xuICBjb25zdCBwcm9sb2cgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgcHJvbG9nRW5kKTtcbiAgY29uc3QgZXBpbG9nU3RhcnQgPSBNYXRoLm1pbih2YWx1ZS5sZW5ndGgsIHNlbGVjdGlvblN0YXJ0ID09PSBzZWxlY3Rpb25FbmQgJiYgZGVsZXRlQ29udGVudCA9PT0gJ2ZvcndhcmQnID8gc2VsZWN0aW9uRW5kICsgMSA6IHNlbGVjdGlvbkVuZCk7XG4gIGNvbnN0IGVwaWxvZyA9IHZhbHVlLnN1YnN0cmluZyhlcGlsb2dTdGFydCwgdmFsdWUubGVuZ3RoKTtcbiAgbGV0IG5ld1ZhbHVlID0gYCR7cHJvbG9nfSR7bmV3RW50cnl9JHtlcGlsb2d9YDtcbiAgY29uc3QgbmV3U2VsZWN0aW9uU3RhcnQgPSBwcm9sb2dFbmQgKyBuZXdFbnRyeS5sZW5ndGg7XG5cbiAgaWYgKGVsZW1lbnQudHlwZSA9PT0gJ2RhdGUnICYmICEoMCwgX2lzVmFsaWREYXRlVmFsdWUuaXNWYWxpZERhdGVWYWx1ZSkoZWxlbWVudCwgbmV3VmFsdWUpKSB7XG4gICAgbmV3VmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGlmIChlbGVtZW50LnR5cGUgPT09ICd0aW1lJyAmJiAhKDAsIF9pc1ZhbGlkSW5wdXRUaW1lVmFsdWUuaXNWYWxpZElucHV0VGltZVZhbHVlKShlbGVtZW50LCBuZXdWYWx1ZSkpIHtcbiAgICBpZiAoKDAsIF9pc1ZhbGlkSW5wdXRUaW1lVmFsdWUuaXNWYWxpZElucHV0VGltZVZhbHVlKShlbGVtZW50LCBuZXdFbnRyeSkpIHtcbiAgICAgIG5ld1ZhbHVlID0gbmV3RW50cnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuZXdWYWx1ZSxcbiAgICBuZXdTZWxlY3Rpb25TdGFydFxuICB9O1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLGlCQUFpQixHQUFHQSxpQkFBaUI7QUFFN0MsSUFBSUMsZUFBZSxHQUFHQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFFakQsSUFBSUMsVUFBVSxHQUFHRCxPQUFPLENBQUMsWUFBWSxDQUFDO0FBRXRDLElBQUlFLGlCQUFpQixHQUFHRixPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFFckQsSUFBSUcsc0JBQXNCLEdBQUdILE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztBQUUvRCxTQUFTRixpQkFBaUJBLENBQUNNLFFBQVEsRUFBRUMsT0FBTyxFQUFFUixLQUFLLEdBQUcsQ0FBQyxNQUFNO0VBQzNELElBQUlTLFNBQVM7RUFFYixPQUFPLENBQUNBLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRUwsVUFBVSxDQUFDTSxRQUFRLEVBQUVGLE9BQU8sQ0FBQyxLQUFLLElBQUksR0FBR0MsU0FBUyxHQUMxRTtFQUNBLEVBQUU7QUFDSixDQUFDLEdBQUcsRUFBRUUsY0FBYyxHQUFHLENBQUMsQ0FBQyxFQUFFVCxlQUFlLENBQUNVLGlCQUFpQixFQUFFSixPQUFPLENBQUMsRUFBRUssYUFBYSxFQUFFO0VBQ3JGLE1BQU1DLGNBQWMsR0FBR0gsY0FBYyxDQUFDRyxjQUFjLEtBQUssSUFBSSxHQUFHZCxLQUFLLENBQUNlLE1BQU0sR0FBR0osY0FBYyxDQUFDRyxjQUFjO0VBQzVHLE1BQU1FLFlBQVksR0FBR0wsY0FBYyxDQUFDSyxZQUFZLEtBQUssSUFBSSxHQUFHaEIsS0FBSyxDQUFDZSxNQUFNLEdBQUdKLGNBQWMsQ0FBQ0ssWUFBWTtFQUN0RyxNQUFNQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsRUFBRUwsY0FBYyxLQUFLRSxZQUFZLElBQUlILGFBQWEsS0FBSyxVQUFVLEdBQUdDLGNBQWMsR0FBRyxDQUFDLEdBQUdBLGNBQWMsQ0FBQztFQUNwSSxNQUFNTSxNQUFNLEdBQUdwQixLQUFLLENBQUNxQixTQUFTLENBQUMsQ0FBQyxFQUFFSixTQUFTLENBQUM7RUFDNUMsTUFBTUssV0FBVyxHQUFHSixJQUFJLENBQUNLLEdBQUcsQ0FBQ3ZCLEtBQUssQ0FBQ2UsTUFBTSxFQUFFRCxjQUFjLEtBQUtFLFlBQVksSUFBSUgsYUFBYSxLQUFLLFNBQVMsR0FBR0csWUFBWSxHQUFHLENBQUMsR0FBR0EsWUFBWSxDQUFDO0VBQzVJLE1BQU1RLE1BQU0sR0FBR3hCLEtBQUssQ0FBQ3FCLFNBQVMsQ0FBQ0MsV0FBVyxFQUFFdEIsS0FBSyxDQUFDZSxNQUFNLENBQUM7RUFDekQsSUFBSVUsUUFBUSxHQUFJLEdBQUVMLE1BQU8sR0FBRWIsUUFBUyxHQUFFaUIsTUFBTyxFQUFDO0VBQzlDLE1BQU1FLGlCQUFpQixHQUFHVCxTQUFTLEdBQUdWLFFBQVEsQ0FBQ1EsTUFBTTtFQUVyRCxJQUFJUCxPQUFPLENBQUNtQixJQUFJLEtBQUssTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUV0QixpQkFBaUIsQ0FBQ3VCLGdCQUFnQixFQUFFcEIsT0FBTyxFQUFFaUIsUUFBUSxDQUFDLEVBQUU7SUFDMUZBLFFBQVEsR0FBR3pCLEtBQUs7RUFDbEI7RUFFQSxJQUFJUSxPQUFPLENBQUNtQixJQUFJLEtBQUssTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUVyQixzQkFBc0IsQ0FBQ3VCLHFCQUFxQixFQUFFckIsT0FBTyxFQUFFaUIsUUFBUSxDQUFDLEVBQUU7SUFDcEcsSUFBSSxDQUFDLENBQUMsRUFBRW5CLHNCQUFzQixDQUFDdUIscUJBQXFCLEVBQUVyQixPQUFPLEVBQUVELFFBQVEsQ0FBQyxFQUFFO01BQ3hFa0IsUUFBUSxHQUFHbEIsUUFBUTtJQUNyQixDQUFDLE1BQU07TUFDTGtCLFFBQVEsR0FBR3pCLEtBQUs7SUFDbEI7RUFDRjtFQUVBLE9BQU87SUFDTHlCLFFBQVE7SUFDUkM7RUFDRixDQUFDO0FBQ0gifQ==