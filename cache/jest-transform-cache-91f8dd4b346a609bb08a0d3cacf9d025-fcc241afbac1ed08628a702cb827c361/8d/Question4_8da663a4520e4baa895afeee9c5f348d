0e6aaf3dd21a0293755d9fe1d2cdf126
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _formik = require("formik");
var _App = require("./../../App");
var _material = require("@mui/material");
var _NavigateNext = _interopRequireDefault(require("@mui/icons-material/NavigateNext"));
var _reactRouter = require("react-router");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Question4 = () => {
  const navigation = (0, _reactRouter.useNavigate)();
  const {
    score,
    setScore,
    trackScore,
    setTracker,
    selectedLanguage
  } = (0, _react.useContext)(_App.QuizContext);
  let questionText = "";
  let answersObject = [];
  if (selectedLanguage === "ReactJS") {
    questionText = "In React, which lifecycle method is called when a component is removed from the DOM?";
    answersObject = ["componentWillUnmount", "componentDidMount", "componentWillUpdate", "componentDidUpdate"];
  } else if (selectedLanguage === "React Native") {
    questionText = "Flutter uses dart, and React Native uses JS. Which is easier?";
    answersObject = ["Dart", "JavaScript"];
  } else if (selectedLanguage === "Java") {
    questionText = "Java is . . .";
    answersObject = ["Object-Oriented", "Platform-Independent", "Multithread language", "All of the above"];
  }
  const [isSubmitted, setIsSubmitted] = (0, _react.useState)(false);
  const formik = (0, _formik.useFormik)({
    initialValues: {
      answer: ""
    },
    onSubmit: values => {
      if (selectedLanguage === "ReactJS") {
        if (values.answer === answersObject[0] && score < 4) {
          setScore(previous => previous + 1);
        }
      } else if (selectedLanguage === "React Native") {
        if (values.answer === answersObject[0] && score < 4) {
          setScore(previous => previous + 1);
        }
      } else if (selectedLanguage === "Java") {
        if (values.answer === answersObject[3] && score < 4) {
          setScore(previous => previous + 1);
        }
      }
      setIsSubmitted(true);
    }
  });
  const handleNavigation = () => {
    navigation("/question5");
  };
  const handleQuestionNavigation = index => {
    navigation(`/question${index}`);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
      sx: {
        display: "flex",
        gap: 1,
        flexDirection: "column",
        alignItems: "flex-end",
        p: 1,
        mt: "25vh",
        mr: 2
      },
      children: [1, 2, 3, 4, 5].map(number => /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.IconButton, {
        onClick: () => handleQuestionNavigation(number),
        sx: {
          border: 1,
          borderColor: "divider"
        },
        children: number
      }, number))
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "quiz-container",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
        sx: {
          display: "flex",
          justifyContent: "center",
          alignItems: "flex-start",
          flexDirection: "column",
          gap: 2
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex",
            flexDirection: "column",
            gap: 1
          },
          children: [trackScore && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Typography, {
            children: ["Score: ", score]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Button, {
            variant: "outlined",
            onClick: () => {
              setTracker(!trackScore);
            },
            children: trackScore ? "Disable Score Tracking" : "Enable Score Tracking"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            children: questionText
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.RadioGroup, {
          name: "answer",
          value: formik.values.answer,
          onChange: formik.handleChange,
          children: answersObject.map(option => /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.FormControlLabel, {
            value: option,
            control: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Radio, {}),
            label: option,
            disabled: isSubmitted
          }, option))
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex"
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Button, {
            variant: "contained",
            onClick: e => formik.handleSubmit(),
            disabled: isSubmitted,
            children: "Submit"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.IconButton, {
            onClick: handleNavigation,
            "aria-label": "next-question",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_NavigateNext.default, {})
          })]
        })]
      })
    })]
  });
};
var _default = Question4;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,