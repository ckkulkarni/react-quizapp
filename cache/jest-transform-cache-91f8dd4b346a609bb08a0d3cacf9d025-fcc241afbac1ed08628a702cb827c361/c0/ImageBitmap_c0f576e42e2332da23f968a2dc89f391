dabacbb1003fd5fb9d1306c50520ccad
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
class ImageBitmap {
  constructor(width, height) {
    _defineProperty(this, "width", 0);
    _defineProperty(this, "height", 0);
    _defineProperty(this, "_closed", false);
    this.width = width;
    this.height = height;
    this.close = jest.fn(this.close.bind(this));
  }
  close() {
    this.width = 0;
    this.height = 0;
    this._closed = true;
  }
}
exports.default = ImageBitmap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJfdG9Qcm9wZXJ0eUtleSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJJbWFnZUJpdG1hcCIsImNvbnN0cnVjdG9yIiwid2lkdGgiLCJoZWlnaHQiLCJjbG9zZSIsImplc3QiLCJmbiIsImJpbmQiLCJfY2xvc2VkIl0sInNvdXJjZXMiOlsiSW1hZ2VCaXRtYXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIHR5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAodHlwZW9mIHJlcyAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9XG5jbGFzcyBJbWFnZUJpdG1hcCB7XG4gIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ3aWR0aFwiLCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJoZWlnaHRcIiwgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX2Nsb3NlZFwiLCBmYWxzZSk7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMuY2xvc2UgPSBqZXN0LmZuKHRoaXMuY2xvc2UuYmluZCh0aGlzKSk7XG4gIH1cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy53aWR0aCA9IDA7XG4gICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgIHRoaXMuX2Nsb3NlZCA9IHRydWU7XG4gIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEltYWdlQml0bWFwOyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMs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