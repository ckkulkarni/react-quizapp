16b92c2f32fdfc0767c3b1974eb5b5b5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _formik = require("formik");
var _App = require("./../../App");
var _material = require("@mui/material");
var _NavigateNext = _interopRequireDefault(require("@mui/icons-material/NavigateNext"));
var _reactRouter = require("react-router");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Question4 = () => {
  const navigation = (0, _reactRouter.useNavigate)();
  const {
    score,
    setScore,
    trackScore,
    setTracker,
    selectedLanguage
  } = (0, _react.useContext)(_App.QuizContext);
  let questionText = "";
  let answersObject = [];
  if (selectedLanguage === "ReactJS") {
    questionText = "In React, which lifecycle method is called when a component is removed from the DOM?";
    answersObject = ["componentWillUnmount", "componentDidMount", "componentWillUpdate", "componentDidUpdate"];
  } else if (selectedLanguage === "React Native") {
    questionText = "Flutter uses dart, and React Native uses JS. Which is easier?";
    answersObject = ["Dart", "JavaScript"];
  } else if (selectedLanguage === "Java") {
    questionText = "Java is . . .";
    answersObject = ["Object-Oriented", "Platform-Independent", "Multithread language", "All of the above"];
  }
  const [isSubmitted, setIsSubmitted] = (0, _react.useState)(false);
  const formik = (0, _formik.useFormik)({
    initialValues: {
      answer: ""
    },
    onSubmit: values => {
      if (selectedLanguage === "ReactJS") {
        if (values.answer === answersObject[0] && score < 4) {
          setScore(previous => previous + 1);
        }
      } else if (selectedLanguage === "React Native") {
        if (values.answer === answersObject[0] && score < 4) {
          setScore(previous => previous + 1);
        }
      } else if (selectedLanguage === "Java") {
        if (values.answer === answersObject[3] && score < 4) {
          setScore(previous => previous + 1);
        }
      }
      setIsSubmitted(true);
    }
  });
  const handleNavigation = () => {
    navigation("/question5");
  };
  const handleQuestionNavigation = index => {
    navigation(`/question${index}`);
  };
  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      display: "flex",
      gap: 1,
      flexDirection: "column",
      alignItems: "flex-end",
      p: 1,
      mt: "25vh",
      mr: 2
    }
  }, [1, 2, 3, 4, 5].map(number => /*#__PURE__*/_react.default.createElement(_material.IconButton, {
    onClick: () => handleQuestionNavigation(number),
    sx: {
      border: 1,
      borderColor: "divider"
    }
  }, number))), /*#__PURE__*/_react.default.createElement("div", {
    className: "quiz-container"
  }, /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      display: "flex",
      justifyContent: "center",
      alignItems: "flex-start",
      flexDirection: "column",
      gap: 2
    }
  }, /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      display: "flex",
      flexDirection: "column",
      gap: 1
    }
  }, trackScore && /*#__PURE__*/_react.default.createElement(_material.Typography, null, "Score: ", score), /*#__PURE__*/_react.default.createElement(_material.Button, {
    variant: "outlined",
    onClick: () => {
      setTracker(!trackScore);
    }
  }, trackScore ? "Disable Score Tracking" : "Enable Score Tracking")), /*#__PURE__*/_react.default.createElement(_material.Box, null, /*#__PURE__*/_react.default.createElement(_material.Typography, null, questionText)), /*#__PURE__*/_react.default.createElement(_material.RadioGroup, {
    name: "answer",
    value: formik.values.answer,
    onChange: formik.handleChange
  }, answersObject.map(option => /*#__PURE__*/_react.default.createElement(_material.FormControlLabel, {
    key: option,
    value: option,
    control: /*#__PURE__*/_react.default.createElement(_material.Radio, null),
    label: option,
    disabled: isSubmitted
  }))), /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      display: "flex"
    }
  }, /*#__PURE__*/_react.default.createElement(_material.Button, {
    variant: "contained",
    onClick: e => formik.handleSubmit(),
    disabled: isSubmitted
  }, "Submit"), /*#__PURE__*/_react.default.createElement(_material.IconButton, {
    onClick: handleNavigation
  }, /*#__PURE__*/_react.default.createElement(_NavigateNext.default, null))))));
};
var _default = Question4;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,