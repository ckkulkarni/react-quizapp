8ef6c08e0eccc8775f697b1de865773a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ImageBitmap = _interopRequireDefault(require("../classes/ImageBitmap"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var _default = jest.fn(function createImageBitmap(img, sx, sy, sWidth, sHeight, options) {
  var length = arguments.length;
  return new Promise((resolve, reject) => {
    if (length === 0) return reject(new TypeError("Failed to execute 'createImageBitmap' on 'Window': 1 argument required, but only 0 present."));
    if (length === 3 || length === 4) return reject(new TypeError("Failed to execute 'createImageBitmap' on 'Window': Valid arities are: [1, 2, 5, 6], but " + length + ' arguments provided.'));
    let validImage = false;
    if (img instanceof HTMLImageElement) validImage = true;
    if (img instanceof HTMLVideoElement) validImage = true;
    if (img instanceof HTMLCanvasElement) validImage = true;
    // checking constructor name is the only reliable way to verify the object's constructing class is "blob-like"
    if (img instanceof Blob || img && img.constructor && img.constructor.name === 'Blob') validImage = true;
    if (img instanceof _ImageBitmap.default) validImage = true;
    if (img instanceof ImageData) validImage = true;
    if (!validImage) return reject(new TypeError("Failed to execute 'createImageBitmap' on 'Window': The provided value is not of type '(HTMLImageElement or SVGImageElement or HTMLVideoElement or HTMLCanvasElement or Blob or ImageData or ImageBitmap or OffscreenCanvas)'"));
    if (length >= 2) {
      let index = 6;
      if (length === 2) {
        index = 2;
        options = sx;
      }
      if (length === 5) options = null;
      if (options !== null && options !== void 0) {
        if (typeof options !== 'object') throw new TypeError("Failed to execute 'createImageBitmap' on 'Window': parameter " + index + " ('options') is not an object.");
      }
    }
    if (length >= 5) {
      sWidth = Number(sWidth);
      sHeight = Number(sHeight);
      if (sWidth === 0 || !Number.isFinite(sWidth)) return reject(new RangeError('The crop rect width is 0.'));
      if (sHeight === 0 || !Number.isFinite(sHeight)) return reject(new RangeError('The crop rect height is 0.'));
      sWidth = Math.abs(sWidth);
      sHeight = Math.abs(sHeight);
    } else {
      sWidth = img.width || 1;
      sHeight = img.height || 1;
    }
    return resolve(new _ImageBitmap.default(sWidth, sHeight));
  });
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfSW1hZ2VCaXRtYXAiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZGVmYXVsdCIsImplc3QiLCJmbiIsImNyZWF0ZUltYWdlQml0bWFwIiwiaW1nIiwic3giLCJzeSIsInNXaWR0aCIsInNIZWlnaHQiLCJvcHRpb25zIiwibGVuZ3RoIiwiYXJndW1lbnRzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJUeXBlRXJyb3IiLCJ2YWxpZEltYWdlIiwiSFRNTEltYWdlRWxlbWVudCIsIkhUTUxWaWRlb0VsZW1lbnQiLCJIVE1MQ2FudmFzRWxlbWVudCIsIkJsb2IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJJbWFnZURhdGEiLCJpbmRleCIsIk51bWJlciIsImlzRmluaXRlIiwiUmFuZ2VFcnJvciIsIk1hdGgiLCJhYnMiLCJ3aWR0aCIsImhlaWdodCJdLCJzb3VyY2VzIjpbImNyZWF0ZUltYWdlQml0bWFwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9JbWFnZUJpdG1hcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NsYXNzZXMvSW1hZ2VCaXRtYXBcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbnZhciBfZGVmYXVsdCA9IGplc3QuZm4oZnVuY3Rpb24gY3JlYXRlSW1hZ2VCaXRtYXAoaW1nLCBzeCwgc3ksIHNXaWR0aCwgc0hlaWdodCwgb3B0aW9ucykge1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnY3JlYXRlSW1hZ2VCaXRtYXAnIG9uICdXaW5kb3cnOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpKTtcbiAgICBpZiAobGVuZ3RoID09PSAzIHx8IGxlbmd0aCA9PT0gNCkgcmV0dXJuIHJlamVjdChuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ2NyZWF0ZUltYWdlQml0bWFwJyBvbiAnV2luZG93JzogVmFsaWQgYXJpdGllcyBhcmU6IFsxLCAyLCA1LCA2XSwgYnV0IFwiICsgbGVuZ3RoICsgJyBhcmd1bWVudHMgcHJvdmlkZWQuJykpO1xuICAgIGxldCB2YWxpZEltYWdlID0gZmFsc2U7XG4gICAgaWYgKGltZyBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQpIHZhbGlkSW1hZ2UgPSB0cnVlO1xuICAgIGlmIChpbWcgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50KSB2YWxpZEltYWdlID0gdHJ1ZTtcbiAgICBpZiAoaW1nIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHZhbGlkSW1hZ2UgPSB0cnVlO1xuICAgIC8vIGNoZWNraW5nIGNvbnN0cnVjdG9yIG5hbWUgaXMgdGhlIG9ubHkgcmVsaWFibGUgd2F5IHRvIHZlcmlmeSB0aGUgb2JqZWN0J3MgY29uc3RydWN0aW5nIGNsYXNzIGlzIFwiYmxvYi1saWtlXCJcbiAgICBpZiAoaW1nIGluc3RhbmNlb2YgQmxvYiB8fCBpbWcgJiYgaW1nLmNvbnN0cnVjdG9yICYmIGltZy5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQmxvYicpIHZhbGlkSW1hZ2UgPSB0cnVlO1xuICAgIGlmIChpbWcgaW5zdGFuY2VvZiBfSW1hZ2VCaXRtYXAuZGVmYXVsdCkgdmFsaWRJbWFnZSA9IHRydWU7XG4gICAgaWYgKGltZyBpbnN0YW5jZW9mIEltYWdlRGF0YSkgdmFsaWRJbWFnZSA9IHRydWU7XG4gICAgaWYgKCF2YWxpZEltYWdlKSByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnY3JlYXRlSW1hZ2VCaXRtYXAnIG9uICdXaW5kb3cnOiBUaGUgcHJvdmlkZWQgdmFsdWUgaXMgbm90IG9mIHR5cGUgJyhIVE1MSW1hZ2VFbGVtZW50IG9yIFNWR0ltYWdlRWxlbWVudCBvciBIVE1MVmlkZW9FbGVtZW50IG9yIEhUTUxDYW52YXNFbGVtZW50IG9yIEJsb2Igb3IgSW1hZ2VEYXRhIG9yIEltYWdlQml0bWFwIG9yIE9mZnNjcmVlbkNhbnZhcyknXCIpKTtcbiAgICBpZiAobGVuZ3RoID49IDIpIHtcbiAgICAgIGxldCBpbmRleCA9IDY7XG4gICAgICBpZiAobGVuZ3RoID09PSAyKSB7XG4gICAgICAgIGluZGV4ID0gMjtcbiAgICAgICAgb3B0aW9ucyA9IHN4O1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA9PT0gNSkgb3B0aW9ucyA9IG51bGw7XG4gICAgICBpZiAob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JykgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICdjcmVhdGVJbWFnZUJpdG1hcCcgb24gJ1dpbmRvdyc6IHBhcmFtZXRlciBcIiArIGluZGV4ICsgXCIgKCdvcHRpb25zJykgaXMgbm90IGFuIG9iamVjdC5cIik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsZW5ndGggPj0gNSkge1xuICAgICAgc1dpZHRoID0gTnVtYmVyKHNXaWR0aCk7XG4gICAgICBzSGVpZ2h0ID0gTnVtYmVyKHNIZWlnaHQpO1xuICAgICAgaWYgKHNXaWR0aCA9PT0gMCB8fCAhTnVtYmVyLmlzRmluaXRlKHNXaWR0aCkpIHJldHVybiByZWplY3QobmV3IFJhbmdlRXJyb3IoJ1RoZSBjcm9wIHJlY3Qgd2lkdGggaXMgMC4nKSk7XG4gICAgICBpZiAoc0hlaWdodCA9PT0gMCB8fCAhTnVtYmVyLmlzRmluaXRlKHNIZWlnaHQpKSByZXR1cm4gcmVqZWN0KG5ldyBSYW5nZUVycm9yKCdUaGUgY3JvcCByZWN0IGhlaWdodCBpcyAwLicpKTtcbiAgICAgIHNXaWR0aCA9IE1hdGguYWJzKHNXaWR0aCk7XG4gICAgICBzSGVpZ2h0ID0gTWF0aC5hYnMoc0hlaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNXaWR0aCA9IGltZy53aWR0aCB8fCAxO1xuICAgICAgc0hlaWdodCA9IGltZy5oZWlnaHQgfHwgMTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc29sdmUobmV3IF9JbWFnZUJpdG1hcC5kZWZhdWx0KHNXaWR0aCwgc0hlaWdodCkpO1xuICB9KTtcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN4QixJQUFJQyxZQUFZLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUM1RSxTQUFTRCxzQkFBc0JBLENBQUNFLEdBQUcsRUFBRTtFQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLEdBQUdELEdBQUcsR0FBRztJQUFFSixPQUFPLEVBQUVJO0VBQUksQ0FBQztBQUFFO0FBQzlGLElBQUlFLFFBQVEsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsU0FBU0MsaUJBQWlCQSxDQUFDQyxHQUFHLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFO0VBQ3ZGLElBQUlDLE1BQU0sR0FBR0MsU0FBUyxDQUFDRCxNQUFNO0VBQzdCLE9BQU8sSUFBSUUsT0FBTyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO0lBQ3RDLElBQUlKLE1BQU0sS0FBSyxDQUFDLEVBQUUsT0FBT0ksTUFBTSxDQUFDLElBQUlDLFNBQVMsQ0FBQyw2RkFBNkYsQ0FBQyxDQUFDO0lBQzdJLElBQUlMLE1BQU0sS0FBSyxDQUFDLElBQUlBLE1BQU0sS0FBSyxDQUFDLEVBQUUsT0FBT0ksTUFBTSxDQUFDLElBQUlDLFNBQVMsQ0FBQywwRkFBMEYsR0FBR0wsTUFBTSxHQUFHLHNCQUFzQixDQUFDLENBQUM7SUFDNUwsSUFBSU0sVUFBVSxHQUFHLEtBQUs7SUFDdEIsSUFBSVosR0FBRyxZQUFZYSxnQkFBZ0IsRUFBRUQsVUFBVSxHQUFHLElBQUk7SUFDdEQsSUFBSVosR0FBRyxZQUFZYyxnQkFBZ0IsRUFBRUYsVUFBVSxHQUFHLElBQUk7SUFDdEQsSUFBSVosR0FBRyxZQUFZZSxpQkFBaUIsRUFBRUgsVUFBVSxHQUFHLElBQUk7SUFDdkQ7SUFDQSxJQUFJWixHQUFHLFlBQVlnQixJQUFJLElBQUloQixHQUFHLElBQUlBLEdBQUcsQ0FBQ2lCLFdBQVcsSUFBSWpCLEdBQUcsQ0FBQ2lCLFdBQVcsQ0FBQ0MsSUFBSSxLQUFLLE1BQU0sRUFBRU4sVUFBVSxHQUFHLElBQUk7SUFDdkcsSUFBSVosR0FBRyxZQUFZVCxZQUFZLENBQUNELE9BQU8sRUFBRXNCLFVBQVUsR0FBRyxJQUFJO0lBQzFELElBQUlaLEdBQUcsWUFBWW1CLFNBQVMsRUFBRVAsVUFBVSxHQUFHLElBQUk7SUFDL0MsSUFBSSxDQUFDQSxVQUFVLEVBQUUsT0FBT0YsTUFBTSxDQUFDLElBQUlDLFNBQVMsQ0FBQyw4TkFBOE4sQ0FBQyxDQUFDO0lBQzdRLElBQUlMLE1BQU0sSUFBSSxDQUFDLEVBQUU7TUFDZixJQUFJYyxLQUFLLEdBQUcsQ0FBQztNQUNiLElBQUlkLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDaEJjLEtBQUssR0FBRyxDQUFDO1FBQ1RmLE9BQU8sR0FBR0osRUFBRTtNQUNkO01BQ0EsSUFBSUssTUFBTSxLQUFLLENBQUMsRUFBRUQsT0FBTyxHQUFHLElBQUk7TUFDaEMsSUFBSUEsT0FBTyxLQUFLLElBQUksSUFBSUEsT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO1FBQzFDLElBQUksT0FBT0EsT0FBTyxLQUFLLFFBQVEsRUFBRSxNQUFNLElBQUlNLFNBQVMsQ0FBQywrREFBK0QsR0FBR1MsS0FBSyxHQUFHLGdDQUFnQyxDQUFDO01BQ2xLO0lBQ0Y7SUFDQSxJQUFJZCxNQUFNLElBQUksQ0FBQyxFQUFFO01BQ2ZILE1BQU0sR0FBR2tCLE1BQU0sQ0FBQ2xCLE1BQU0sQ0FBQztNQUN2QkMsT0FBTyxHQUFHaUIsTUFBTSxDQUFDakIsT0FBTyxDQUFDO01BQ3pCLElBQUlELE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQ2tCLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDbkIsTUFBTSxDQUFDLEVBQUUsT0FBT08sTUFBTSxDQUFDLElBQUlhLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO01BQ3hHLElBQUluQixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUNpQixNQUFNLENBQUNDLFFBQVEsQ0FBQ2xCLE9BQU8sQ0FBQyxFQUFFLE9BQU9NLE1BQU0sQ0FBQyxJQUFJYSxVQUFVLENBQUMsNEJBQTRCLENBQUMsQ0FBQztNQUMzR3BCLE1BQU0sR0FBR3FCLElBQUksQ0FBQ0MsR0FBRyxDQUFDdEIsTUFBTSxDQUFDO01BQ3pCQyxPQUFPLEdBQUdvQixJQUFJLENBQUNDLEdBQUcsQ0FBQ3JCLE9BQU8sQ0FBQztJQUM3QixDQUFDLE1BQU07TUFDTEQsTUFBTSxHQUFHSCxHQUFHLENBQUMwQixLQUFLLElBQUksQ0FBQztNQUN2QnRCLE9BQU8sR0FBR0osR0FBRyxDQUFDMkIsTUFBTSxJQUFJLENBQUM7SUFDM0I7SUFDQSxPQUFPbEIsT0FBTyxDQUFDLElBQUlsQixZQUFZLENBQUNELE9BQU8sQ0FBQ2EsTUFBTSxFQUFFQyxPQUFPLENBQUMsQ0FBQztFQUMzRCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFDRmhCLE9BQU8sQ0FBQ0UsT0FBTyxHQUFHTSxRQUFRIn0=