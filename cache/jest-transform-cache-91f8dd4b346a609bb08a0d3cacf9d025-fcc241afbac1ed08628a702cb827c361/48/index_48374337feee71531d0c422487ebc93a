d0cb3c8698e64f829c0321ff773a9ffe
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseFragment = exports.parse = exports.TokenizerMode = exports.Tokenizer = exports.Token = exports.html = exports.foreignContent = exports.ErrorCodes = exports.serializeOuter = exports.serialize = exports.Parser = exports.defaultTreeAdapter = void 0;
const index_js_1 = require("./parser/index.js");
var default_js_1 = require("./tree-adapters/default.js");
Object.defineProperty(exports, "defaultTreeAdapter", {
  enumerable: true,
  get: function () {
    return default_js_1.defaultTreeAdapter;
  }
});
var index_js_2 = require("./parser/index.js");
Object.defineProperty(exports, "Parser", {
  enumerable: true,
  get: function () {
    return index_js_2.Parser;
  }
});
var index_js_3 = require("./serializer/index.js");
Object.defineProperty(exports, "serialize", {
  enumerable: true,
  get: function () {
    return index_js_3.serialize;
  }
});
Object.defineProperty(exports, "serializeOuter", {
  enumerable: true,
  get: function () {
    return index_js_3.serializeOuter;
  }
});
var error_codes_js_1 = require("./common/error-codes.js");
Object.defineProperty(exports, "ErrorCodes", {
  enumerable: true,
  get: function () {
    return error_codes_js_1.ERR;
  }
});
/** @internal */
exports.foreignContent = require("./common/foreign-content.js");
/** @internal */
exports.html = require("./common/html.js");
/** @internal */
exports.Token = require("./common/token.js");
/** @internal */
var index_js_4 = require("./tokenizer/index.js");
Object.defineProperty(exports, "Tokenizer", {
  enumerable: true,
  get: function () {
    return index_js_4.Tokenizer;
  }
});
Object.defineProperty(exports, "TokenizerMode", {
  enumerable: true,
  get: function () {
    return index_js_4.TokenizerMode;
  }
});
// Shorthands
/**
 * Parses an HTML string.
 *
 * @param html Input HTML string.
 * @param options Parsing options.
 * @returns Document
 *
 * @example
 *
 * ```js
 * const parse5 = require('parse5');
 *
 * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');
 *
 * console.log(document.childNodes[1].tagName); //> 'html'
 *```
 */
function parse(html, options) {
  return index_js_1.Parser.parse(html, options);
}
exports.parse = parse;
function parseFragment(fragmentContext, html, options) {
  if (typeof fragmentContext === 'string') {
    options = html;
    html = fragmentContext;
    fragmentContext = null;
  }
  const parser = index_js_1.Parser.getFragmentParser(fragmentContext, options);
  parser.tokenizer.write(html, true);
  return parser.getFragment();
}
exports.parseFragment = parseFragment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInBhcnNlRnJhZ21lbnQiLCJwYXJzZSIsIlRva2VuaXplck1vZGUiLCJUb2tlbml6ZXIiLCJUb2tlbiIsImh0bWwiLCJmb3JlaWduQ29udGVudCIsIkVycm9yQ29kZXMiLCJzZXJpYWxpemVPdXRlciIsInNlcmlhbGl6ZSIsIlBhcnNlciIsImRlZmF1bHRUcmVlQWRhcHRlciIsImluZGV4X2pzXzEiLCJyZXF1aXJlIiwiZGVmYXVsdF9qc18xIiwiZW51bWVyYWJsZSIsImdldCIsImluZGV4X2pzXzIiLCJpbmRleF9qc18zIiwiZXJyb3JfY29kZXNfanNfMSIsIkVSUiIsImluZGV4X2pzXzQiLCJvcHRpb25zIiwiZnJhZ21lbnRDb250ZXh0IiwicGFyc2VyIiwiZ2V0RnJhZ21lbnRQYXJzZXIiLCJ0b2tlbml6ZXIiLCJ3cml0ZSIsImdldEZyYWdtZW50Il0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlRnJhZ21lbnQgPSBleHBvcnRzLnBhcnNlID0gZXhwb3J0cy5Ub2tlbml6ZXJNb2RlID0gZXhwb3J0cy5Ub2tlbml6ZXIgPSBleHBvcnRzLlRva2VuID0gZXhwb3J0cy5odG1sID0gZXhwb3J0cy5mb3JlaWduQ29udGVudCA9IGV4cG9ydHMuRXJyb3JDb2RlcyA9IGV4cG9ydHMuc2VyaWFsaXplT3V0ZXIgPSBleHBvcnRzLnNlcmlhbGl6ZSA9IGV4cG9ydHMuUGFyc2VyID0gZXhwb3J0cy5kZWZhdWx0VHJlZUFkYXB0ZXIgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4vcGFyc2VyL2luZGV4LmpzXCIpO1xudmFyIGRlZmF1bHRfanNfMSA9IHJlcXVpcmUoXCIuL3RyZWUtYWRhcHRlcnMvZGVmYXVsdC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRUcmVlQWRhcHRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVmYXVsdF9qc18xLmRlZmF1bHRUcmVlQWRhcHRlcjsgfSB9KTtcbnZhciBpbmRleF9qc18yID0gcmVxdWlyZShcIi4vcGFyc2VyL2luZGV4LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGFyc2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc18yLlBhcnNlcjsgfSB9KTtcbnZhciBpbmRleF9qc18zID0gcmVxdWlyZShcIi4vc2VyaWFsaXplci9pbmRleC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNlcmlhbGl6ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5kZXhfanNfMy5zZXJpYWxpemU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXJpYWxpemVPdXRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5kZXhfanNfMy5zZXJpYWxpemVPdXRlcjsgfSB9KTtcbnZhciBlcnJvcl9jb2Rlc19qc18xID0gcmVxdWlyZShcIi4vY29tbW9uL2Vycm9yLWNvZGVzLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXJyb3JDb2Rlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JfY29kZXNfanNfMS5FUlI7IH0gfSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLmZvcmVpZ25Db250ZW50ID0gcmVxdWlyZShcIi4vY29tbW9uL2ZvcmVpZ24tY29udGVudC5qc1wiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuaHRtbCA9IHJlcXVpcmUoXCIuL2NvbW1vbi9odG1sLmpzXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5Ub2tlbiA9IHJlcXVpcmUoXCIuL2NvbW1vbi90b2tlbi5qc1wiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbnZhciBpbmRleF9qc180ID0gcmVxdWlyZShcIi4vdG9rZW5pemVyL2luZGV4LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG9rZW5pemVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc180LlRva2VuaXplcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRva2VuaXplck1vZGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluZGV4X2pzXzQuVG9rZW5pemVyTW9kZTsgfSB9KTtcbi8vIFNob3J0aGFuZHNcbi8qKlxuICogUGFyc2VzIGFuIEhUTUwgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSBodG1sIElucHV0IEhUTUwgc3RyaW5nLlxuICogQHBhcmFtIG9wdGlvbnMgUGFyc2luZyBvcHRpb25zLlxuICogQHJldHVybnMgRG9jdW1lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwYXJzZTUgPSByZXF1aXJlKCdwYXJzZTUnKTtcbiAqXG4gKiBjb25zdCBkb2N1bWVudCA9IHBhcnNlNS5wYXJzZSgnPCFET0NUWVBFIGh0bWw+PGh0bWw+PGhlYWQ+PC9oZWFkPjxib2R5PkhpIHRoZXJlITwvYm9keT48L2h0bWw+Jyk7XG4gKlxuICogY29uc29sZS5sb2coZG9jdW1lbnQuY2hpbGROb2Rlc1sxXS50YWdOYW1lKTsgLy8+ICdodG1sJ1xuICpgYGBcbiAqL1xuZnVuY3Rpb24gcGFyc2UoaHRtbCwgb3B0aW9ucykge1xuICAgIHJldHVybiBpbmRleF9qc18xLlBhcnNlci5wYXJzZShodG1sLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmZ1bmN0aW9uIHBhcnNlRnJhZ21lbnQoZnJhZ21lbnRDb250ZXh0LCBodG1sLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBmcmFnbWVudENvbnRleHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG9wdGlvbnMgPSBodG1sO1xuICAgICAgICBodG1sID0gZnJhZ21lbnRDb250ZXh0O1xuICAgICAgICBmcmFnbWVudENvbnRleHQgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZXIgPSBpbmRleF9qc18xLlBhcnNlci5nZXRGcmFnbWVudFBhcnNlcihmcmFnbWVudENvbnRleHQsIG9wdGlvbnMpO1xuICAgIHBhcnNlci50b2tlbml6ZXIud3JpdGUoaHRtbCwgdHJ1ZSk7XG4gICAgcmV0dXJuIHBhcnNlci5nZXRGcmFnbWVudCgpO1xufVxuZXhwb3J0cy5wYXJzZUZyYWdtZW50ID0gcGFyc2VGcmFnbWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdERCxPQUFPLENBQUNFLGFBQWEsR0FBR0YsT0FBTyxDQUFDRyxLQUFLLEdBQUdILE9BQU8sQ0FBQ0ksYUFBYSxHQUFHSixPQUFPLENBQUNLLFNBQVMsR0FBR0wsT0FBTyxDQUFDTSxLQUFLLEdBQUdOLE9BQU8sQ0FBQ08sSUFBSSxHQUFHUCxPQUFPLENBQUNRLGNBQWMsR0FBR1IsT0FBTyxDQUFDUyxVQUFVLEdBQUdULE9BQU8sQ0FBQ1UsY0FBYyxHQUFHVixPQUFPLENBQUNXLFNBQVMsR0FBR1gsT0FBTyxDQUFDWSxNQUFNLEdBQUdaLE9BQU8sQ0FBQ2Esa0JBQWtCLEdBQUcsS0FBSyxDQUFD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