{"version":3,"names":["_arrayPrototype","require","_has","_Utils","_getAdapter","_Debug","_RSTTraversal","_selectors","NODE","sym","NODES","RENDERER","UNRENDERED","ROOT","OPTIONS","ROOT_NODES","WRAPPING_COMPONENT","LINKED_ROOTS","UPDATED_BY","findWhereUnwrapped","wrapper","predicate","filter","arguments","length","undefined","treeFilter","flatMap","n","getNodeInternal","filterWhereUnwrapped","wrap","getNodesInternal","Boolean","getRootNodeInternal","Error","nodeParents","node","parentsOfNode","privateSetNodes","nodes","privateSet","Array","isArray","ReactWrapper","root","passedOptions","_classCallCheck","global","window","document","options","makeOptions","adapter","_getAdapter2","isValidElement","TypeError","renderer","createRenderer","_object2","mode","render","context","getNode","isCustomComponent","wrappingComponent","getWrappingComponentRenderer","WrappingComponentWrapper","push","_this","single","nodeToElement","_this2","map","nodeToHostNode","refname","instance","refs","_this3","_this4","update","forEach","linkedRoot","_this5","unmount","_this6","props","_this7","callback","cloneElement","state","_this8","nodeType","setState","invokeSetStateCallback","call","_this9","nodeOrNodes","other","containsChildrenSubArray","nodeEqual","elementToNode","rstNode","nodeMatches","a","b","_this10","every","containsMatchingElement","_this11","some","_this12","_this13","selector","reduceTreesBySelector","buildPredicate","renderedDive","_this14","getTextFromHostNodes","getHTMLFromHostNodes","html","loadCheerioRoot","event","_this15","mock","simulateEvent","error","_this16","thisNode","simulateError","rootNode","nodeHierarchy","concat","propsOfNode","name","_this17","_state","String","_this18","_context","allChildren","childrenOfNode","index","_this19","children","at","_this20","allParents","parents","get","is","matchingAncestors","first","findWhere","propName","_this21","handler","prop","_len","args","_key","response","wrapInvoke","apply","_this22","RangeError","_has2","propValue","_typeof","element","wrapped","key","typeOfNode","displayNameOfNode","className","indexOf","console","warn","hasClassName","fn","_this23","i","_this24","_this25","initialValue","reduce","accum","_this26","reduceRight","begin","end","slice","_this27","_this28","_this29","flattened","_arrayPrototype2","_this30","getElements","exists","find","fnName","_len2","_key2","Function","prototype","bind","debugNodes","intercepter","attachTo","filterWhere","type","_this31","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","ITERATOR_SYMBOL","defineProperty","configurable","value","iterator","_ref","iter","_defineProperty","next","done","privateWarning","extraMessage","enumerable"],"sources":["../src/ReactWrapper.js"],"sourcesContent":["import flat from 'array.prototype.flat';\nimport has from 'has';\n\nimport {\n  containsChildrenSubArray,\n  typeOfNode,\n  displayNameOfNode,\n  ITERATOR_SYMBOL,\n  nodeEqual,\n  nodeMatches,\n  makeOptions,\n  sym,\n  privateSet,\n  cloneElement,\n  renderedDive,\n  isCustomComponent,\n  loadCheerioRoot,\n} from './Utils';\nimport getAdapter from './getAdapter';\nimport { debugNodes } from './Debug';\nimport {\n  propsOfNode,\n  hasClassName,\n  childrenOfNode,\n  parentsOfNode,\n  treeFilter,\n  getTextFromHostNodes,\n  getHTMLFromHostNodes,\n} from './RSTTraversal';\n\nimport { buildPredicate, reduceTreesBySelector } from './selectors';\n\nconst NODE = sym('__node__');\nconst NODES = sym('__nodes__');\nconst RENDERER = sym('__renderer__');\nconst UNRENDERED = sym('__unrendered__');\nconst ROOT = sym('__root__');\nconst OPTIONS = sym('__options__');\nconst ROOT_NODES = sym('__rootNodes__');\nconst WRAPPING_COMPONENT = sym('__wrappingComponent__');\nconst LINKED_ROOTS = sym('__linkedRoots__');\nconst UPDATED_BY = sym('__updatedBy__');\n\n/**\n * Finds all nodes in the current wrapper nodes' render trees that match the provided predicate\n * function.\n *\n * @param {ReactWrapper} wrapper\n * @param {Function} predicate\n * @param {Function} filter\n * @returns {ReactWrapper}\n */\nfunction findWhereUnwrapped(wrapper, predicate, filter = treeFilter) {\n  return wrapper.flatMap((n) => filter(n.getNodeInternal(), predicate));\n}\n\n/**\n * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n * the provided predicate function.\n *\n * @param {ReactWrapper} wrapper\n * @param {Function} predicate\n * @returns {ReactWrapper}\n */\nfunction filterWhereUnwrapped(wrapper, predicate) {\n  return wrapper.wrap(wrapper.getNodesInternal().filter(predicate).filter(Boolean));\n}\n\nfunction getRootNodeInternal(wrapper) {\n  if (wrapper[ROOT].length !== 1) {\n    throw new Error('getRootNodeInternal(wrapper) can only be called when wrapper wraps one node');\n  }\n  if (wrapper[ROOT] !== wrapper) {\n    return wrapper[ROOT_NODES][0];\n  }\n  return wrapper[ROOT][NODE];\n}\n\nfunction nodeParents(wrapper, node) {\n  return parentsOfNode(node, getRootNodeInternal(wrapper));\n}\n\nfunction privateSetNodes(wrapper, nodes) {\n  if (!nodes) {\n    privateSet(wrapper, NODE, null);\n    privateSet(wrapper, NODES, []);\n  } else if (!Array.isArray(nodes)) {\n    privateSet(wrapper, NODE, nodes);\n    privateSet(wrapper, NODES, [nodes]);\n  } else {\n    privateSet(wrapper, NODE, nodes[0]);\n    privateSet(wrapper, NODES, nodes);\n  }\n  privateSet(wrapper, 'length', wrapper[NODES].length);\n}\n\n/**\n * @class ReactWrapper\n */\nclass ReactWrapper {\n  constructor(nodes, root, passedOptions = {}) {\n    if (!global.window && !global.document) {\n      throw new Error('It looks like you called `mount()` without a global document being loaded.');\n    }\n    const options = makeOptions(passedOptions);\n\n    if (!root) {\n      const adapter = getAdapter(options);\n      if (!adapter.isValidElement(nodes)) {\n        throw new TypeError('ReactWrapper can only wrap valid elements');\n      }\n\n      const renderer = adapter.createRenderer({ mode: 'mount', ...options });\n      privateSet(this, RENDERER, renderer);\n      renderer.render(nodes, options.context);\n      privateSet(this, ROOT, this);\n      privateSetNodes(this, this[RENDERER].getNode());\n      privateSet(this, OPTIONS, options);\n      privateSet(this, LINKED_ROOTS, []);\n\n      if (isCustomComponent(options.wrappingComponent, adapter)) {\n        if (typeof this[RENDERER].getWrappingComponentRenderer !== 'function') {\n          throw new TypeError('your adapter does not support `wrappingComponent`. Try upgrading it!');\n        }\n\n        // eslint-disable-next-line no-use-before-define\n        privateSet(this, WRAPPING_COMPONENT, new WrappingComponentWrapper(\n          this, this[RENDERER].getWrappingComponentRenderer(),\n        ));\n        this[LINKED_ROOTS].push(this[WRAPPING_COMPONENT]);\n      }\n    } else {\n      privateSet(this, RENDERER, root[RENDERER]);\n      privateSet(this, ROOT, root);\n      privateSetNodes(this, nodes);\n      privateSet(this, ROOT_NODES, root[NODES]);\n      privateSet(this, OPTIONS, root[OPTIONS]);\n      privateSet(this, LINKED_ROOTS, []);\n    }\n    privateSet(this, UNRENDERED, nodes);\n    privateSet(this, UPDATED_BY, null);\n  }\n\n  /**\n   * Returns the root wrapper\n   *\n   * @return {ReactWrapper}\n   */\n  root() {\n    return this[ROOT];\n  }\n\n  /**\n   * Returns the wrapped component.\n   *\n   * @return {ReactComponent}\n   */\n  getNodeInternal() {\n    if (this.length !== 1) {\n      throw new Error('ReactWrapper::getNode() can only be called when wrapping one node');\n    }\n    return this[NODES][0];\n  }\n\n  /**\n   * Returns the the wrapped components.\n   *\n   * @return {Array<ReactComponent>}\n   */\n  getNodesInternal() {\n    return this[NODES];\n  }\n\n  /**\n   * Returns the wrapped ReactElement.\n   *\n   * @return {ReactElement}\n   */\n  getElement() {\n    return this.single('getElement', () => getAdapter(this[OPTIONS]).nodeToElement(this[NODE]));\n  }\n\n  /**\n   * Returns the wrapped ReactElements.\n   *\n   * @return {Array<ReactElement>}\n   */\n  getElements() {\n    return this[NODES].map((n) => getAdapter(this[OPTIONS]).nodeToElement(n));\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getNode() {\n    throw new Error('ReactWrapper::getNode() is no longer supported. Use ReactWrapper::instance() instead');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getNodes() {\n    throw new Error('ReactWrapper::getNodes() is no longer supported.');\n  }\n\n  /**\n   * Returns the outer most DOMComponent of the current wrapper.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {DOMComponent}\n   */\n  getDOMNode() {\n    const adapter = getAdapter(this[OPTIONS]);\n    return this.single('getDOMNode', (n) => adapter.nodeToHostNode(n, true));\n  }\n\n  /**\n   * If the root component contained a ref, you can access it here and get the relevant\n   * react component instance or HTML element instance.\n   *\n   * NOTE: can only be called on a wrapper instance that is also the root instance.\n   *\n   * @param {String} refname\n   * @returns {ReactComponent | HTMLElement}\n   */\n  ref(refname) {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::ref(refname) can only be called on the root');\n    }\n    return this.instance().refs[refname];\n  }\n\n  /**\n   * Returns the wrapper's underlying instance.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * const inst = wrapper.instance();\n   * expect(inst).to.be.instanceOf(MyComponent);\n   * ```\n   * @returns {ReactComponent|DOMComponent}\n   */\n  instance() {\n    return this.single('instance', () => this[NODE].instance);\n  }\n\n  /**\n   * If a `wrappingComponent` was passed in `options`, this methods returns a `ReactWrapper` around\n   * the rendered `wrappingComponent`. This `ReactWrapper` can be used to update the\n   * `wrappingComponent`'s props, state, etc.\n   *\n   * @returns ReactWrapper\n   */\n  getWrappingComponent() {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::getWrappingComponent() can only be called on the root');\n    }\n    if (!this[OPTIONS].wrappingComponent) {\n      throw new Error('ReactWrapper::getWrappingComponent() can only be called on a wrapper that was originally passed a `wrappingComponent` option');\n    }\n    return this[WRAPPING_COMPONENT];\n  }\n\n  /**\n   * Forces a re-render. Useful to run before checking the render output if something external\n   * may be updating the state of the component somewhere.\n   *\n   * NOTE: no matter what instance this is called on, it will always update the root.\n   *\n   * @returns {ReactWrapper}\n   */\n  update() {\n    const root = this[ROOT];\n    if (this !== root) {\n      return root.update();\n    }\n    privateSetNodes(this, this[RENDERER].getNode());\n    this[LINKED_ROOTS].forEach((linkedRoot) => {\n      if (linkedRoot !== this[UPDATED_BY]) {\n        /* eslint-disable no-param-reassign */\n        // Only update a linked it root if it is not the originator of our update().\n        // This is needed to prevent infinite recursion when there is a bi-directional\n        // link between two roots.\n        linkedRoot[UPDATED_BY] = this;\n        try {\n          linkedRoot.update();\n        } finally {\n          linkedRoot[UPDATED_BY] = null;\n        }\n      }\n    });\n    return this;\n  }\n\n  /**\n   * A method that unmounts the component. This can be used to simulate a component going through\n   * and unmount/mount lifecycle.\n   *\n   * @returns {ReactWrapper}\n   */\n  unmount() {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::unmount() can only be called on the root');\n    }\n    this.single('unmount', () => {\n      this[RENDERER].unmount();\n      this.update();\n    });\n    return this;\n  }\n\n  /**\n   * A method that re-mounts the component, if it is not currently mounted.\n   * This can be used to simulate a component going through\n   * an unmount/mount lifecycle.\n   *\n   * @returns {ReactWrapper}\n   */\n  mount() {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::mount() can only be called on the root');\n    }\n    this[RENDERER].render(this[UNRENDERED], this[OPTIONS].context, () => this.update());\n    return this;\n  }\n\n  /**\n   * A method that sets the props of the root component, and re-renders. Useful for when you are\n   * wanting to test how the component behaves over time with changing props. Calling this, for\n   * instance, will call the `componentWillReceiveProps` lifecycle method.\n   *\n   * Similar to `setState`, this method accepts a props object and will merge it in with the already\n   * existing props.\n   *\n   * NOTE: can only be called on a wrapper instance that is also the root instance.\n   *\n   * @param {Object} props object\n   * @param {Function} cb - callback function\n   * @returns {ReactWrapper}\n   */\n  setProps(props, callback = undefined) {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::setProps() can only be called on the root');\n    }\n    if (arguments.length > 1 && typeof callback !== 'function') {\n      throw new TypeError('ReactWrapper::setProps() expects a function as its second argument');\n    }\n    const adapter = getAdapter(this[OPTIONS]);\n    this[UNRENDERED] = cloneElement(adapter, this[UNRENDERED], props);\n    this[RENDERER].render(this[UNRENDERED], null, () => {\n      this.update();\n      if (callback) {\n        callback();\n      }\n    });\n    return this;\n  }\n\n  /**\n   * A method to invoke `setState` on the root component instance similar to how you might in the\n   * definition of the component, and re-renders.  This method is useful for testing your component\n   * in hard to achieve states, however should be used sparingly. If possible, you should utilize\n   * your component's external API in order to get it into whatever state you want to test, in order\n   * to be as accurate of a test as possible. This is not always practical, however.\n   *\n   * NOTE: can only be called on a wrapper instance that is also the root instance.\n   *\n   * @param {Object} state to merge\n   * @param {Function} cb - callback function\n   * @returns {ReactWrapper}\n   */\n  setState(state, callback = undefined) {\n    if (this.instance() === null || this.getNodeInternal().nodeType !== 'class') {\n      throw new Error('ReactWrapper::setState() can only be called on class components');\n    }\n    if (arguments.length > 1 && typeof callback !== 'function') {\n      throw new TypeError('ReactWrapper::setState() expects a function as its second argument');\n    }\n    this.instance().setState(state, () => {\n      this.update();\n      if (callback) {\n        const adapter = getAdapter(this[OPTIONS]);\n        const instance = this.instance();\n        if (adapter.invokeSetStateCallback) {\n          adapter.invokeSetStateCallback(instance, callback);\n        } else {\n          callback.call(instance);\n        }\n      }\n    });\n    return this;\n  }\n\n  /**\n   * A method that sets the context of the root component, and re-renders. Useful for when you are\n   * wanting to test how the component behaves over time with changing contexts.\n   *\n   * NOTE: can only be called on a wrapper instance that is also the root instance.\n   *\n   * @param {Object} context object\n   * @returns {ReactWrapper}\n   */\n  setContext(context) {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::setContext() can only be called on the root');\n    }\n    if (!this[OPTIONS].context) {\n      throw new Error('ReactWrapper::setContext() can only be called on a wrapper that was originally passed a context option');\n    }\n    this[RENDERER].render(this[UNRENDERED], context, () => this.update());\n    return this;\n  }\n\n  /**\n   * Whether or not a given react element exists in the mount render tree.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.contains(<div className=\"foo bar\" />)).to.equal(true);\n   * ```\n   *\n   * @param {ReactElement|Array<ReactElement>} nodeOrNodes\n   * @returns {Boolean}\n   */\n  contains(nodeOrNodes) {\n    const adapter = getAdapter(this[OPTIONS]);\n\n    const predicate = Array.isArray(nodeOrNodes)\n      ? (other) => containsChildrenSubArray(\n        nodeEqual,\n        other,\n        nodeOrNodes.map((node) => adapter.elementToNode(node)),\n      )\n      : (other) => nodeEqual(adapter.elementToNode(nodeOrNodes), other);\n\n    return findWhereUnwrapped(this, predicate).length > 0;\n  }\n\n  /**\n   * Whether or not a given react element exists in the current render tree.\n   * It will determine if one of the wrappers element \"looks like\" the expected\n   * element by checking if all props of the expected element are present\n   * on the wrappers element and equals to each other.\n   *\n   * Example:\n   * ```\n   * // MyComponent outputs <div><div class=\"foo\">Hello</div></div>\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.containsMatchingElement(<div>Hello</div>)).to.equal(true);\n   * ```\n   *\n   * @param {ReactElement} node\n   * @returns {Boolean}\n   */\n  containsMatchingElement(node) {\n    const rstNode = getAdapter(this[OPTIONS]).elementToNode(node);\n    const predicate = (other) => nodeMatches(rstNode, other, (a, b) => a <= b);\n    return findWhereUnwrapped(this, predicate).length > 0;\n  }\n\n  /**\n   * Whether or not all the given react elements exist in the current render tree.\n   * It will determine if one of the wrappers element \"looks like\" the expected\n   * element by checking if all props of the expected element are present\n   * on the wrappers element and equals to each other.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.containsAllMatchingElements([\n   *   <div>Hello</div>,\n   *   <div>Goodbye</div>,\n   * ])).to.equal(true);\n   * ```\n   *\n   * @param {Array<ReactElement>} nodes\n   * @returns {Boolean}\n   */\n  containsAllMatchingElements(nodes) {\n    if (!Array.isArray(nodes)) {\n      throw new TypeError('nodes should be an Array');\n    }\n\n    return nodes.every((node) => this.containsMatchingElement(node));\n  }\n\n  /**\n   * Whether or not one of the given react elements exists in the current render tree.\n   * It will determine if one of the wrappers element \"looks like\" the expected\n   * element by checking if all props of the expected element are present\n   * on the wrappers element and equals to each other.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.containsAnyMatchingElements([\n   *   <div>Hello</div>,\n   *   <div>Goodbye</div>,\n   * ])).to.equal(true);\n   * ```\n   *\n   * @param {Array<ReactElement>} nodes\n   * @returns {Boolean}\n   */\n  containsAnyMatchingElements(nodes) {\n    return Array.isArray(nodes) && nodes.some((node) => this.containsMatchingElement(node));\n  }\n\n  /**\n   * Whether or not a given react element exists in the render tree.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.contains(<div className=\"foo bar\" />)).to.equal(true);\n   * ```\n   *\n   * @param {ReactElement} node\n   * @returns {Boolean}\n   */\n  equals(node) {\n    return this.single('equals', () => nodeEqual(this.getNodeInternal(), node));\n  }\n\n  /**\n   * Whether or not a given react element matches the render tree.\n   * Match is based on the expected element and not on wrapper root node.\n   * It will determine if the wrapper root node \"looks like\" the expected\n   * element by checking if all props of the expected element are present\n   * on the wrapper root node and equals to each other.\n   *\n   * Example:\n   * ```\n   * // MyComponent outputs <div class=\"foo\">Hello</div>\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.matchesElement(<div>Hello</div>)).to.equal(true);\n   * ```\n   *\n   * @param {ReactElement} node\n   * @returns {Boolean}\n   */\n  matchesElement(node) {\n    return this.single('matchesElement', () => {\n      const adapter = getAdapter(this[OPTIONS]);\n      const rstNode = adapter.elementToNode(node);\n      return nodeMatches(rstNode, this.getNodeInternal(), (a, b) => a <= b);\n    });\n  }\n\n  /**\n   * Finds every node in the render tree of the current wrapper that matches the provided selector.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {ReactWrapper}\n   */\n  find(selector) {\n    return this.wrap(reduceTreesBySelector(selector, this.getNodesInternal()));\n  }\n\n  /**\n   * Returns whether or not current node matches a provided selector.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {boolean}\n   */\n  is(selector) {\n    const predicate = buildPredicate(selector);\n    return this.single('is', (n) => predicate(n));\n  }\n\n  /**\n   * Returns true if the component rendered nothing, i.e., null or false.\n   *\n   * @returns {boolean}\n   */\n  isEmptyRender() {\n    const nodes = this.getNodeInternal();\n\n    return renderedDive(nodes);\n  }\n\n  /**\n   * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n   * the provided predicate function.\n   *\n   * @param {Function} predicate\n   * @returns {ReactWrapper}\n   */\n  filterWhere(predicate) {\n    return filterWhereUnwrapped(this, (n) => predicate(this.wrap(n)));\n  }\n\n  /**\n   * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n   * the provided selector.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {ReactWrapper}\n   */\n  filter(selector) {\n    const predicate = buildPredicate(selector);\n    return filterWhereUnwrapped(this, predicate);\n  }\n\n  /**\n   * Returns a new wrapper instance with only the nodes of the current wrapper that did not match\n   * the provided selector. Essentially the inverse of `filter`.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {ReactWrapper}\n   */\n  not(selector) {\n    const predicate = buildPredicate(selector);\n    return filterWhereUnwrapped(this, (n) => !predicate(n));\n  }\n\n  /**\n   * Returns a string of the rendered text of the current render tree.  This function should be\n   * looked at with skepticism if being used to test what the actual HTML output of the component\n   * will be. If that is what you would like to test, use enzyme's `render` function instead.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {String}\n   */\n  text() {\n    const adapter = getAdapter(this[OPTIONS]);\n    return this.single('text', (n) => getTextFromHostNodes(n, adapter));\n  }\n\n  /**\n   * Returns the HTML of the node.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {String}\n   */\n  html() {\n    const adapter = getAdapter(this[OPTIONS]);\n    return this.single('html', (n) => getHTMLFromHostNodes(n, adapter));\n  }\n\n  /**\n   * Returns the current node rendered to HTML and wrapped in a CheerioWrapper.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {CheerioWrapper}\n   */\n  render() {\n    const html = this.html();\n    return loadCheerioRoot(html);\n  }\n\n  /**\n   * Used to simulate events. Pass an eventname and (optionally) event arguments. This method of\n   * testing events should be met with some skepticism.\n   *\n   * @param {String} event\n   * @param {Object} mock (optional)\n   * @returns {ReactWrapper}\n   */\n  simulate(event, mock = {}) {\n    return this.single('simulate', (n) => {\n      this[RENDERER].simulateEvent(n, event, mock);\n      this[ROOT].update();\n      return this;\n    });\n  }\n\n  /**\n   * Used to simulate throwing a rendering error. Pass an error to throw.\n   *\n   * @param {String} error\n   * @returns {ReactWrapper}\n   */\n  simulateError(error) {\n    if (this[ROOT] === this) {\n      throw new Error('ReactWrapper::simulateError() may not be called on the root');\n    }\n\n    return this.single('simulateError', (thisNode) => {\n      if (thisNode.nodeType === 'host') {\n        throw new Error('ReactWrapper::simulateError() can only be called on custom components');\n      }\n\n      const renderer = this[RENDERER];\n      if (typeof renderer.simulateError !== 'function') {\n        throw new TypeError('your adapter does not support `simulateError`. Try upgrading it!');\n      }\n\n      const rootNode = getRootNodeInternal(this);\n      const nodeHierarchy = [thisNode].concat(nodeParents(this, thisNode));\n      renderer.simulateError(nodeHierarchy, rootNode, error);\n\n      this[ROOT].update();\n      return this;\n    });\n  }\n\n  /**\n   * Returns the props hash for the root node of the wrapper.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {Object}\n   */\n  props() {\n    return this.single('props', propsOfNode);\n  }\n\n  /**\n   * Returns the state hash for the root node of the wrapper. Optionally pass in a prop name and it\n   * will return just that value.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {String} name (optional)\n   * @returns {*}\n   */\n  state(name) {\n    const thisNode = this[ROOT] === this ? this[RENDERER].getNode() : this.getNodeInternal();\n    if (this.instance() === null || thisNode.nodeType !== 'class') {\n      throw new Error('ReactWrapper::state() can only be called on class components');\n    }\n    const _state = this.single('state', () => this.instance().state);\n    if (typeof name !== 'undefined') {\n      if (_state == null) {\n        throw new TypeError(`ReactWrapper::state(\"${name}\") requires that \\`state\\` not be \\`null\\` or \\`undefined\\``);\n      }\n      return _state[name];\n    }\n    return _state;\n  }\n\n  /**\n   * Returns the context hash for the root node of the wrapper.\n   * Optionally pass in a prop name and it will return just that value.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {String} name (optional)\n   * @returns {*}\n   */\n  context(name) {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::context() can only be called on the root');\n    }\n    const instance = this.single('context', () => this.instance());\n    if (instance === null) {\n      throw new Error('ReactWrapper::context() can only be called on components with instances');\n    }\n    const _context = instance.context;\n    if (typeof name !== 'undefined') {\n      return _context[name];\n    }\n    return _context;\n  }\n\n  /**\n   * Returns a new wrapper with all of the children of the current wrapper.\n   *\n   * @param {EnzymeSelector} [selector]\n   * @returns {ReactWrapper}\n   */\n  children(selector) {\n    const allChildren = this.flatMap((n) => childrenOfNode(n.getNodeInternal()));\n    return selector ? allChildren.filter(selector) : allChildren;\n  }\n\n  /**\n   * Returns a new wrapper with a specific child\n   *\n   * @param {Number} [index]\n   * @returns {ReactWrapper}\n   */\n  childAt(index) {\n    return this.single('childAt', () => this.children().at(index));\n  }\n\n  /**\n   * Returns a wrapper around all of the parents/ancestors of the wrapper. Does not include the node\n   * in the current wrapper.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {EnzymeSelector} [selector]\n   * @returns {ReactWrapper}\n   */\n  parents(selector) {\n    return this.single('parents', (n) => {\n      const allParents = this.wrap(nodeParents(this, n));\n      return selector ? allParents.filter(selector) : allParents;\n    });\n  }\n\n  /**\n   * Returns a wrapper around the immediate parent of the current node.\n   *\n   * @returns {ReactWrapper}\n   */\n  parent() {\n    return this.flatMap((n) => [n.parents().get(0)]);\n  }\n\n  /**\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {ReactWrapper}\n   */\n  closest(selector) {\n    if (this.is(selector)) {\n      return this;\n    }\n    const matchingAncestors = this.parents().filter(selector);\n    return matchingAncestors.length > 0 ? matchingAncestors.first() : this.findWhere(() => false);\n  }\n\n  /**\n   * Returns the value of  prop with the given name of the root node.\n   *\n   * @param {String} propName\n   * @returns {*}\n   */\n  prop(propName) {\n    return this.props()[propName];\n  }\n\n  /**\n   * Used to invoke a function prop.\n   * Will invoke an function prop and return its value.\n   *\n   * @param {String} propName\n   * @returns {Any}\n   */\n  invoke(propName) {\n    return this.single('invoke', () => {\n      const handler = this.prop(propName);\n      if (typeof handler !== 'function') {\n        throw new TypeError('ReactWrapper::invoke() requires the name of a prop whose value is a function');\n      }\n      return (...args) => {\n        const response = typeof this[RENDERER].wrapInvoke === 'function'\n          ? this[RENDERER].wrapInvoke(() => handler(...args))\n          : handler(...args);\n        this[ROOT].update();\n        return response;\n      };\n    });\n  }\n\n  /**\n   * Returns a wrapper of the node rendered by the provided render prop.\n   *\n   * @param {String} propName\n   * @returns {Function}\n   */\n  renderProp(propName) {\n    const adapter = getAdapter(this[OPTIONS]);\n    if (typeof adapter.wrap !== 'function') {\n      throw new RangeError('your adapter does not support `wrap`. Try upgrading it!');\n    }\n\n    return this.single('renderProp', (n) => {\n      if (n.nodeType === 'host') {\n        throw new TypeError('ReactWrapper::renderProp() can only be called on custom components');\n      }\n      if (typeof propName !== 'string') {\n        throw new TypeError('ReactWrapper::renderProp(): `propName` must be a string');\n      }\n      const props = this.props();\n      if (!has(props, propName)) {\n        throw new Error(`ReactWrapper::renderProp(): no prop called “${propName}“ found`);\n      }\n      const propValue = props[propName];\n      if (typeof propValue !== 'function') {\n        throw new TypeError(`ReactWrapper::renderProp(): expected prop “${propName}“ to contain a function, but it holds “${typeof propValue}“`);\n      }\n\n      return (...args) => {\n        const element = propValue(...args);\n        const wrapped = adapter.wrap(element);\n        return this.wrap(wrapped, null, this[OPTIONS]);\n      };\n    });\n  }\n\n  /**\n   * Returns the key assigned to the current node.\n   *\n   * @returns {String}\n   */\n  key() {\n    return this.single('key', (n) => (n.key === undefined ? null : n.key));\n  }\n\n  /**\n   * Returns the type of the root node of this wrapper. If it's a composite component, this will be\n   * the component constructor. If it's native DOM node, it will be a string.\n   *\n   * @returns {String|Function}\n   */\n  type() {\n    return this.single('type', (n) => typeOfNode(n));\n  }\n\n  /**\n   * Returns the name of the root node of this wrapper.\n   *\n   * In order of precedence => type.displayName -> type.name -> type.\n   *\n   * @returns {String}\n   */\n  name() {\n    const adapter = getAdapter(this[OPTIONS]);\n    return this.single('name', (n) => (\n      adapter.displayNameOfNode ? adapter.displayNameOfNode(n) : displayNameOfNode(n)\n    ));\n  }\n\n  /**\n   * Returns whether or not the current root node has the given class name or not.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {String} className\n   * @returns {Boolean}\n   */\n  hasClass(className) {\n    if (typeof className === 'string' && className.indexOf('.') !== -1) {\n      // eslint-disable-next-line no-console\n      console.warn('It looks like you\\'re calling `ReactWrapper::hasClass()` with a CSS selector. hasClass() expects a class name, not a CSS selector.');\n    }\n    return this.single('hasClass', (n) => hasClassName(n, className));\n  }\n\n  /**\n   * Iterates through each node of the current wrapper and executes the provided function with a\n   * wrapper around the corresponding node passed in as the first argument.\n   *\n   * @param {Function} fn\n   * @returns {ReactWrapper}\n   */\n  forEach(fn) {\n    this.getNodesInternal().forEach((n, i) => fn.call(this, this.wrap(n), i));\n    return this;\n  }\n\n  /**\n   * Maps the current array of nodes to another array. Each node is passed in as a `ReactWrapper`\n   * to the map function.\n   *\n   * @param {Function} fn\n   * @returns {Array}\n   */\n  map(fn) {\n    return this.getNodesInternal().map((n, i) => fn.call(this, this.wrap(n), i));\n  }\n\n  /**\n   * Reduces the current array of nodes to another array.\n   * Each node is passed in as a `ShallowWrapper` to the reducer function.\n   *\n   * @param {Function} fn - the reducer function\n   * @param {*} initialValue - the initial value\n   * @returns {*}\n   */\n  reduce(fn, initialValue = undefined) {\n    if (arguments.length > 1) {\n      return this.getNodesInternal().reduce(\n        (accum, n, i) => fn.call(this, accum, this.wrap(n), i),\n        initialValue,\n      );\n    }\n    return this.getNodesInternal().reduce((accum, n, i) => fn.call(\n      this,\n      i === 1 ? this.wrap(accum) : accum,\n      this.wrap(n),\n      i,\n    ));\n  }\n\n  /**\n   * Reduces the current array of nodes to another array, from right to left. Each node is passed\n   * in as a `ShallowWrapper` to the reducer function.\n   *\n   * @param {Function} fn - the reducer function\n   * @param {*} initialValue - the initial value\n   * @returns {*}\n   */\n  reduceRight(fn, initialValue = undefined) {\n    if (arguments.length > 1) {\n      return this.getNodesInternal().reduceRight(\n        (accum, n, i) => fn.call(this, accum, this.wrap(n), i),\n        initialValue,\n      );\n    }\n    return this.getNodesInternal().reduceRight((accum, n, i) => fn.call(\n      this,\n      i === 1 ? this.wrap(accum) : accum,\n      this.wrap(n),\n      i,\n    ));\n  }\n\n  /**\n   * Returns a new wrapper with a subset of the nodes of the original wrapper, according to the\n   * rules of `Array#slice`.\n   *\n   * @param {Number} begin\n   * @param {Number} end\n   * @returns {ShallowWrapper}\n   */\n  slice(begin, end) {\n    return this.wrap(this.getNodesInternal().slice(begin, end));\n  }\n\n  /**\n   * Returns whether or not any of the nodes in the wrapper match the provided selector.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {Boolean}\n   */\n  some(selector) {\n    if (this[ROOT] === this) {\n      throw new Error('ReactWrapper::some() can not be called on the root');\n    }\n    const predicate = buildPredicate(selector);\n    return this.getNodesInternal().some(predicate);\n  }\n\n  /**\n   * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n   *\n   * @param {Function} predicate\n   * @returns {Boolean}\n   */\n  someWhere(predicate) {\n    return this.getNodesInternal().some((n, i) => predicate.call(this, this.wrap(n), i));\n  }\n\n  /**\n   * Returns whether or not all of the nodes in the wrapper match the provided selector.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {Boolean}\n   */\n  every(selector) {\n    const predicate = buildPredicate(selector);\n    return this.getNodesInternal().every(predicate);\n  }\n\n  /**\n   * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n   *\n   * @param {Function} predicate\n   * @returns {Boolean}\n   */\n  everyWhere(predicate) {\n    return this.getNodesInternal().every((n, i) => predicate.call(this, this.wrap(n), i));\n  }\n\n  /**\n   * Utility method used to create new wrappers with a mapping function that returns an array of\n   * nodes in response to a single node wrapper. The returned wrapper is a single wrapper around\n   * all of the mapped nodes flattened (and de-duplicated).\n   *\n   * @param {Function} fn\n   * @returns {ReactWrapper}\n   */\n  flatMap(fn) {\n    const nodes = this.getNodesInternal().map((n, i) => fn.call(this, this.wrap(n), i));\n    const flattened = flat(nodes, 1);\n    return this.wrap(flattened.filter(Boolean));\n  }\n\n  /**\n   * Finds all nodes in the current wrapper nodes' render trees that match the provided predicate\n   * function.\n   *\n   * @param {Function} predicate\n   * @returns {ReactWrapper}\n   */\n  findWhere(predicate) {\n    return findWhereUnwrapped(this, (n) => {\n      const node = this.wrap(n);\n      return node.length > 0 && predicate(node);\n    });\n  }\n\n  /**\n   * Returns the node at a given index of the current wrapper.\n   *\n   * @param {Number} index\n   * @returns {ReactElement}\n   */\n  get(index) {\n    return this.getElements()[index];\n  }\n\n  /**\n   * Returns a wrapper around the node at a given index of the current wrapper.\n   *\n   * @param {Number} index\n   * @returns {ReactWrapper}\n   */\n  at(index) {\n    const nodes = this.getNodesInternal();\n    if (index < nodes.length) {\n      return this.wrap(nodes[index]);\n    }\n    return this.wrap([]);\n  }\n\n  /**\n   * Returns a wrapper around the first node of the current wrapper.\n   *\n   * @returns {ReactWrapper}\n   */\n  first() {\n    return this.at(0);\n  }\n\n  /**\n   * Returns a wrapper around the last node of the current wrapper.\n   *\n   * @returns {ReactWrapper}\n   */\n  last() {\n    return this.at(this.length - 1);\n  }\n\n  /**\n   * Delegates to exists()\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    // eslint-disable-next-line no-console\n    console.warn('Enzyme::Deprecated method isEmpty() called, use exists() instead.');\n    return !this.exists();\n  }\n\n  /**\n   * Returns true if the current wrapper has nodes. False otherwise.\n   * If called with a selector it returns `.find(selector).exists()` instead.\n   *\n   * @param {EnzymeSelector} selector (optional)\n   * @returns {boolean}\n   */\n  exists(selector = null) {\n    return arguments.length > 0 ? this.find(selector).exists() : this.length > 0;\n  }\n\n  /**\n   * Utility method that throws an error if the current instance has a length other than one.\n   * This is primarily used to enforce that certain methods are only run on a wrapper when it is\n   * wrapping a single node.\n   *\n   * @param {Function} fn\n   * @returns {*}\n   */\n  single(name, fn) {\n    const fnName = typeof name === 'string' ? name : 'unknown';\n    const callback = typeof fn === 'function' ? fn : name;\n    if (this.length !== 1) {\n      throw new Error(`Method “${fnName}” is meant to be run on 1 node. ${this.length} found instead.`);\n    }\n    return callback.call(this, this.getNodeInternal());\n  }\n\n  /**\n   * Helpful utility method to create a new wrapper with the same root as the current wrapper, with\n   * any nodes passed in as the first parameter automatically wrapped.\n   *\n   * @param {ReactWrapper|ReactElement|Array<ReactElement>} node\n   * @returns {ReactWrapper}\n   */\n  wrap(node, root = this[ROOT], ...args) {\n    if (node instanceof ReactWrapper) {\n      return node;\n    }\n    return new ReactWrapper(node, root, ...args);\n  }\n\n  /**\n   * Returns an HTML-like string of the shallow render for debugging purposes.\n   *\n   * @param {Object} [options] - Property bag of additional options.\n   * @param {boolean} [options.ignoreProps] - if true, props are omitted from the string.\n   * @param {boolean} [options.verbose] - if true, arrays and objects to be verbosely printed.\n   * @returns {String}\n   */\n  debug(options = {}) {\n    return debugNodes(this.getNodesInternal(), options);\n  }\n\n  /**\n   * Invokes intercepter and returns itself. intercepter is called with itself.\n   * This is helpful when debugging nodes in method chains.\n   * @param fn\n   * @returns {ReactWrapper}\n   */\n  tap(intercepter) {\n    intercepter(this);\n    return this;\n  }\n\n  /**\n   * Detaches the react tree from the DOM. Runs `ReactDOM.unmountComponentAtNode()` under the hood.\n   *\n   * This method will most commonly be used as a \"cleanup\" method if you decide to use the\n   * `attachTo` option in `mount(node, options)`.\n   *\n   * The method is intentionally not \"fluent\" (in that it doesn't return `this`) because you should\n   * not be doing anything with this wrapper after this method is called.\n   */\n  detach() {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::detach() can only be called on the root');\n    }\n    if (!this[OPTIONS].attachTo) {\n      throw new Error('ReactWrapper::detach() can only be called on when the `attachTo` option was passed into `mount()`.');\n    }\n    this[RENDERER].unmount();\n  }\n\n  /**\n   * Strips out all the not host-nodes from the list of nodes\n   *\n   * This method is useful if you want to check for the presence of host nodes\n   * (actually rendered HTML elements) ignoring the React nodes.\n   */\n  hostNodes() {\n    return this.filterWhere((n) => typeof n.type() === 'string');\n  }\n}\n\n/**\n * A *special* \"root\" wrapper that represents the component passed as `wrappingComponent`.\n * It is linked to the primary root such that updates to it will update the primary,\n * and vice versa.\n *\n * @class WrappingComponentWrapper\n */\nclass WrappingComponentWrapper extends ReactWrapper {\n  /* eslint-disable class-methods-use-this */\n  constructor(root, renderer) {\n    super(renderer.getNode(), root);\n\n    privateSet(this, ROOT, this);\n    privateSet(this, RENDERER, renderer);\n    this[LINKED_ROOTS].push(root);\n  }\n\n  getWrappingComponent() {\n    throw new TypeError('ReactWrapper::getWrappingComponent() can only be called on the root');\n  }\n}\n\nif (ITERATOR_SYMBOL) {\n  Object.defineProperty(ReactWrapper.prototype, ITERATOR_SYMBOL, {\n    configurable: true,\n    value: function iterator() {\n      const iter = this[NODES][ITERATOR_SYMBOL]();\n      const adapter = getAdapter(this[OPTIONS]);\n      return {\n        [ITERATOR_SYMBOL]() { return this; },\n        next() {\n          const next = iter.next();\n          if (next.done) {\n            return { done: true };\n          }\n          return {\n            done: false,\n            value: adapter.nodeToElement(next.value),\n          };\n        },\n      };\n    },\n  });\n}\n\nfunction privateWarning(prop, extraMessage) {\n  Object.defineProperty(ReactWrapper.prototype, prop, {\n    get() {\n      throw new Error(`\n        Attempted to access ReactWrapper::${prop}, which was previously a private property on\n        Enzyme ReactWrapper instances, but is no longer and should not be relied upon.\n        ${extraMessage}\n      `);\n    },\n    enumerable: false,\n    configurable: false,\n  });\n}\n\nprivateWarning('node', 'Consider using the getElement() method instead.');\nprivateWarning('nodes', 'Consider using the getElements() method instead.');\nprivateWarning('renderer', '');\nprivateWarning('options', '');\nprivateWarning('complexSelector', '');\n\nexport default ReactWrapper;\n"],"mappings":"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"}