e551bab88df33f01603c910254fe72b9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DragDropManagerImpl = void 0;
var _index = require("../actions/dragDrop/index.js");
class DragDropManagerImpl {
  receiveBackend(backend) {
    this.backend = backend;
  }
  getMonitor() {
    return this.monitor;
  }
  getBackend() {
    return this.backend;
  }
  getRegistry() {
    return this.monitor.registry;
  }
  getActions() {
    /* eslint-disable-next-line @typescript-eslint/no-this-alias */const manager = this;
    const {
      dispatch
    } = this.store;
    function bindActionCreator(actionCreator) {
      return (...args) => {
        const action = actionCreator.apply(manager, args);
        if (typeof action !== 'undefined') {
          dispatch(action);
        }
      };
    }
    const actions = (0, _index.createDragDropActions)(this);
    return Object.keys(actions).reduce((boundActions, key) => {
      const action = actions[key];
      boundActions[key] = bindActionCreator(action);
      return boundActions;
    }, {});
  }
  dispatch(action) {
    this.store.dispatch(action);
  }
  constructor(store, monitor) {
    this.isSetUp = false;
    this.handleRefCountChange = () => {
      const shouldSetUp = this.store.getState().refCount > 0;
      if (this.backend) {
        if (shouldSetUp && !this.isSetUp) {
          this.backend.setup();
          this.isSetUp = true;
        } else if (!shouldSetUp && this.isSetUp) {
          this.backend.teardown();
          this.isSetUp = false;
        }
      }
    };
    this.store = store;
    this.monitor = monitor;
    store.subscribe(this.handleRefCountChange);
  }
}
exports.DragDropManagerImpl = DragDropManagerImpl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW5kZXgiLCJyZXF1aXJlIiwiRHJhZ0Ryb3BNYW5hZ2VySW1wbCIsInJlY2VpdmVCYWNrZW5kIiwiYmFja2VuZCIsImdldE1vbml0b3IiLCJtb25pdG9yIiwiZ2V0QmFja2VuZCIsImdldFJlZ2lzdHJ5IiwicmVnaXN0cnkiLCJnZXRBY3Rpb25zIiwibWFuYWdlciIsImRpc3BhdGNoIiwic3RvcmUiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJhcmdzIiwiYWN0aW9uIiwiYXBwbHkiLCJhY3Rpb25zIiwiY3JlYXRlRHJhZ0Ryb3BBY3Rpb25zIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsImJvdW5kQWN0aW9ucyIsImtleSIsImNvbnN0cnVjdG9yIiwiaXNTZXRVcCIsImhhbmRsZVJlZkNvdW50Q2hhbmdlIiwic2hvdWxkU2V0VXAiLCJnZXRTdGF0ZSIsInJlZkNvdW50Iiwic2V0dXAiLCJ0ZWFyZG93biIsInN1YnNjcmliZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xhc3Nlcy9EcmFnRHJvcE1hbmFnZXJJbXBsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQWN0aW9uLCBTdG9yZSB9IGZyb20gJ3JlZHV4J1xuXG5pbXBvcnQgeyBjcmVhdGVEcmFnRHJvcEFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2RyYWdEcm9wL2luZGV4LmpzJ1xuaW1wb3J0IHR5cGUge1xuXHRBY3Rpb25DcmVhdG9yLFxuXHRCYWNrZW5kLFxuXHREcmFnRHJvcEFjdGlvbnMsXG5cdERyYWdEcm9wTWFuYWdlcixcblx0RHJhZ0Ryb3BNb25pdG9yLFxuXHRIYW5kbGVyUmVnaXN0cnksXG59IGZyb20gJy4uL2ludGVyZmFjZXMuanMnXG5pbXBvcnQgdHlwZSB7IFN0YXRlIH0gZnJvbSAnLi4vcmVkdWNlcnMvaW5kZXguanMnXG5pbXBvcnQgdHlwZSB7IERyYWdEcm9wTW9uaXRvckltcGwgfSBmcm9tICcuL0RyYWdEcm9wTW9uaXRvckltcGwuanMnXG5cbmV4cG9ydCBjbGFzcyBEcmFnRHJvcE1hbmFnZXJJbXBsIGltcGxlbWVudHMgRHJhZ0Ryb3BNYW5hZ2VyIHtcblx0cHJpdmF0ZSBzdG9yZTogU3RvcmU8U3RhdGU+XG5cdHByaXZhdGUgbW9uaXRvcjogRHJhZ0Ryb3BNb25pdG9yXG5cdHByaXZhdGUgYmFja2VuZDogQmFja2VuZCB8IHVuZGVmaW5lZFxuXHRwcml2YXRlIGlzU2V0VXAgPSBmYWxzZVxuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihzdG9yZTogU3RvcmU8U3RhdGU+LCBtb25pdG9yOiBEcmFnRHJvcE1vbml0b3IpIHtcblx0XHR0aGlzLnN0b3JlID0gc3RvcmVcblx0XHR0aGlzLm1vbml0b3IgPSBtb25pdG9yXG5cdFx0c3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlUmVmQ291bnRDaGFuZ2UpXG5cdH1cblxuXHRwdWJsaWMgcmVjZWl2ZUJhY2tlbmQoYmFja2VuZDogQmFja2VuZCk6IHZvaWQge1xuXHRcdHRoaXMuYmFja2VuZCA9IGJhY2tlbmRcblx0fVxuXG5cdHB1YmxpYyBnZXRNb25pdG9yKCk6IERyYWdEcm9wTW9uaXRvciB7XG5cdFx0cmV0dXJuIHRoaXMubW9uaXRvclxuXHR9XG5cblx0cHVibGljIGdldEJhY2tlbmQoKTogQmFja2VuZCB7XG5cdFx0cmV0dXJuIHRoaXMuYmFja2VuZCBhcyBCYWNrZW5kXG5cdH1cblxuXHRwdWJsaWMgZ2V0UmVnaXN0cnkoKTogSGFuZGxlclJlZ2lzdHJ5IHtcblx0XHRyZXR1cm4gKHRoaXMubW9uaXRvciBhcyBEcmFnRHJvcE1vbml0b3JJbXBsKS5yZWdpc3RyeVxuXHR9XG5cblx0cHVibGljIGdldEFjdGlvbnMoKTogRHJhZ0Ryb3BBY3Rpb25zIHtcblx0XHQvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXMgKi9cblx0XHRjb25zdCBtYW5hZ2VyID0gdGhpc1xuXHRcdGNvbnN0IHsgZGlzcGF0Y2ggfSA9IHRoaXMuc3RvcmVcblxuXHRcdGZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3I6IEFjdGlvbkNyZWF0b3I8YW55Pikge1xuXHRcdFx0cmV0dXJuICguLi5hcmdzOiBhbnlbXSkgPT4ge1xuXHRcdFx0XHRjb25zdCBhY3Rpb24gPSBhY3Rpb25DcmVhdG9yLmFwcGx5KG1hbmFnZXIsIGFyZ3MgYXMgYW55KVxuXHRcdFx0XHRpZiAodHlwZW9mIGFjdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRkaXNwYXRjaChhY3Rpb24pXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBhY3Rpb25zID0gY3JlYXRlRHJhZ0Ryb3BBY3Rpb25zKHRoaXMpXG5cblx0XHRyZXR1cm4gT2JqZWN0LmtleXMoYWN0aW9ucykucmVkdWNlKFxuXHRcdFx0KGJvdW5kQWN0aW9uczogRHJhZ0Ryb3BBY3Rpb25zLCBrZXk6IHN0cmluZykgPT4ge1xuXHRcdFx0XHRjb25zdCBhY3Rpb246IEFjdGlvbkNyZWF0b3I8YW55PiA9IChhY3Rpb25zIGFzIGFueSlbXG5cdFx0XHRcdFx0a2V5XG5cdFx0XHRcdF0gYXMgQWN0aW9uQ3JlYXRvcjxhbnk+XG5cdFx0XHRcdDsoYm91bmRBY3Rpb25zIGFzIGFueSlba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbilcblx0XHRcdFx0cmV0dXJuIGJvdW5kQWN0aW9uc1xuXHRcdFx0fSxcblx0XHRcdHt9IGFzIERyYWdEcm9wQWN0aW9ucyxcblx0XHQpXG5cdH1cblxuXHRwdWJsaWMgZGlzcGF0Y2goYWN0aW9uOiBBY3Rpb248YW55Pik6IHZvaWQge1xuXHRcdHRoaXMuc3RvcmUuZGlzcGF0Y2goYWN0aW9uKVxuXHR9XG5cblx0cHJpdmF0ZSBoYW5kbGVSZWZDb3VudENoYW5nZSA9ICgpOiB2b2lkID0+IHtcblx0XHRjb25zdCBzaG91bGRTZXRVcCA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5yZWZDb3VudCA+IDBcblx0XHRpZiAodGhpcy5iYWNrZW5kKSB7XG5cdFx0XHRpZiAoc2hvdWxkU2V0VXAgJiYgIXRoaXMuaXNTZXRVcCkge1xuXHRcdFx0XHR0aGlzLmJhY2tlbmQuc2V0dXAoKVxuXHRcdFx0XHR0aGlzLmlzU2V0VXAgPSB0cnVlXG5cdFx0XHR9IGVsc2UgaWYgKCFzaG91bGRTZXRVcCAmJiB0aGlzLmlzU2V0VXApIHtcblx0XHRcdFx0dGhpcy5iYWNrZW5kLnRlYXJkb3duKClcblx0XHRcdFx0dGhpcy5pc1NldFVwID0gZmFsc2Vcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBWU8sTUFBTUMsbUJBQW1CO0VBWS9CQyxjQUFxQkEsQ0FBQ0MsT0FBZ0IsRUFBUTtJQUM3QyxJQUFJLENBQUNBLE9BQU8sR0FBR0EsT0FBTzs7RUFHdkJDLFVBQWlCQSxDQUFBLEVBQW9CO0lBQ3BDLE9BQU8sSUFBSSxDQUFDQyxPQUFPOztFQUdwQkMsVUFBaUJBLENBQUEsRUFBWTtJQUM1QixPQUFPLElBQUksQ0FBQ0gsT0FBTzs7RUFHcEJJLFdBQWtCQSxDQUFBLEVBQW9CO0lBQ3JDLE9BQU8sSUFBSyxDQUFDRixPQUFPLENBQXlCRyxRQUFROztFQUd0REMsVUFBaUJBLENBQUEsRUFBb0I7SUFDcEMsK0RBQ0EsTUFBTUMsT0FBTyxHQUFHLElBQUk7SUFDcEIsTUFBTTtNQUFFQztJQUFRLENBQUUsR0FBRyxJQUFJLENBQUNDLEtBQUs7SUFFL0IsU0FBU0MsaUJBQWlCQSxDQUFDQyxhQUFpQyxFQUFFO01BQzdELE9BQU8sQ0FBQyxHQUFHQyxJQUFJLEtBQVk7UUFDMUIsTUFBTUMsTUFBTSxHQUFHRixhQUFhLENBQUNHLEtBQUssQ0FBQ1AsT0FBTyxFQUFFSyxJQUFJLENBQVE7UUFDeEQsSUFBSSxPQUFPQyxNQUFNLEtBQUssV0FBVyxFQUFFO1VBQ2xDTCxRQUFRLENBQUNLLE1BQU0sQ0FBQzs7T0FFakI7O0lBR0YsTUFBTUUsT0FBTyxHQUFHLElBQUFDLDRCQUFxQixFQUFDLElBQUksQ0FBQztJQUUzQyxPQUFPQyxNQUFNLENBQUNDLElBQUksQ0FBQ0gsT0FBTyxDQUFDLENBQUNJLE1BQU0sQ0FDakMsQ0FBQ0MsWUFBNkIsRUFBRUMsR0FBVyxLQUFLO01BQy9DLE1BQU1SLE1BQU0sR0FBdUJFLE9BQVEsQ0FDMUNNLEdBQUcsQ0FDSDtNQUNBRCxZQUFhLENBQVNDLEdBQUcsQ0FBQyxHQUFHWCxpQkFBaUIsQ0FBQ0csTUFBTSxDQUFDO01BQ3ZELE9BQU9PLFlBQVk7S0FDbkIsRUFDRCxFQUFFLENBQ0Y7O0VBR0ZaLFFBQWVBLENBQUNLLE1BQW1CLEVBQVE7SUFDMUMsSUFBSSxDQUFDSixLQUFLLENBQUNELFFBQVEsQ0FBQ0ssTUFBTSxDQUFDOztFQW5ENUJTLFlBQW1CYixLQUFtQixFQUFFUCxPQUF3QixFQUFFO0lBRmxFLEtBQVFxQixPQUFPLEdBQUcsS0FBSztJQXdEdkIsS0FBUUMsb0JBQW9CLEdBQUcsTUFBWTtNQUMxQyxNQUFNQyxXQUFXLEdBQUcsSUFBSSxDQUFDaEIsS0FBSyxDQUFDaUIsUUFBUSxFQUFFLENBQUNDLFFBQVEsR0FBRyxDQUFDO01BQ3RELElBQUksSUFBSSxDQUFDM0IsT0FBTyxFQUFFO1FBQ2pCLElBQUl5QixXQUFXLElBQUksQ0FBQyxJQUFJLENBQUNGLE9BQU8sRUFBRTtVQUNqQyxJQUFJLENBQUN2QixPQUFPLENBQUM0QixLQUFLLEVBQUU7VUFDcEIsSUFBSSxDQUFDTCxPQUFPLEdBQUcsSUFBSTtTQUNuQixNQUFNLElBQUksQ0FBQ0UsV0FBVyxJQUFJLElBQUksQ0FBQ0YsT0FBTyxFQUFFO1VBQ3hDLElBQUksQ0FBQ3ZCLE9BQU8sQ0FBQzZCLFFBQVEsRUFBRTtVQUN2QixJQUFJLENBQUNOLE9BQU8sR0FBRyxLQUFLOzs7S0FHdEI7SUFoRUEsSUFBSSxDQUFDZCxLQUFLLEdBQUdBLEtBQUs7SUFDbEIsSUFBSSxDQUFDUCxPQUFPLEdBQUdBLE9BQU87SUFDdEJPLEtBQUssQ0FBQ3FCLFNBQVMsQ0FBQyxJQUFJLENBQUNOLG9CQUFvQixDQUFDOzs7QUErRDNDTyxPQUFBLENBQUFqQyxtQkFBQSxHQUFBQSxtQkFBQSJ9