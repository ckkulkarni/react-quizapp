30ba620d44d88fce15e8a727d743b277
"use strict";

var __spreadArray = void 0 && (void 0).__spreadArray || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringify = void 0;
var types_1 = require("./types");
var attribValChars = ["\\", '"'];
var pseudoValChars = __spreadArray(__spreadArray([], attribValChars, true), ["(", ")"], false);
var charsToEscapeInAttributeValue = new Set(attribValChars.map(function (c) {
  return c.charCodeAt(0);
}));
var charsToEscapeInPseudoValue = new Set(pseudoValChars.map(function (c) {
  return c.charCodeAt(0);
}));
var charsToEscapeInName = new Set(__spreadArray(__spreadArray([], pseudoValChars, true), ["~", "^", "$", "*", "+", "!", "|", ":", "[", "]", " ", "."], false).map(function (c) {
  return c.charCodeAt(0);
}));
/**
 * Turns `selector` back into a string.
 *
 * @param selector Selector to stringify.
 */
function stringify(selector) {
  return selector.map(function (token) {
    return token.map(stringifyToken).join("");
  }).join(", ");
}
exports.stringify = stringify;
function stringifyToken(token, index, arr) {
  switch (token.type) {
    // Simple types
    case types_1.SelectorType.Child:
      return index === 0 ? "> " : " > ";
    case types_1.SelectorType.Parent:
      return index === 0 ? "< " : " < ";
    case types_1.SelectorType.Sibling:
      return index === 0 ? "~ " : " ~ ";
    case types_1.SelectorType.Adjacent:
      return index === 0 ? "+ " : " + ";
    case types_1.SelectorType.Descendant:
      return " ";
    case types_1.SelectorType.ColumnCombinator:
      return index === 0 ? "|| " : " || ";
    case types_1.SelectorType.Universal:
      // Return an empty string if the selector isn't needed.
      return token.namespace === "*" && index + 1 < arr.length && "name" in arr[index + 1] ? "" : "".concat(getNamespace(token.namespace), "*");
    case types_1.SelectorType.Tag:
      return getNamespacedName(token);
    case types_1.SelectorType.PseudoElement:
      return "::".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? "" : "(".concat(escapeName(token.data, charsToEscapeInPseudoValue), ")"));
    case types_1.SelectorType.Pseudo:
      return ":".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? "" : "(".concat(typeof token.data === "string" ? escapeName(token.data, charsToEscapeInPseudoValue) : stringify(token.data), ")"));
    case types_1.SelectorType.Attribute:
      {
        if (token.name === "id" && token.action === types_1.AttributeAction.Equals && token.ignoreCase === "quirks" && !token.namespace) {
          return "#".concat(escapeName(token.value, charsToEscapeInName));
        }
        if (token.name === "class" && token.action === types_1.AttributeAction.Element && token.ignoreCase === "quirks" && !token.namespace) {
          return ".".concat(escapeName(token.value, charsToEscapeInName));
        }
        var name_1 = getNamespacedName(token);
        if (token.action === types_1.AttributeAction.Exists) {
          return "[".concat(name_1, "]");
        }
        return "[".concat(name_1).concat(getActionValue(token.action), "=\"").concat(escapeName(token.value, charsToEscapeInAttributeValue), "\"").concat(token.ignoreCase === null ? "" : token.ignoreCase ? " i" : " s", "]");
      }
  }
}
function getActionValue(action) {
  switch (action) {
    case types_1.AttributeAction.Equals:
      return "";
    case types_1.AttributeAction.Element:
      return "~";
    case types_1.AttributeAction.Start:
      return "^";
    case types_1.AttributeAction.End:
      return "$";
    case types_1.AttributeAction.Any:
      return "*";
    case types_1.AttributeAction.Not:
      return "!";
    case types_1.AttributeAction.Hyphen:
      return "|";
    case types_1.AttributeAction.Exists:
      throw new Error("Shouldn't be here");
  }
}
function getNamespacedName(token) {
  return "".concat(getNamespace(token.namespace)).concat(escapeName(token.name, charsToEscapeInName));
}
function getNamespace(namespace) {
  return namespace !== null ? "".concat(namespace === "*" ? "*" : escapeName(namespace, charsToEscapeInName), "|") : "";
}
function escapeName(str, charsToEscape) {
  var lastIdx = 0;
  var ret = "";
  for (var i = 0; i < str.length; i++) {
    if (charsToEscape.has(str.charCodeAt(i))) {
      ret += "".concat(str.slice(lastIdx, i), "\\").concat(str.charAt(i));
      lastIdx = i + 1;
    }
  }
  return ret.length > 0 ? ret + str.slice(lastIdx) : str;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwicGFjayIsImFyZ3VtZW50cyIsImxlbmd0aCIsImkiLCJsIiwiYXIiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImNvbmNhdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic3RyaW5naWZ5IiwidHlwZXNfMSIsInJlcXVpcmUiLCJhdHRyaWJWYWxDaGFycyIsInBzZXVkb1ZhbENoYXJzIiwiY2hhcnNUb0VzY2FwZUluQXR0cmlidXRlVmFsdWUiLCJTZXQiLCJtYXAiLCJjIiwiY2hhckNvZGVBdCIsImNoYXJzVG9Fc2NhcGVJblBzZXVkb1ZhbHVlIiwiY2hhcnNUb0VzY2FwZUluTmFtZSIsInNlbGVjdG9yIiwidG9rZW4iLCJzdHJpbmdpZnlUb2tlbiIsImpvaW4iLCJpbmRleCIsImFyciIsInR5cGUiLCJTZWxlY3RvclR5cGUiLCJDaGlsZCIsIlBhcmVudCIsIlNpYmxpbmciLCJBZGphY2VudCIsIkRlc2NlbmRhbnQiLCJDb2x1bW5Db21iaW5hdG9yIiwiVW5pdmVyc2FsIiwibmFtZXNwYWNlIiwiZ2V0TmFtZXNwYWNlIiwiVGFnIiwiZ2V0TmFtZXNwYWNlZE5hbWUiLCJQc2V1ZG9FbGVtZW50IiwiZXNjYXBlTmFtZSIsIm5hbWUiLCJkYXRhIiwiUHNldWRvIiwiQXR0cmlidXRlIiwiYWN0aW9uIiwiQXR0cmlidXRlQWN0aW9uIiwiRXF1YWxzIiwiaWdub3JlQ2FzZSIsIkVsZW1lbnQiLCJuYW1lXzEiLCJFeGlzdHMiLCJnZXRBY3Rpb25WYWx1ZSIsIlN0YXJ0IiwiRW5kIiwiQW55IiwiTm90IiwiSHlwaGVuIiwiRXJyb3IiLCJzdHIiLCJjaGFyc1RvRXNjYXBlIiwibGFzdElkeCIsInJldCIsImhhcyIsImNoYXJBdCJdLCJzb3VyY2VzIjpbInN0cmluZ2lmeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RyaW5naWZ5ID0gdm9pZCAwO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbnZhciBhdHRyaWJWYWxDaGFycyA9IFtcIlxcXFxcIiwgJ1wiJ107XG52YXIgcHNldWRvVmFsQ2hhcnMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIGF0dHJpYlZhbENoYXJzLCB0cnVlKSwgW1wiKFwiLCBcIilcIl0sIGZhbHNlKTtcbnZhciBjaGFyc1RvRXNjYXBlSW5BdHRyaWJ1dGVWYWx1ZSA9IG5ldyBTZXQoYXR0cmliVmFsQ2hhcnMubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmNoYXJDb2RlQXQoMCk7IH0pKTtcbnZhciBjaGFyc1RvRXNjYXBlSW5Qc2V1ZG9WYWx1ZSA9IG5ldyBTZXQocHNldWRvVmFsQ2hhcnMubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmNoYXJDb2RlQXQoMCk7IH0pKTtcbnZhciBjaGFyc1RvRXNjYXBlSW5OYW1lID0gbmV3IFNldChfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIHBzZXVkb1ZhbENoYXJzLCB0cnVlKSwgW1xuICAgIFwiflwiLFxuICAgIFwiXlwiLFxuICAgIFwiJFwiLFxuICAgIFwiKlwiLFxuICAgIFwiK1wiLFxuICAgIFwiIVwiLFxuICAgIFwifFwiLFxuICAgIFwiOlwiLFxuICAgIFwiW1wiLFxuICAgIFwiXVwiLFxuICAgIFwiIFwiLFxuICAgIFwiLlwiLFxuXSwgZmFsc2UpLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5jaGFyQ29kZUF0KDApOyB9KSk7XG4vKipcbiAqIFR1cm5zIGBzZWxlY3RvcmAgYmFjayBpbnRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciBTZWxlY3RvciB0byBzdHJpbmdpZnkuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeShzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3RvclxuICAgICAgICAubWFwKGZ1bmN0aW9uICh0b2tlbikgeyByZXR1cm4gdG9rZW4ubWFwKHN0cmluZ2lmeVRva2VuKS5qb2luKFwiXCIpOyB9KVxuICAgICAgICAuam9pbihcIiwgXCIpO1xufVxuZXhwb3J0cy5zdHJpbmdpZnkgPSBzdHJpbmdpZnk7XG5mdW5jdGlvbiBzdHJpbmdpZnlUb2tlbih0b2tlbiwgaW5kZXgsIGFycikge1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAvLyBTaW1wbGUgdHlwZXNcbiAgICAgICAgY2FzZSB0eXBlc18xLlNlbGVjdG9yVHlwZS5DaGlsZDpcbiAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/IFwiPiBcIiA6IFwiID4gXCI7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5TZWxlY3RvclR5cGUuUGFyZW50OlxuICAgICAgICAgICAgcmV0dXJuIGluZGV4ID09PSAwID8gXCI8IFwiIDogXCIgPCBcIjtcbiAgICAgICAgY2FzZSB0eXBlc18xLlNlbGVjdG9yVHlwZS5TaWJsaW5nOlxuICAgICAgICAgICAgcmV0dXJuIGluZGV4ID09PSAwID8gXCJ+IFwiIDogXCIgfiBcIjtcbiAgICAgICAgY2FzZSB0eXBlc18xLlNlbGVjdG9yVHlwZS5BZGphY2VudDpcbiAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/IFwiKyBcIiA6IFwiICsgXCI7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5TZWxlY3RvclR5cGUuRGVzY2VuZGFudDpcbiAgICAgICAgICAgIHJldHVybiBcIiBcIjtcbiAgICAgICAgY2FzZSB0eXBlc18xLlNlbGVjdG9yVHlwZS5Db2x1bW5Db21iaW5hdG9yOlxuICAgICAgICAgICAgcmV0dXJuIGluZGV4ID09PSAwID8gXCJ8fCBcIiA6IFwiIHx8IFwiO1xuICAgICAgICBjYXNlIHR5cGVzXzEuU2VsZWN0b3JUeXBlLlVuaXZlcnNhbDpcbiAgICAgICAgICAgIC8vIFJldHVybiBhbiBlbXB0eSBzdHJpbmcgaWYgdGhlIHNlbGVjdG9yIGlzbid0IG5lZWRlZC5cbiAgICAgICAgICAgIHJldHVybiB0b2tlbi5uYW1lc3BhY2UgPT09IFwiKlwiICYmXG4gICAgICAgICAgICAgICAgaW5kZXggKyAxIDwgYXJyLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgIFwibmFtZVwiIGluIGFycltpbmRleCArIDFdXG4gICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgOiBcIlwiLmNvbmNhdChnZXROYW1lc3BhY2UodG9rZW4ubmFtZXNwYWNlKSwgXCIqXCIpO1xuICAgICAgICBjYXNlIHR5cGVzXzEuU2VsZWN0b3JUeXBlLlRhZzpcbiAgICAgICAgICAgIHJldHVybiBnZXROYW1lc3BhY2VkTmFtZSh0b2tlbik7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5TZWxlY3RvclR5cGUuUHNldWRvRWxlbWVudDpcbiAgICAgICAgICAgIHJldHVybiBcIjo6XCIuY29uY2F0KGVzY2FwZU5hbWUodG9rZW4ubmFtZSwgY2hhcnNUb0VzY2FwZUluTmFtZSkpLmNvbmNhdCh0b2tlbi5kYXRhID09PSBudWxsXG4gICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgOiBcIihcIi5jb25jYXQoZXNjYXBlTmFtZSh0b2tlbi5kYXRhLCBjaGFyc1RvRXNjYXBlSW5Qc2V1ZG9WYWx1ZSksIFwiKVwiKSk7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5TZWxlY3RvclR5cGUuUHNldWRvOlxuICAgICAgICAgICAgcmV0dXJuIFwiOlwiLmNvbmNhdChlc2NhcGVOYW1lKHRva2VuLm5hbWUsIGNoYXJzVG9Fc2NhcGVJbk5hbWUpKS5jb25jYXQodG9rZW4uZGF0YSA9PT0gbnVsbFxuICAgICAgICAgICAgICAgID8gXCJcIlxuICAgICAgICAgICAgICAgIDogXCIoXCIuY29uY2F0KHR5cGVvZiB0b2tlbi5kYXRhID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICAgICAgICAgID8gZXNjYXBlTmFtZSh0b2tlbi5kYXRhLCBjaGFyc1RvRXNjYXBlSW5Qc2V1ZG9WYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiBzdHJpbmdpZnkodG9rZW4uZGF0YSksIFwiKVwiKSk7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5TZWxlY3RvclR5cGUuQXR0cmlidXRlOiB7XG4gICAgICAgICAgICBpZiAodG9rZW4ubmFtZSA9PT0gXCJpZFwiICYmXG4gICAgICAgICAgICAgICAgdG9rZW4uYWN0aW9uID09PSB0eXBlc18xLkF0dHJpYnV0ZUFjdGlvbi5FcXVhbHMgJiZcbiAgICAgICAgICAgICAgICB0b2tlbi5pZ25vcmVDYXNlID09PSBcInF1aXJrc1wiICYmXG4gICAgICAgICAgICAgICAgIXRva2VuLm5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIiNcIi5jb25jYXQoZXNjYXBlTmFtZSh0b2tlbi52YWx1ZSwgY2hhcnNUb0VzY2FwZUluTmFtZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRva2VuLm5hbWUgPT09IFwiY2xhc3NcIiAmJlxuICAgICAgICAgICAgICAgIHRva2VuLmFjdGlvbiA9PT0gdHlwZXNfMS5BdHRyaWJ1dGVBY3Rpb24uRWxlbWVudCAmJlxuICAgICAgICAgICAgICAgIHRva2VuLmlnbm9yZUNhc2UgPT09IFwicXVpcmtzXCIgJiZcbiAgICAgICAgICAgICAgICAhdG9rZW4ubmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiLlwiLmNvbmNhdChlc2NhcGVOYW1lKHRva2VuLnZhbHVlLCBjaGFyc1RvRXNjYXBlSW5OYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmFtZV8xID0gZ2V0TmFtZXNwYWNlZE5hbWUodG9rZW4pO1xuICAgICAgICAgICAgaWYgKHRva2VuLmFjdGlvbiA9PT0gdHlwZXNfMS5BdHRyaWJ1dGVBY3Rpb24uRXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW1wiLmNvbmNhdChuYW1lXzEsIFwiXVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIltcIi5jb25jYXQobmFtZV8xKS5jb25jYXQoZ2V0QWN0aW9uVmFsdWUodG9rZW4uYWN0aW9uKSwgXCI9XFxcIlwiKS5jb25jYXQoZXNjYXBlTmFtZSh0b2tlbi52YWx1ZSwgY2hhcnNUb0VzY2FwZUluQXR0cmlidXRlVmFsdWUpLCBcIlxcXCJcIikuY29uY2F0KHRva2VuLmlnbm9yZUNhc2UgPT09IG51bGwgPyBcIlwiIDogdG9rZW4uaWdub3JlQ2FzZSA/IFwiIGlcIiA6IFwiIHNcIiwgXCJdXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0QWN0aW9uVmFsdWUoYWN0aW9uKSB7XG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgY2FzZSB0eXBlc18xLkF0dHJpYnV0ZUFjdGlvbi5FcXVhbHM6XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgY2FzZSB0eXBlc18xLkF0dHJpYnV0ZUFjdGlvbi5FbGVtZW50OlxuICAgICAgICAgICAgcmV0dXJuIFwiflwiO1xuICAgICAgICBjYXNlIHR5cGVzXzEuQXR0cmlidXRlQWN0aW9uLlN0YXJ0OlxuICAgICAgICAgICAgcmV0dXJuIFwiXlwiO1xuICAgICAgICBjYXNlIHR5cGVzXzEuQXR0cmlidXRlQWN0aW9uLkVuZDpcbiAgICAgICAgICAgIHJldHVybiBcIiRcIjtcbiAgICAgICAgY2FzZSB0eXBlc18xLkF0dHJpYnV0ZUFjdGlvbi5Bbnk6XG4gICAgICAgICAgICByZXR1cm4gXCIqXCI7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5BdHRyaWJ1dGVBY3Rpb24uTm90OlxuICAgICAgICAgICAgcmV0dXJuIFwiIVwiO1xuICAgICAgICBjYXNlIHR5cGVzXzEuQXR0cmlidXRlQWN0aW9uLkh5cGhlbjpcbiAgICAgICAgICAgIHJldHVybiBcInxcIjtcbiAgICAgICAgY2FzZSB0eXBlc18xLkF0dHJpYnV0ZUFjdGlvbi5FeGlzdHM6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaG91bGRuJ3QgYmUgaGVyZVwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXROYW1lc3BhY2VkTmFtZSh0b2tlbikge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChnZXROYW1lc3BhY2UodG9rZW4ubmFtZXNwYWNlKSkuY29uY2F0KGVzY2FwZU5hbWUodG9rZW4ubmFtZSwgY2hhcnNUb0VzY2FwZUluTmFtZSkpO1xufVxuZnVuY3Rpb24gZ2V0TmFtZXNwYWNlKG5hbWVzcGFjZSkge1xuICAgIHJldHVybiBuYW1lc3BhY2UgIT09IG51bGxcbiAgICAgICAgPyBcIlwiLmNvbmNhdChuYW1lc3BhY2UgPT09IFwiKlwiXG4gICAgICAgICAgICA/IFwiKlwiXG4gICAgICAgICAgICA6IGVzY2FwZU5hbWUobmFtZXNwYWNlLCBjaGFyc1RvRXNjYXBlSW5OYW1lKSwgXCJ8XCIpXG4gICAgICAgIDogXCJcIjtcbn1cbmZ1bmN0aW9uIGVzY2FwZU5hbWUoc3RyLCBjaGFyc1RvRXNjYXBlKSB7XG4gICAgdmFyIGxhc3RJZHggPSAwO1xuICAgIHZhciByZXQgPSBcIlwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChjaGFyc1RvRXNjYXBlLmhhcyhzdHIuY2hhckNvZGVBdChpKSkpIHtcbiAgICAgICAgICAgIHJldCArPSBcIlwiLmNvbmNhdChzdHIuc2xpY2UobGFzdElkeCwgaSksIFwiXFxcXFwiKS5jb25jYXQoc3RyLmNoYXJBdChpKSk7XG4gICAgICAgICAgICBsYXN0SWR4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldC5sZW5ndGggPiAwID8gcmV0ICsgc3RyLnNsaWNlKGxhc3RJZHgpIDogc3RyO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaLElBQUlBLGFBQWEsR0FBSSxVQUFRLFNBQUtBLGFBQWEsSUFBSyxVQUFVQyxFQUFFLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFO0VBQzFFLElBQUlBLElBQUksSUFBSUMsU0FBUyxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUMsQ0FBQyxHQUFHTCxJQUFJLENBQUNHLE1BQU0sRUFBRUcsRUFBRSxFQUFFRixDQUFDLEdBQUdDLENBQUMsRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDakYsSUFBSUUsRUFBRSxJQUFJLEVBQUVGLENBQUMsSUFBSUosSUFBSSxDQUFDLEVBQUU7TUFDcEIsSUFBSSxDQUFDTSxFQUFFLEVBQUVBLEVBQUUsR0FBR0MsS0FBSyxDQUFDQyxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDVixJQUFJLEVBQUUsQ0FBQyxFQUFFSSxDQUFDLENBQUM7TUFDcERFLEVBQUUsQ0FBQ0YsQ0FBQyxDQUFDLEdBQUdKLElBQUksQ0FBQ0ksQ0FBQyxDQUFDO0lBQ25CO0VBQ0o7RUFDQSxPQUFPTCxFQUFFLENBQUNZLE1BQU0sQ0FBQ0wsRUFBRSxJQUFJQyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUNWLElBQUksQ0FBQyxDQUFDO0FBQzVELENBQUM7QUFDRFksTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdERCxPQUFPLENBQUNFLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFDMUIsSUFBSUMsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ2hDLElBQUlDLGNBQWMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUM7QUFDaEMsSUFBSUMsY0FBYyxHQUFHdEIsYUFBYSxDQUFDQSxhQUFhLENBQUMsRUFBRSxFQUFFcUIsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQztBQUM5RixJQUFJRSw2QkFBNkIsR0FBRyxJQUFJQyxHQUFHLENBQUNILGNBQWMsQ0FBQ0ksR0FBRyxDQUFDLFVBQVVDLENBQUMsRUFBRTtFQUFFLE9BQU9BLENBQUMsQ0FBQ0MsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3pHLElBQUlDLDBCQUEwQixHQUFHLElBQUlKLEdBQUcsQ0FBQ0YsY0FBYyxDQUFDRyxHQUFHLENBQUMsVUFBVUMsQ0FBQyxFQUFFO0VBQUUsT0FBT0EsQ0FBQyxDQUFDQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdEcsSUFBSUUsbUJBQW1CLEdBQUcsSUFBSUwsR0FBRyxDQUFDeEIsYUFBYSxDQUFDQSxhQUFhLENBQUMsRUFBRSxFQUFFc0IsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQ3JGLEdBQUcsRUFDSCxHQUFHLEVBQ0gsR0FBRyxFQUNILEdBQUcsRUFDSCxHQUFHLEVBQ0gsR0FBRyxFQUNILEdBQUcsRUFDSCxHQUFHLEVBQ0gsR0FBRyxFQUNILEdBQUcsRUFDSCxHQUFHLEVBQ0gsR0FBRyxDQUNOLEVBQUUsS0FBSyxDQUFDLENBQUNHLEdBQUcsQ0FBQyxVQUFVQyxDQUFDLEVBQUU7RUFBRSxPQUFPQSxDQUFDLENBQUNDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFBRSxDQUFDLENBQUMsQ0FBQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU1QsU0FBU0EsQ0FBQ1ksUUFBUSxFQUFFO0VBQ3pCLE9BQU9BLFFBQVEsQ0FDVkwsR0FBRyxDQUFDLFVBQVVNLEtBQUssRUFBRTtJQUFFLE9BQU9BLEtBQUssQ0FBQ04sR0FBRyxDQUFDTyxjQUFjLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEVBQUUsQ0FBQztFQUFFLENBQUMsQ0FBQyxDQUNwRUEsSUFBSSxDQUFDLElBQUksQ0FBQztBQUNuQjtBQUNBakIsT0FBTyxDQUFDRSxTQUFTLEdBQUdBLFNBQVM7QUFDN0IsU0FBU2MsY0FBY0EsQ0FBQ0QsS0FBSyxFQUFFRyxLQUFLLEVBQUVDLEdBQUcsRUFBRTtFQUN2QyxRQUFRSixLQUFLLENBQUNLLElBQUk7SUFDZDtJQUNBLEtBQUtqQixPQUFPLENBQUNrQixZQUFZLENBQUNDLEtBQUs7TUFDM0IsT0FBT0osS0FBSyxLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSztJQUNyQyxLQUFLZixPQUFPLENBQUNrQixZQUFZLENBQUNFLE1BQU07TUFDNUIsT0FBT0wsS0FBSyxLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSztJQUNyQyxLQUFLZixPQUFPLENBQUNrQixZQUFZLENBQUNHLE9BQU87TUFDN0IsT0FBT04sS0FBSyxLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSztJQUNyQyxLQUFLZixPQUFPLENBQUNrQixZQUFZLENBQUNJLFFBQVE7TUFDOUIsT0FBT1AsS0FBSyxLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSztJQUNyQyxLQUFLZixPQUFPLENBQUNrQixZQUFZLENBQUNLLFVBQVU7TUFDaEMsT0FBTyxHQUFHO0lBQ2QsS0FBS3ZCLE9BQU8sQ0FBQ2tCLFlBQVksQ0FBQ00sZ0JBQWdCO01BQ3RDLE9BQU9ULEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxHQUFHLE1BQU07SUFDdkMsS0FBS2YsT0FBTyxDQUFDa0IsWUFBWSxDQUFDTyxTQUFTO01BQy9CO01BQ0EsT0FBT2IsS0FBSyxDQUFDYyxTQUFTLEtBQUssR0FBRyxJQUMxQlgsS0FBSyxHQUFHLENBQUMsR0FBR0MsR0FBRyxDQUFDOUIsTUFBTSxJQUN0QixNQUFNLElBQUk4QixHQUFHLENBQUNELEtBQUssR0FBRyxDQUFDLENBQUMsR0FDdEIsRUFBRSxHQUNGLEVBQUUsQ0FBQ3JCLE1BQU0sQ0FBQ2lDLFlBQVksQ0FBQ2YsS0FBSyxDQUFDYyxTQUFTLENBQUMsRUFBRSxHQUFHLENBQUM7SUFDdkQsS0FBSzFCLE9BQU8sQ0FBQ2tCLFlBQVksQ0FBQ1UsR0FBRztNQUN6QixPQUFPQyxpQkFBaUIsQ0FBQ2pCLEtBQUssQ0FBQztJQUNuQyxLQUFLWixPQUFPLENBQUNrQixZQUFZLENBQUNZLGFBQWE7TUFDbkMsT0FBTyxJQUFJLENBQUNwQyxNQUFNLENBQUNxQyxVQUFVLENBQUNuQixLQUFLLENBQUNvQixJQUFJLEVBQUV0QixtQkFBbUIsQ0FBQyxDQUFDLENBQUNoQixNQUFNLENBQUNrQixLQUFLLENBQUNxQixJQUFJLEtBQUssSUFBSSxHQUNwRixFQUFFLEdBQ0YsR0FBRyxDQUFDdkMsTUFBTSxDQUFDcUMsVUFBVSxDQUFDbkIsS0FBSyxDQUFDcUIsSUFBSSxFQUFFeEIsMEJBQTBCLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5RSxLQUFLVCxPQUFPLENBQUNrQixZQUFZLENBQUNnQixNQUFNO01BQzVCLE9BQU8sR0FBRyxDQUFDeEMsTUFBTSxDQUFDcUMsVUFBVSxDQUFDbkIsS0FBSyxDQUFDb0IsSUFBSSxFQUFFdEIsbUJBQW1CLENBQUMsQ0FBQyxDQUFDaEIsTUFBTSxDQUFDa0IsS0FBSyxDQUFDcUIsSUFBSSxLQUFLLElBQUksR0FDbkYsRUFBRSxHQUNGLEdBQUcsQ0FBQ3ZDLE1BQU0sQ0FBQyxPQUFPa0IsS0FBSyxDQUFDcUIsSUFBSSxLQUFLLFFBQVEsR0FDckNGLFVBQVUsQ0FBQ25CLEtBQUssQ0FBQ3FCLElBQUksRUFBRXhCLDBCQUEwQixDQUFDLEdBQ2xEVixTQUFTLENBQUNhLEtBQUssQ0FBQ3FCLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzFDLEtBQUtqQyxPQUFPLENBQUNrQixZQUFZLENBQUNpQixTQUFTO01BQUU7UUFDakMsSUFBSXZCLEtBQUssQ0FBQ29CLElBQUksS0FBSyxJQUFJLElBQ25CcEIsS0FBSyxDQUFDd0IsTUFBTSxLQUFLcEMsT0FBTyxDQUFDcUMsZUFBZSxDQUFDQyxNQUFNLElBQy9DMUIsS0FBSyxDQUFDMkIsVUFBVSxLQUFLLFFBQVEsSUFDN0IsQ0FBQzNCLEtBQUssQ0FBQ2MsU0FBUyxFQUFFO1VBQ2xCLE9BQU8sR0FBRyxDQUFDaEMsTUFBTSxDQUFDcUMsVUFBVSxDQUFDbkIsS0FBSyxDQUFDZCxLQUFLLEVBQUVZLG1CQUFtQixDQUFDLENBQUM7UUFDbkU7UUFDQSxJQUFJRSxLQUFLLENBQUNvQixJQUFJLEtBQUssT0FBTyxJQUN0QnBCLEtBQUssQ0FBQ3dCLE1BQU0sS0FBS3BDLE9BQU8sQ0FBQ3FDLGVBQWUsQ0FBQ0csT0FBTyxJQUNoRDVCLEtBQUssQ0FBQzJCLFVBQVUsS0FBSyxRQUFRLElBQzdCLENBQUMzQixLQUFLLENBQUNjLFNBQVMsRUFBRTtVQUNsQixPQUFPLEdBQUcsQ0FBQ2hDLE1BQU0sQ0FBQ3FDLFVBQVUsQ0FBQ25CLEtBQUssQ0FBQ2QsS0FBSyxFQUFFWSxtQkFBbUIsQ0FBQyxDQUFDO1FBQ25FO1FBQ0EsSUFBSStCLE1BQU0sR0FBR1osaUJBQWlCLENBQUNqQixLQUFLLENBQUM7UUFDckMsSUFBSUEsS0FBSyxDQUFDd0IsTUFBTSxLQUFLcEMsT0FBTyxDQUFDcUMsZUFBZSxDQUFDSyxNQUFNLEVBQUU7VUFDakQsT0FBTyxHQUFHLENBQUNoRCxNQUFNLENBQUMrQyxNQUFNLEVBQUUsR0FBRyxDQUFDO1FBQ2xDO1FBQ0EsT0FBTyxHQUFHLENBQUMvQyxNQUFNLENBQUMrQyxNQUFNLENBQUMsQ0FBQy9DLE1BQU0sQ0FBQ2lELGNBQWMsQ0FBQy9CLEtBQUssQ0FBQ3dCLE1BQU0sQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDMUMsTUFBTSxDQUFDcUMsVUFBVSxDQUFDbkIsS0FBSyxDQUFDZCxLQUFLLEVBQUVNLDZCQUE2QixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUNWLE1BQU0sQ0FBQ2tCLEtBQUssQ0FBQzJCLFVBQVUsS0FBSyxJQUFJLEdBQUcsRUFBRSxHQUFHM0IsS0FBSyxDQUFDMkIsVUFBVSxHQUFHLElBQUksR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDO01BQzNOO0VBQUM7QUFFVDtBQUNBLFNBQVNJLGNBQWNBLENBQUNQLE1BQU0sRUFBRTtFQUM1QixRQUFRQSxNQUFNO0lBQ1YsS0FBS3BDLE9BQU8sQ0FBQ3FDLGVBQWUsQ0FBQ0MsTUFBTTtNQUMvQixPQUFPLEVBQUU7SUFDYixLQUFLdEMsT0FBTyxDQUFDcUMsZUFBZSxDQUFDRyxPQUFPO01BQ2hDLE9BQU8sR0FBRztJQUNkLEtBQUt4QyxPQUFPLENBQUNxQyxlQUFlLENBQUNPLEtBQUs7TUFDOUIsT0FBTyxHQUFHO0lBQ2QsS0FBSzVDLE9BQU8sQ0FBQ3FDLGVBQWUsQ0FBQ1EsR0FBRztNQUM1QixPQUFPLEdBQUc7SUFDZCxLQUFLN0MsT0FBTyxDQUFDcUMsZUFBZSxDQUFDUyxHQUFHO01BQzVCLE9BQU8sR0FBRztJQUNkLEtBQUs5QyxPQUFPLENBQUNxQyxlQUFlLENBQUNVLEdBQUc7TUFDNUIsT0FBTyxHQUFHO0lBQ2QsS0FBSy9DLE9BQU8sQ0FBQ3FDLGVBQWUsQ0FBQ1csTUFBTTtNQUMvQixPQUFPLEdBQUc7SUFDZCxLQUFLaEQsT0FBTyxDQUFDcUMsZUFBZSxDQUFDSyxNQUFNO01BQy9CLE1BQU0sSUFBSU8sS0FBSyxDQUFDLG1CQUFtQixDQUFDO0VBQUM7QUFFakQ7QUFDQSxTQUFTcEIsaUJBQWlCQSxDQUFDakIsS0FBSyxFQUFFO0VBQzlCLE9BQU8sRUFBRSxDQUFDbEIsTUFBTSxDQUFDaUMsWUFBWSxDQUFDZixLQUFLLENBQUNjLFNBQVMsQ0FBQyxDQUFDLENBQUNoQyxNQUFNLENBQUNxQyxVQUFVLENBQUNuQixLQUFLLENBQUNvQixJQUFJLEVBQUV0QixtQkFBbUIsQ0FBQyxDQUFDO0FBQ3ZHO0FBQ0EsU0FBU2lCLFlBQVlBLENBQUNELFNBQVMsRUFBRTtFQUM3QixPQUFPQSxTQUFTLEtBQUssSUFBSSxHQUNuQixFQUFFLENBQUNoQyxNQUFNLENBQUNnQyxTQUFTLEtBQUssR0FBRyxHQUN2QixHQUFHLEdBQ0hLLFVBQVUsQ0FBQ0wsU0FBUyxFQUFFaEIsbUJBQW1CLENBQUMsRUFBRSxHQUFHLENBQUMsR0FDcEQsRUFBRTtBQUNaO0FBQ0EsU0FBU3FCLFVBQVVBLENBQUNtQixHQUFHLEVBQUVDLGFBQWEsRUFBRTtFQUNwQyxJQUFJQyxPQUFPLEdBQUcsQ0FBQztFQUNmLElBQUlDLEdBQUcsR0FBRyxFQUFFO0VBQ1osS0FBSyxJQUFJbEUsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHK0QsR0FBRyxDQUFDaEUsTUFBTSxFQUFFQyxDQUFDLEVBQUUsRUFBRTtJQUNqQyxJQUFJZ0UsYUFBYSxDQUFDRyxHQUFHLENBQUNKLEdBQUcsQ0FBQzFDLFVBQVUsQ0FBQ3JCLENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFDdENrRSxHQUFHLElBQUksRUFBRSxDQUFDM0QsTUFBTSxDQUFDd0QsR0FBRyxDQUFDMUQsS0FBSyxDQUFDNEQsT0FBTyxFQUFFakUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUNPLE1BQU0sQ0FBQ3dELEdBQUcsQ0FBQ0ssTUFBTSxDQUFDcEUsQ0FBQyxDQUFDLENBQUM7TUFDbkVpRSxPQUFPLEdBQUdqRSxDQUFDLEdBQUcsQ0FBQztJQUNuQjtFQUNKO0VBQ0EsT0FBT2tFLEdBQUcsQ0FBQ25FLE1BQU0sR0FBRyxDQUFDLEdBQUdtRSxHQUFHLEdBQUdILEdBQUcsQ0FBQzFELEtBQUssQ0FBQzRELE9BQU8sQ0FBQyxHQUFHRixHQUFHO0FBQzFEIn0=