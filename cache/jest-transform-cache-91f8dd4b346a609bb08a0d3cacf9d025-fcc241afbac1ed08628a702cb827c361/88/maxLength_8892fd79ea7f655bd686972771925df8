52c1f7b875d9e0ef5e4406feb7f92107
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSpaceUntilMaxLength = getSpaceUntilMaxLength;
var _isElementType = require("../misc/isElementType");
var _getValue = require("./getValue");
var maxLengthSupportedTypes;
(function (maxLengthSupportedTypes) {
  maxLengthSupportedTypes["email"] = "email";
  maxLengthSupportedTypes["password"] = "password";
  maxLengthSupportedTypes["search"] = "search";
  maxLengthSupportedTypes["telephone"] = "telephone";
  maxLengthSupportedTypes["text"] = "text";
  maxLengthSupportedTypes["url"] = "url";
})(maxLengthSupportedTypes || (maxLengthSupportedTypes = {}));
function getSpaceUntilMaxLength(element) {
  const value = (0, _getValue.getValue)(element);
  /* istanbul ignore if */

  if (value === null) {
    return undefined;
  }
  const maxLength = getSanitizedMaxLength(element);
  return maxLength ? maxLength - value.length : undefined;
} // can't use .maxLength property because of a jsdom bug:
// https://github.com/jsdom/jsdom/issues/2927

function getSanitizedMaxLength(element) {
  var _element$getAttribute;
  if (!supportsMaxLength(element)) {
    return undefined;
  }
  const attr = (_element$getAttribute = element.getAttribute('maxlength')) != null ? _element$getAttribute : '';
  return /^\d+$/.test(attr) && Number(attr) >= 0 ? Number(attr) : undefined;
}
function supportsMaxLength(element) {
  return (0, _isElementType.isElementType)(element, 'textarea') || (0, _isElementType.isElementType)(element, 'input') && Boolean(maxLengthSupportedTypes[element.type]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFNwYWNlVW50aWxNYXhMZW5ndGgiLCJfaXNFbGVtZW50VHlwZSIsInJlcXVpcmUiLCJfZ2V0VmFsdWUiLCJtYXhMZW5ndGhTdXBwb3J0ZWRUeXBlcyIsImVsZW1lbnQiLCJnZXRWYWx1ZSIsInVuZGVmaW5lZCIsIm1heExlbmd0aCIsImdldFNhbml0aXplZE1heExlbmd0aCIsImxlbmd0aCIsIl9lbGVtZW50JGdldEF0dHJpYnV0ZSIsInN1cHBvcnRzTWF4TGVuZ3RoIiwiYXR0ciIsImdldEF0dHJpYnV0ZSIsInRlc3QiLCJOdW1iZXIiLCJpc0VsZW1lbnRUeXBlIiwiQm9vbGVhbiIsInR5cGUiXSwic291cmNlcyI6WyJtYXhMZW5ndGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFNwYWNlVW50aWxNYXhMZW5ndGggPSBnZXRTcGFjZVVudGlsTWF4TGVuZ3RoO1xuXG52YXIgX2lzRWxlbWVudFR5cGUgPSByZXF1aXJlKFwiLi4vbWlzYy9pc0VsZW1lbnRUeXBlXCIpO1xuXG52YXIgX2dldFZhbHVlID0gcmVxdWlyZShcIi4vZ2V0VmFsdWVcIik7XG5cbnZhciBtYXhMZW5ndGhTdXBwb3J0ZWRUeXBlcztcblxuKGZ1bmN0aW9uIChtYXhMZW5ndGhTdXBwb3J0ZWRUeXBlcykge1xuICBtYXhMZW5ndGhTdXBwb3J0ZWRUeXBlc1tcImVtYWlsXCJdID0gXCJlbWFpbFwiO1xuICBtYXhMZW5ndGhTdXBwb3J0ZWRUeXBlc1tcInBhc3N3b3JkXCJdID0gXCJwYXNzd29yZFwiO1xuICBtYXhMZW5ndGhTdXBwb3J0ZWRUeXBlc1tcInNlYXJjaFwiXSA9IFwic2VhcmNoXCI7XG4gIG1heExlbmd0aFN1cHBvcnRlZFR5cGVzW1widGVsZXBob25lXCJdID0gXCJ0ZWxlcGhvbmVcIjtcbiAgbWF4TGVuZ3RoU3VwcG9ydGVkVHlwZXNbXCJ0ZXh0XCJdID0gXCJ0ZXh0XCI7XG4gIG1heExlbmd0aFN1cHBvcnRlZFR5cGVzW1widXJsXCJdID0gXCJ1cmxcIjtcbn0pKG1heExlbmd0aFN1cHBvcnRlZFR5cGVzIHx8IChtYXhMZW5ndGhTdXBwb3J0ZWRUeXBlcyA9IHt9KSk7XG5cbmZ1bmN0aW9uIGdldFNwYWNlVW50aWxNYXhMZW5ndGgoZWxlbWVudCkge1xuICBjb25zdCB2YWx1ZSA9ICgwLCBfZ2V0VmFsdWUuZ2V0VmFsdWUpKGVsZW1lbnQpO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgbWF4TGVuZ3RoID0gZ2V0U2FuaXRpemVkTWF4TGVuZ3RoKGVsZW1lbnQpO1xuICByZXR1cm4gbWF4TGVuZ3RoID8gbWF4TGVuZ3RoIC0gdmFsdWUubGVuZ3RoIDogdW5kZWZpbmVkO1xufSAvLyBjYW4ndCB1c2UgLm1heExlbmd0aCBwcm9wZXJ0eSBiZWNhdXNlIG9mIGEganNkb20gYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pzZG9tL2pzZG9tL2lzc3Vlcy8yOTI3XG5cblxuZnVuY3Rpb24gZ2V0U2FuaXRpemVkTWF4TGVuZ3RoKGVsZW1lbnQpIHtcbiAgdmFyIF9lbGVtZW50JGdldEF0dHJpYnV0ZTtcblxuICBpZiAoIXN1cHBvcnRzTWF4TGVuZ3RoKGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IGF0dHIgPSAoX2VsZW1lbnQkZ2V0QXR0cmlidXRlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ21heGxlbmd0aCcpKSAhPSBudWxsID8gX2VsZW1lbnQkZ2V0QXR0cmlidXRlIDogJyc7XG4gIHJldHVybiAvXlxcZCskLy50ZXN0KGF0dHIpICYmIE51bWJlcihhdHRyKSA+PSAwID8gTnVtYmVyKGF0dHIpIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBzdXBwb3J0c01heExlbmd0aChlbGVtZW50KSB7XG4gIHJldHVybiAoMCwgX2lzRWxlbWVudFR5cGUuaXNFbGVtZW50VHlwZSkoZWxlbWVudCwgJ3RleHRhcmVhJykgfHwgKDAsIF9pc0VsZW1lbnRUeXBlLmlzRWxlbWVudFR5cGUpKGVsZW1lbnQsICdpbnB1dCcpICYmIEJvb2xlYW4obWF4TGVuZ3RoU3VwcG9ydGVkVHlwZXNbZWxlbWVudC50eXBlXSk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0Usc0JBQXNCLEdBQUdBLHNCQUFzQjtBQUV2RCxJQUFJQyxjQUFjLEdBQUdDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUVyRCxJQUFJQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFFckMsSUFBSUUsdUJBQXVCO0FBRTNCLENBQUMsVUFBVUEsdUJBQXVCLEVBQUU7RUFDbENBLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU87RUFDMUNBLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVU7RUFDaERBLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVE7RUFDNUNBLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxHQUFHLFdBQVc7RUFDbERBLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU07RUFDeENBLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUs7QUFDeEMsQ0FBQyxFQUFFQSx1QkFBdUIsS0FBS0EsdUJBQXVCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUU3RCxTQUFTSixzQkFBc0JBLENBQUNLLE9BQU8sRUFBRTtFQUN2QyxNQUFNTixLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUVJLFNBQVMsQ0FBQ0csUUFBUSxFQUFFRCxPQUFPLENBQUM7RUFDOUM7O0VBRUEsSUFBSU4sS0FBSyxLQUFLLElBQUksRUFBRTtJQUNsQixPQUFPUSxTQUFTO0VBQ2xCO0VBRUEsTUFBTUMsU0FBUyxHQUFHQyxxQkFBcUIsQ0FBQ0osT0FBTyxDQUFDO0VBQ2hELE9BQU9HLFNBQVMsR0FBR0EsU0FBUyxHQUFHVCxLQUFLLENBQUNXLE1BQU0sR0FBR0gsU0FBUztBQUN6RCxDQUFDLENBQUM7QUFDRjs7QUFHQSxTQUFTRSxxQkFBcUJBLENBQUNKLE9BQU8sRUFBRTtFQUN0QyxJQUFJTSxxQkFBcUI7RUFFekIsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ1AsT0FBTyxDQUFDLEVBQUU7SUFDL0IsT0FBT0UsU0FBUztFQUNsQjtFQUVBLE1BQU1NLElBQUksR0FBRyxDQUFDRixxQkFBcUIsR0FBR04sT0FBTyxDQUFDUyxZQUFZLENBQUMsV0FBVyxDQUFDLEtBQUssSUFBSSxHQUFHSCxxQkFBcUIsR0FBRyxFQUFFO0VBQzdHLE9BQU8sT0FBTyxDQUFDSSxJQUFJLENBQUNGLElBQUksQ0FBQyxJQUFJRyxNQUFNLENBQUNILElBQUksQ0FBQyxJQUFJLENBQUMsR0FBR0csTUFBTSxDQUFDSCxJQUFJLENBQUMsR0FBR04sU0FBUztBQUMzRTtBQUVBLFNBQVNLLGlCQUFpQkEsQ0FBQ1AsT0FBTyxFQUFFO0VBQ2xDLE9BQU8sQ0FBQyxDQUFDLEVBQUVKLGNBQWMsQ0FBQ2dCLGFBQWEsRUFBRVosT0FBTyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFSixjQUFjLENBQUNnQixhQUFhLEVBQUVaLE9BQU8sRUFBRSxPQUFPLENBQUMsSUFBSWEsT0FBTyxDQUFDZCx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDYyxJQUFJLENBQUMsQ0FBQztBQUN4SyJ9