4bb5392ad1f9f9baded7f7967624eb98
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRouterDom = require("react-router-dom");
var _App = require("../../../App");
var _Home = _interopRequireDefault(require("./../../homeandsubmit/Home"));
var _SubmitScreen = _interopRequireDefault(require("../../homeandsubmit/SubmitScreen"));
var _reactDnd = require("react-dnd");
var _reactDndHtml5Backend = require("react-dnd-html5-backend");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/question5.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    document.body.innerHTML = "";
  });
  test("User submits their quiz and sees their results", ({
    given,
    when,
    then
  }) => {
    const mockQuizContext = {
      score: 5,
      setScore: jest.fn(),
      name: "chandu",
      setName: jest.fn(),
      age: 25,
      setAge: jest.fn(),
      email: "chandra@chandu.com",
      setMail: jest.fn(),
      phoneNumber: "1234567890",
      setPhone: jest.fn(),
      selectedLanguage: "ReactJS",
      setSelector: jest.fn(),
      trackScore: false,
      setTracker: jest.fn()
    };
    given("the user has completed the quiz is on the Submit Screen", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactDnd.DndProvider, {
        backend: _reactDndHtml5Backend.HTML5Backend,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_App.QuizContext.Provider, {
          value: mockQuizContext,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactRouterDom.Routes, {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
                path: "/",
                element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SubmitScreen.default, {})
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
                element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Home.default, {})
              })]
            })
          })
        })
      }));
      expect(screen).toBeTruthy();
      const container = screen.getByTestId("submission-container");
      expect(container).toBeTruthy();
    });
    when("the user should see the details they entered in the home screen", () => {
      expect(_react2.screen.getByText("Name: chandu")).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0Um91dGVyRG9tIiwiX0FwcCIsIl9Ib21lIiwiX1N1Ym1pdFNjcmVlbiIsIl9yZWFjdERuZCIsIl9yZWFjdERuZEh0bWw1QmFja2VuZCIsIl9qc3hSdW50aW1lIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJmZWF0dXJlIiwibG9hZEZlYXR1cmUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImJlZm9yZUVhY2giLCJkb2N1bWVudCIsImJvZHkiLCJpbm5lckhUTUwiLCJnaXZlbiIsIndoZW4iLCJ0aGVuIiwibW9ja1F1aXpDb250ZXh0Iiwic2NvcmUiLCJzZXRTY29yZSIsImplc3QiLCJmbiIsIm5hbWUiLCJzZXROYW1lIiwiYWdlIiwic2V0QWdlIiwiZW1haWwiLCJzZXRNYWlsIiwicGhvbmVOdW1iZXIiLCJzZXRQaG9uZSIsInNlbGVjdGVkTGFuZ3VhZ2UiLCJzZXRTZWxlY3RvciIsInRyYWNrU2NvcmUiLCJzZXRUcmFja2VyIiwic2NyZWVuIiwicmVuZGVyIiwianN4IiwiRG5kUHJvdmlkZXIiLCJiYWNrZW5kIiwiSFRNTDVCYWNrZW5kIiwiY2hpbGRyZW4iLCJRdWl6Q29udGV4dCIsIlByb3ZpZGVyIiwidmFsdWUiLCJCcm93c2VyUm91dGVyIiwianN4cyIsIlJvdXRlcyIsIlJvdXRlIiwicGF0aCIsImVsZW1lbnQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiY29udGFpbmVyIiwiZ2V0QnlUZXN0SWQiLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCJdLCJzb3VyY2VzIjpbInN1Ym1pdHNjcmVlbi5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBkZWZpbmVGZWF0dXJlLCBsb2FkRmVhdHVyZSB9IGZyb20gXCJqZXN0LWN1Y3VtYmVyXCI7XHJcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgXCJ0ZXh0LWVuY29kaW5nXCI7XHJcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdFwiO1xyXG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIFJvdXRlcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IFF1aXpDb250ZXh0IH0gZnJvbSBcIi4uLy4uLy4uL0FwcFwiO1xyXG5pbXBvcnQgSG9tZSBmcm9tIFwiLi8uLi8uLi9ob21lYW5kc3VibWl0L0hvbWVcIjtcclxuaW1wb3J0IFF1ZXN0aW9uNSBmcm9tIFwiLi8uLi8uLi9xdWVzdGlvbnMvUXVlc3Rpb241XCI7XHJcbmltcG9ydCBTdWJtaXRTY3JlZW4gZnJvbSBcIi4uLy4uL2hvbWVhbmRzdWJtaXQvU3VibWl0U2NyZWVuXCI7XHJcbmltcG9ydCB7IERuZFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LWRuZFwiO1xyXG5pbXBvcnQgeyBIVE1MNUJhY2tlbmQgfSBmcm9tIFwicmVhY3QtZG5kLWh0bWw1LWJhY2tlbmRcIjtcclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKFwic3JjL2NvbXBvbmVudHMvZmVhdHVyZXMvcXVlc3Rpb241LmZlYXR1cmVcIik7XHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gXCJcIjtcclxuICB9KTtcclxuICB0ZXN0KFwiVXNlciBzdWJtaXRzIHRoZWlyIHF1aXogYW5kIHNlZXMgdGhlaXIgcmVzdWx0c1wiLCAoe1xyXG4gICAgZ2l2ZW4sXHJcbiAgICB3aGVuLFxyXG4gICAgdGhlbixcclxuICB9KSA9PiB7XHJcbiAgICBjb25zdCBtb2NrUXVpekNvbnRleHQgPSB7XHJcbiAgICAgIHNjb3JlOiA1LFxyXG4gICAgICBzZXRTY29yZTogamVzdC5mbigpLFxyXG4gICAgICBuYW1lOiBcImNoYW5kdVwiLFxyXG4gICAgICBzZXROYW1lOiBqZXN0LmZuKCksXHJcbiAgICAgIGFnZTogMjUsXHJcbiAgICAgIHNldEFnZTogamVzdC5mbigpLFxyXG4gICAgICBlbWFpbDogXCJjaGFuZHJhQGNoYW5kdS5jb21cIixcclxuICAgICAgc2V0TWFpbDogamVzdC5mbigpLFxyXG4gICAgICBwaG9uZU51bWJlcjogXCIxMjM0NTY3ODkwXCIsXHJcbiAgICAgIHNldFBob25lOiBqZXN0LmZuKCksXHJcbiAgICAgIHNlbGVjdGVkTGFuZ3VhZ2U6IFwiUmVhY3RKU1wiLFxyXG4gICAgICBzZXRTZWxlY3RvcjogamVzdC5mbigpLFxyXG4gICAgICB0cmFja1Njb3JlOiBmYWxzZSxcclxuICAgICAgc2V0VHJhY2tlcjogamVzdC5mbigpLFxyXG4gICAgfTtcclxuICAgIGdpdmVuKFwidGhlIHVzZXIgaGFzIGNvbXBsZXRlZCB0aGUgcXVpeiBpcyBvbiB0aGUgU3VibWl0IFNjcmVlblwiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgICA8RG5kUHJvdmlkZXIgYmFja2VuZD17SFRNTDVCYWNrZW5kfT5cclxuICAgICAgICAgIDxRdWl6Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja1F1aXpDb250ZXh0fT5cclxuICAgICAgICAgICAgPFJvdXRlcj5cclxuICAgICAgICAgICAgICA8Um91dGVzPlxyXG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgZWxlbWVudD17PFN1Ym1pdFNjcmVlbiAvPn0gLz5cclxuICAgICAgICAgICAgICAgIDxSb3V0ZSBlbGVtZW50PXs8SG9tZSAvPn0gLz5cclxuICAgICAgICAgICAgICA8L1JvdXRlcz5cclxuICAgICAgICAgICAgPC9Sb3V0ZXI+XHJcbiAgICAgICAgICA8L1F1aXpDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgICAgIDwvRG5kUHJvdmlkZXI+XHJcbiAgICAgICk7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVUcnV0aHkoKTtcclxuICAgICAgY29uc3QgY29udGFpbmVyID0gc2NyZWVuLmdldEJ5VGVzdElkKFwic3VibWlzc2lvbi1jb250YWluZXJcIik7XHJcbiAgICAgIGV4cGVjdChjb250YWluZXIpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgd2hlbihcclxuICAgICAgXCJ0aGUgdXNlciBzaG91bGQgc2VlIHRoZSBkZXRhaWxzIHRoZXkgZW50ZXJlZCBpbiB0aGUgaG9tZSBzY3JlZW5cIixcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiTmFtZTogY2hhbmR1XCIpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUNBQSxPQUFBO0FBQ0FBLE9BQUE7QUFDQSxJQUFBRyxlQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxJQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxLQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBTSxhQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTyxTQUFBLEdBQUFQLE9BQUE7QUFDQSxJQUFBUSxxQkFBQSxHQUFBUixPQUFBO0FBQXVELElBQUFTLFdBQUEsR0FBQVQsT0FBQTtBQUFBLFNBQUFELHVCQUFBVyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQ3ZE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