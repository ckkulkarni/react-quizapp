2b781a1328ee9b19ca18f605e962d19d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyboard = keyboard;
exports.keyboardImplementationWrapper = keyboardImplementationWrapper;
Object.defineProperty(exports, "specialCharMap", {
  enumerable: true,
  get: function () {
    return _specialCharMap.specialCharMap;
  }
});
var _dom = require("@testing-library/dom");
var _keyboardImplementation = require("./keyboardImplementation");
var _keyMap = require("./keyMap");
var _specialCharMap = require("./specialCharMap");
function keyboard(text, options) {
  var _options$delay;
  const {
    promise,
    state
  } = keyboardImplementationWrapper(text, options);
  if (((_options$delay = options == null ? void 0 : options.delay) != null ? _options$delay : 0) > 0) {
    return (0, _dom.getConfig)().asyncWrapper(() => promise.then(() => state));
  } else {
    // prevent users from dealing with UnhandledPromiseRejectionWarning in sync call
    promise.catch(console.error);
    return state;
  }
}
function keyboardImplementationWrapper(text, config = {}) {
  const {
    keyboardState: state = createKeyboardState(),
    delay = 0,
    document: doc = document,
    autoModify = false,
    keyboardMap = _keyMap.defaultKeyMap
  } = config;
  const options = {
    delay,
    document: doc,
    autoModify,
    keyboardMap
  };
  return {
    promise: (0, _keyboardImplementation.keyboardImplementation)(text, options, state),
    state,
    releaseAllKeys: () => (0, _keyboardImplementation.releaseAllKeys)(options, state)
  };
}
function createKeyboardState() {
  return {
    activeElement: null,
    pressed: [],
    carryChar: '',
    modifiers: {
      alt: false,
      caps: false,
      ctrl: false,
      meta: false,
      shift: false
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImtleWJvYXJkIiwia2V5Ym9hcmRJbXBsZW1lbnRhdGlvbldyYXBwZXIiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX3NwZWNpYWxDaGFyTWFwIiwic3BlY2lhbENoYXJNYXAiLCJfZG9tIiwicmVxdWlyZSIsIl9rZXlib2FyZEltcGxlbWVudGF0aW9uIiwiX2tleU1hcCIsInRleHQiLCJvcHRpb25zIiwiX29wdGlvbnMkZGVsYXkiLCJwcm9taXNlIiwic3RhdGUiLCJkZWxheSIsImdldENvbmZpZyIsImFzeW5jV3JhcHBlciIsInRoZW4iLCJjYXRjaCIsImNvbnNvbGUiLCJlcnJvciIsImNvbmZpZyIsImtleWJvYXJkU3RhdGUiLCJjcmVhdGVLZXlib2FyZFN0YXRlIiwiZG9jdW1lbnQiLCJkb2MiLCJhdXRvTW9kaWZ5Iiwia2V5Ym9hcmRNYXAiLCJkZWZhdWx0S2V5TWFwIiwia2V5Ym9hcmRJbXBsZW1lbnRhdGlvbiIsInJlbGVhc2VBbGxLZXlzIiwiYWN0aXZlRWxlbWVudCIsInByZXNzZWQiLCJjYXJyeUNoYXIiLCJtb2RpZmllcnMiLCJhbHQiLCJjYXBzIiwiY3RybCIsIm1ldGEiLCJzaGlmdCJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5rZXlib2FyZCA9IGtleWJvYXJkO1xuZXhwb3J0cy5rZXlib2FyZEltcGxlbWVudGF0aW9uV3JhcHBlciA9IGtleWJvYXJkSW1wbGVtZW50YXRpb25XcmFwcGVyO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3BlY2lhbENoYXJNYXBcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3NwZWNpYWxDaGFyTWFwLnNwZWNpYWxDaGFyTWFwO1xuICB9XG59KTtcblxudmFyIF9kb20gPSByZXF1aXJlKFwiQHRlc3RpbmctbGlicmFyeS9kb21cIik7XG5cbnZhciBfa2V5Ym9hcmRJbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoXCIuL2tleWJvYXJkSW1wbGVtZW50YXRpb25cIik7XG5cbnZhciBfa2V5TWFwID0gcmVxdWlyZShcIi4va2V5TWFwXCIpO1xuXG52YXIgX3NwZWNpYWxDaGFyTWFwID0gcmVxdWlyZShcIi4vc3BlY2lhbENoYXJNYXBcIik7XG5cbmZ1bmN0aW9uIGtleWJvYXJkKHRleHQsIG9wdGlvbnMpIHtcbiAgdmFyIF9vcHRpb25zJGRlbGF5O1xuXG4gIGNvbnN0IHtcbiAgICBwcm9taXNlLFxuICAgIHN0YXRlXG4gIH0gPSBrZXlib2FyZEltcGxlbWVudGF0aW9uV3JhcHBlcih0ZXh0LCBvcHRpb25zKTtcblxuICBpZiAoKChfb3B0aW9ucyRkZWxheSA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZGVsYXkpICE9IG51bGwgPyBfb3B0aW9ucyRkZWxheSA6IDApID4gMCkge1xuICAgIHJldHVybiAoMCwgX2RvbS5nZXRDb25maWcpKCkuYXN5bmNXcmFwcGVyKCgpID0+IHByb21pc2UudGhlbigoKSA9PiBzdGF0ZSkpO1xuICB9IGVsc2Uge1xuICAgIC8vIHByZXZlbnQgdXNlcnMgZnJvbSBkZWFsaW5nIHdpdGggVW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbldhcm5pbmcgaW4gc3luYyBjYWxsXG4gICAgcHJvbWlzZS5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24ga2V5Ym9hcmRJbXBsZW1lbnRhdGlvbldyYXBwZXIodGV4dCwgY29uZmlnID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGtleWJvYXJkU3RhdGU6IHN0YXRlID0gY3JlYXRlS2V5Ym9hcmRTdGF0ZSgpLFxuICAgIGRlbGF5ID0gMCxcbiAgICBkb2N1bWVudDogZG9jID0gZG9jdW1lbnQsXG4gICAgYXV0b01vZGlmeSA9IGZhbHNlLFxuICAgIGtleWJvYXJkTWFwID0gX2tleU1hcC5kZWZhdWx0S2V5TWFwXG4gIH0gPSBjb25maWc7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgZGVsYXksXG4gICAgZG9jdW1lbnQ6IGRvYyxcbiAgICBhdXRvTW9kaWZ5LFxuICAgIGtleWJvYXJkTWFwXG4gIH07XG4gIHJldHVybiB7XG4gICAgcHJvbWlzZTogKDAsIF9rZXlib2FyZEltcGxlbWVudGF0aW9uLmtleWJvYXJkSW1wbGVtZW50YXRpb24pKHRleHQsIG9wdGlvbnMsIHN0YXRlKSxcbiAgICBzdGF0ZSxcbiAgICByZWxlYXNlQWxsS2V5czogKCkgPT4gKDAsIF9rZXlib2FyZEltcGxlbWVudGF0aW9uLnJlbGVhc2VBbGxLZXlzKShvcHRpb25zLCBzdGF0ZSlcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5Ym9hcmRTdGF0ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBhY3RpdmVFbGVtZW50OiBudWxsLFxuICAgIHByZXNzZWQ6IFtdLFxuICAgIGNhcnJ5Q2hhcjogJycsXG4gICAgbW9kaWZpZXJzOiB7XG4gICAgICBhbHQ6IGZhbHNlLFxuICAgICAgY2FwczogZmFsc2UsXG4gICAgICBjdHJsOiBmYWxzZSxcbiAgICAgIG1ldGE6IGZhbHNlLFxuICAgICAgc2hpZnQ6IGZhbHNlXG4gICAgfVxuICB9O1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLFFBQVEsR0FBR0EsUUFBUTtBQUMzQkYsT0FBTyxDQUFDRyw2QkFBNkIsR0FBR0EsNkJBQTZCO0FBQ3JFTCxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFO0VB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