a910657ec2da28bda0c34ab52049fae7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _formik = require("formik");
var _App = require("./../../App");
var _material = require("@mui/material");
var _NavigateNext = _interopRequireDefault(require("@mui/icons-material/NavigateNext"));
var _reactRouter = require("react-router");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Question3 = () => {
  const navigation = (0, _reactRouter.useNavigate)();
  const {
    score,
    setScore,
    trackScore,
    setTracker,
    selectedLanguage
  } = (0, _react.useContext)(_App.QuizContext);
  let questionText = "";
  let answersObject = [];
  if (selectedLanguage === "ReactJS") {
    questionText = "What is ReactJS?";
    answersObject = ["A framework", "A library of JavaScript"];
  } else if (selectedLanguage === "React Native") {
    questionText = "How is React Native different from React?";
    answersObject = ["React Native is used for web applications and ReactJS is used for mobile devices", "ReactJS is a framework while React Native is a library", "React JS is used for web applications and React Native is used for mobile devices", "Nothing, they are the same"];
  } else if (selectedLanguage === "Java") {
    questionText = "Java is 100% Object Oriented. True or False?";
    answersObject = ["True", "False"];
  }
  const [isSubmitted, setIsSubmitted] = (0, _react.useState)(false);
  const formik = (0, _formik.useFormik)({
    initialValues: {
      answer: ""
    },
    onSubmit: values => {
      if (selectedLanguage === "ReactJS") {
        if (values.answer === answersObject[1] && score < 3) {
          setScore(previous => previous + 1);
        }
      } else if (selectedLanguage === "React Native") {
        if (values.answer === answersObject[2] && score < 3) {
          setScore(previous => previous + 1);
        }
      } else if (selectedLanguage === "Java") {
        if (values.answer === answersObject[1] && score < 3) {
          setScore(previous => previous + 1);
        }
      }
      setIsSubmitted(true);
    }
  });
  const handleNavigation = () => {
    navigation("/question4");
  };
  const handleQuestionNavigation = index => {
    navigation(`/question${index}`);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
      sx: {
        display: "flex",
        gap: 1,
        flexDirection: "column",
        alignItems: "flex-end",
        p: 1,
        mt: "25vh",
        mr: 2
      },
      children: [1, 2, 3, 4, 5].map(number => /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.IconButton, {
        onClick: () => handleQuestionNavigation(number),
        sx: {
          border: 1,
          borderColor: "divider"
        },
        children: number
      }))
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "quiz-container",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
        sx: {
          display: "flex",
          justifyContent: "center",
          alignItems: "flex-start",
          flexDirection: "column",
          gap: 2
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex",
            flexDirection: "column",
            gap: 1
          },
          children: [trackScore && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Typography, {
            children: ["Score: ", score]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Button, {
            variant: "outlined",
            onClick: () => {
              setTracker(!trackScore);
            },
            children: trackScore ? "Disable Score Tracking" : "Enable Score Tracking"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            children: questionText
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.RadioGroup, {
          name: "answer",
          value: formik.values.answer,
          onChange: formik.handleChange,
          children: answersObject.map(option => /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.FormControlLabel, {
            value: option,
            control: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Radio, {}),
            label: option,
            disabled: isSubmitted
          }, option))
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex"
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Button, {
            variant: "contained",
            onClick: e => formik.handleSubmit(),
            disabled: isSubmitted,
            children: "Submit"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.IconButton, {
            onClick: handleNavigation,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_NavigateNext.default, {})
          })]
        })]
      })
    })]
  });
};
var _default = Question3;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZm9ybWlrIiwiX0FwcCIsIl9tYXRlcmlhbCIsIl9OYXZpZ2F0ZU5leHQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3JlYWN0Um91dGVyIiwiX2pzeFJ1bnRpbWUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiUXVlc3Rpb24zIiwibmF2aWdhdGlvbiIsInVzZU5hdmlnYXRlIiwic2NvcmUiLCJzZXRTY29yZSIsInRyYWNrU2NvcmUiLCJzZXRUcmFja2VyIiwic2VsZWN0ZWRMYW5ndWFnZSIsInVzZUNvbnRleHQiLCJRdWl6Q29udGV4dCIsInF1ZXN0aW9uVGV4dCIsImFuc3dlcnNPYmplY3QiLCJpc1N1Ym1pdHRlZCIsInNldElzU3VibWl0dGVkIiwidXNlU3RhdGUiLCJmb3JtaWsiLCJ1c2VGb3JtaWsiLCJpbml0aWFsVmFsdWVzIiwiYW5zd2VyIiwib25TdWJtaXQiLCJ2YWx1ZXMiLCJwcmV2aW91cyIsImhhbmRsZU5hdmlnYXRpb24iLCJoYW5kbGVRdWVzdGlvbk5hdmlnYXRpb24iLCJpbmRleCIsImpzeHMiLCJjaGlsZHJlbiIsImpzeCIsIkJveCIsInN4IiwiZGlzcGxheSIsImdhcCIsImZsZXhEaXJlY3Rpb24iLCJhbGlnbkl0ZW1zIiwicCIsIm10IiwibXIiLCJtYXAiLCJudW1iZXIiLCJJY29uQnV0dG9uIiwib25DbGljayIsImJvcmRlciIsImJvcmRlckNvbG9yIiwiY2xhc3NOYW1lIiwianVzdGlmeUNvbnRlbnQiLCJUeXBvZ3JhcGh5IiwiQnV0dG9uIiwidmFyaWFudCIsIlJhZGlvR3JvdXAiLCJuYW1lIiwidmFsdWUiLCJvbkNoYW5nZSIsImhhbmRsZUNoYW5nZSIsIm9wdGlvbiIsIkZvcm1Db250cm9sTGFiZWwiLCJjb250cm9sIiwiUmFkaW8iLCJsYWJlbCIsImRpc2FibGVkIiwiZSIsImhhbmRsZVN1Ym1pdCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlF1ZXN0aW9uMy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZUZvcm1payB9IGZyb20gXCJmb3JtaWtcIjtcclxuaW1wb3J0IHsgUXVpekNvbnRleHQgfSBmcm9tIFwiLi8uLi8uLi9BcHBcIjtcclxuaW1wb3J0IHtcclxuICBCb3gsXHJcbiAgQnV0dG9uLFxyXG4gIEZvcm1Db250cm9sTGFiZWwsXHJcbiAgSWNvbkJ1dHRvbixcclxuICBSYWRpbyxcclxuICBSYWRpb0dyb3VwLFxyXG4gIFR5cG9ncmFwaHksXHJcbn0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuaW1wb3J0IE5hdmlnYXRlTmV4dEljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvTmF2aWdhdGVOZXh0XCI7XHJcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5cclxuY29uc3QgUXVlc3Rpb24zID0gKCkgPT4ge1xyXG4gIGNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gIGNvbnN0IHsgc2NvcmUsIHNldFNjb3JlLCB0cmFja1Njb3JlLCBzZXRUcmFja2VyLCBzZWxlY3RlZExhbmd1YWdlIH0gPVxyXG4gICAgdXNlQ29udGV4dChRdWl6Q29udGV4dCk7XHJcbiAgbGV0IHF1ZXN0aW9uVGV4dDogc3RyaW5nID0gXCJcIjtcclxuICBsZXQgYW5zd2Vyc09iamVjdDogc3RyaW5nW10gPSBbXTtcclxuICBpZiAoc2VsZWN0ZWRMYW5ndWFnZSA9PT0gXCJSZWFjdEpTXCIpIHtcclxuICAgIHF1ZXN0aW9uVGV4dCA9IFwiV2hhdCBpcyBSZWFjdEpTP1wiO1xyXG4gICAgYW5zd2Vyc09iamVjdCA9IFtcIkEgZnJhbWV3b3JrXCIsIFwiQSBsaWJyYXJ5IG9mIEphdmFTY3JpcHRcIl07XHJcbiAgfSBlbHNlIGlmIChzZWxlY3RlZExhbmd1YWdlID09PSBcIlJlYWN0IE5hdGl2ZVwiKSB7XHJcbiAgICBxdWVzdGlvblRleHQgPSBcIkhvdyBpcyBSZWFjdCBOYXRpdmUgZGlmZmVyZW50IGZyb20gUmVhY3Q/XCI7XHJcbiAgICBhbnN3ZXJzT2JqZWN0ID0gW1xyXG4gICAgICBcIlJlYWN0IE5hdGl2ZSBpcyB1c2VkIGZvciB3ZWIgYXBwbGljYXRpb25zIGFuZCBSZWFjdEpTIGlzIHVzZWQgZm9yIG1vYmlsZSBkZXZpY2VzXCIsXHJcbiAgICAgIFwiUmVhY3RKUyBpcyBhIGZyYW1ld29yayB3aGlsZSBSZWFjdCBOYXRpdmUgaXMgYSBsaWJyYXJ5XCIsXHJcbiAgICAgIFwiUmVhY3QgSlMgaXMgdXNlZCBmb3Igd2ViIGFwcGxpY2F0aW9ucyBhbmQgUmVhY3QgTmF0aXZlIGlzIHVzZWQgZm9yIG1vYmlsZSBkZXZpY2VzXCIsXHJcbiAgICAgIFwiTm90aGluZywgdGhleSBhcmUgdGhlIHNhbWVcIixcclxuICAgIF07XHJcbiAgfSBlbHNlIGlmIChzZWxlY3RlZExhbmd1YWdlID09PSBcIkphdmFcIikge1xyXG4gICAgcXVlc3Rpb25UZXh0ID0gXCJKYXZhIGlzIDEwMCUgT2JqZWN0IE9yaWVudGVkLiBUcnVlIG9yIEZhbHNlP1wiO1xyXG4gICAgYW5zd2Vyc09iamVjdCA9IFtcIlRydWVcIiwgXCJGYWxzZVwiXTtcclxuICB9XHJcbiAgY29uc3QgW2lzU3VibWl0dGVkLCBzZXRJc1N1Ym1pdHRlZF0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcbiAgY29uc3QgZm9ybWlrID0gdXNlRm9ybWlrKHtcclxuICAgIGluaXRpYWxWYWx1ZXM6IHtcclxuICAgICAgYW5zd2VyOiBcIlwiLFxyXG4gICAgfSxcclxuICAgIG9uU3VibWl0OiAodmFsdWVzKSA9PiB7XHJcbiAgICAgIGlmIChzZWxlY3RlZExhbmd1YWdlID09PSBcIlJlYWN0SlNcIikge1xyXG4gICAgICAgIGlmICh2YWx1ZXMuYW5zd2VyID09PSBhbnN3ZXJzT2JqZWN0WzFdICYmIHNjb3JlIDwgMykge1xyXG4gICAgICAgICAgc2V0U2NvcmUoKHByZXZpb3VzKSA9PiBwcmV2aW91cyArIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChzZWxlY3RlZExhbmd1YWdlID09PSBcIlJlYWN0IE5hdGl2ZVwiKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlcy5hbnN3ZXIgPT09IGFuc3dlcnNPYmplY3RbMl0gJiYgc2NvcmUgPCAzKSB7XHJcbiAgICAgICAgICBzZXRTY29yZSgocHJldmlvdXMpID0+IHByZXZpb3VzICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHNlbGVjdGVkTGFuZ3VhZ2UgPT09IFwiSmF2YVwiKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlcy5hbnN3ZXIgPT09IGFuc3dlcnNPYmplY3RbMV0gJiYgc2NvcmUgPCAzKSB7XHJcbiAgICAgICAgICBzZXRTY29yZSgocHJldmlvdXMpID0+IHByZXZpb3VzICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHNldElzU3VibWl0dGVkKHRydWUpO1xyXG4gICAgfSxcclxuICB9KTtcclxuICBjb25zdCBoYW5kbGVOYXZpZ2F0aW9uID0gKCkgPT4ge1xyXG4gICAgbmF2aWdhdGlvbihcIi9xdWVzdGlvbjRcIik7XHJcbiAgfTtcclxuICBjb25zdCBoYW5kbGVRdWVzdGlvbk5hdmlnYXRpb24gPSAoaW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgbmF2aWdhdGlvbihgL3F1ZXN0aW9uJHtpbmRleH1gKTtcclxuICB9O1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlxyXG4gICAgICA8Qm94XHJcbiAgICAgICAgc3g9e3tcclxuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxyXG4gICAgICAgICAgZ2FwOiAxLFxyXG4gICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcclxuICAgICAgICAgIGFsaWduSXRlbXM6IFwiZmxleC1lbmRcIixcclxuICAgICAgICAgIHA6IDEsXHJcbiAgICAgICAgICBtdDogXCIyNXZoXCIsXHJcbiAgICAgICAgICBtcjogMixcclxuICAgICAgICB9fVxyXG4gICAgICA+XHJcbiAgICAgICAge1sxLCAyLCAzLCA0LCA1XS5tYXAoKG51bWJlcikgPT4gKFxyXG4gICAgICAgICAgPEljb25CdXR0b25cclxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlUXVlc3Rpb25OYXZpZ2F0aW9uKG51bWJlcil9XHJcbiAgICAgICAgICAgIHN4PXt7IGJvcmRlcjogMSwgYm9yZGVyQ29sb3I6IFwiZGl2aWRlclwiIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHtudW1iZXJ9XHJcbiAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgKSl9XHJcbiAgICAgIDwvQm94PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInF1aXotY29udGFpbmVyXCI+XHJcbiAgICAgICAgPEJveFxyXG4gICAgICAgICAgc3g9e3tcclxuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXHJcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxyXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImZsZXgtc3RhcnRcIixcclxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcclxuICAgICAgICAgICAgZ2FwOiAyLFxyXG4gICAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8Qm94IHN4PXt7IGRpc3BsYXk6IFwiZmxleFwiLCBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLCBnYXA6IDEgfX0+XHJcbiAgICAgICAgICAgIHt0cmFja1Njb3JlICYmIDxUeXBvZ3JhcGh5PlNjb3JlOiB7c2NvcmV9PC9UeXBvZ3JhcGh5Pn1cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXHJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0VHJhY2tlcighdHJhY2tTY29yZSk7XHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIHt0cmFja1Njb3JlID8gXCJEaXNhYmxlIFNjb3JlIFRyYWNraW5nXCIgOiBcIkVuYWJsZSBTY29yZSBUcmFja2luZ1wifVxyXG4gICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgICAgPEJveD5cclxuICAgICAgICAgICAgPFR5cG9ncmFwaHk+e3F1ZXN0aW9uVGV4dH08L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICA8L0JveD5cclxuICAgICAgICAgIDxSYWRpb0dyb3VwXHJcbiAgICAgICAgICAgIG5hbWU9XCJhbnN3ZXJcIlxyXG4gICAgICAgICAgICB2YWx1ZT17Zm9ybWlrLnZhbHVlcy5hbnN3ZXJ9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtmb3JtaWsuaGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICB7YW5zd2Vyc09iamVjdC5tYXAoKG9wdGlvbikgPT4gKFxyXG4gICAgICAgICAgICAgIDxGb3JtQ29udHJvbExhYmVsXHJcbiAgICAgICAgICAgICAgICBrZXk9e29wdGlvbn1cclxuICAgICAgICAgICAgICAgIHZhbHVlPXtvcHRpb259XHJcbiAgICAgICAgICAgICAgICBjb250cm9sPXs8UmFkaW8gLz59XHJcbiAgICAgICAgICAgICAgICBsYWJlbD17b3B0aW9ufVxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzU3VibWl0dGVkfVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgPC9SYWRpb0dyb3VwPlxyXG4gICAgICAgICAgPEJveCBzeD17eyBkaXNwbGF5OiBcImZsZXhcIiB9fT5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIHZhcmlhbnQ9XCJjb250YWluZWRcIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eyhlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50PikgPT5cclxuICAgICAgICAgICAgICAgIGZvcm1pay5oYW5kbGVTdWJtaXQoKVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBkaXNhYmxlZD17aXNTdWJtaXR0ZWR9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBTdWJtaXRcclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDxJY29uQnV0dG9uIG9uQ2xpY2s9e2hhbmRsZU5hdmlnYXRpb259PlxyXG4gICAgICAgICAgICAgIDxOYXZpZ2F0ZU5leHRJY29uIC8+XHJcbiAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cclxuICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgIDwvQm94PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBRdWVzdGlvbjM7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsSUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsU0FBQSxHQUFBSCxPQUFBO0FBU0Es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