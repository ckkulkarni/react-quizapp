7e59be9e6f10ab26a545c373177d2efd
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nativeTypesConfig = void 0;
var NativeTypes = _interopRequireWildcard(require("../NativeTypes.js"));
var _getDataFromDataTransfer = require("./getDataFromDataTransfer.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const nativeTypesConfig = {
  [NativeTypes.FILE]: {
    exposeProperties: {
      files: dataTransfer => Array.prototype.slice.call(dataTransfer.files),
      items: dataTransfer => dataTransfer.items,
      dataTransfer: dataTransfer => dataTransfer
    },
    matchesTypes: ['Files']
  },
  [NativeTypes.HTML]: {
    exposeProperties: {
      html: (dataTransfer, matchesTypes) => (0, _getDataFromDataTransfer.getDataFromDataTransfer)(dataTransfer, matchesTypes, ''),
      dataTransfer: dataTransfer => dataTransfer
    },
    matchesTypes: ['Html', 'text/html']
  },
  [NativeTypes.URL]: {
    exposeProperties: {
      urls: (dataTransfer, matchesTypes) => (0, _getDataFromDataTransfer.getDataFromDataTransfer)(dataTransfer, matchesTypes, '').split('\n'),
      dataTransfer: dataTransfer => dataTransfer
    },
    matchesTypes: ['Url', 'text/uri-list']
  },
  [NativeTypes.TEXT]: {
    exposeProperties: {
      text: (dataTransfer, matchesTypes) => (0, _getDataFromDataTransfer.getDataFromDataTransfer)(dataTransfer, matchesTypes, ''),
      dataTransfer: dataTransfer => dataTransfer
    },
    matchesTypes: ['Text', 'text/plain']
  }
};
exports.nativeTypesConfig = nativeTypesConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOYXRpdmVUeXBlcyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXREYXRhRnJvbURhdGFUcmFuc2ZlciIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJuYXRpdmVUeXBlc0NvbmZpZyIsIkZJTEUiLCJleHBvc2VQcm9wZXJ0aWVzIiwiZmlsZXMiLCJkYXRhVHJhbnNmZXIiLCJBcnJheSIsInNsaWNlIiwiaXRlbXMiLCJtYXRjaGVzVHlwZXMiLCJIVE1MIiwiaHRtbCIsImdldERhdGFGcm9tRGF0YVRyYW5zZmVyIiwiVVJMIiwidXJscyIsInNwbGl0IiwiVEVYVCIsInRleHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL05hdGl2ZURyYWdTb3VyY2VzL25hdGl2ZVR5cGVzQ29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE5hdGl2ZVR5cGVzIGZyb20gJy4uL05hdGl2ZVR5cGVzLmpzJ1xuaW1wb3J0IHsgZ2V0RGF0YUZyb21EYXRhVHJhbnNmZXIgfSBmcm9tICcuL2dldERhdGFGcm9tRGF0YVRyYW5zZmVyLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIE5hdGl2ZUl0ZW1Db25maWdFeHBvc2VQcm9wcmV0aWVzIHtcblx0W3Byb3BlcnR5OiBzdHJpbmddOiAoXG5cdFx0ZGF0YVRyYW5zZmVyOiBEYXRhVHJhbnNmZXIsXG5cdFx0bWF0Y2hlc1R5cGVzOiBzdHJpbmdbXSxcblx0KSA9PiBhbnlcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOYXRpdmVJdGVtQ29uZmlnIHtcblx0ZXhwb3NlUHJvcGVydGllczogTmF0aXZlSXRlbUNvbmZpZ0V4cG9zZVByb3ByZXRpZXNcblx0bWF0Y2hlc1R5cGVzOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgY29uc3QgbmF0aXZlVHlwZXNDb25maWc6IHtcblx0W2tleTogc3RyaW5nXTogTmF0aXZlSXRlbUNvbmZpZ1xufSA9IHtcblx0W05hdGl2ZVR5cGVzLkZJTEVdOiB7XG5cdFx0ZXhwb3NlUHJvcGVydGllczoge1xuXHRcdFx0ZmlsZXM6IChkYXRhVHJhbnNmZXI6IERhdGFUcmFuc2Zlcik6IEZpbGVbXSA9PlxuXHRcdFx0XHRBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkYXRhVHJhbnNmZXIuZmlsZXMpLFxuXHRcdFx0aXRlbXM6IChkYXRhVHJhbnNmZXI6IERhdGFUcmFuc2Zlcik6IERhdGFUcmFuc2Zlckl0ZW1MaXN0ID0+XG5cdFx0XHRcdGRhdGFUcmFuc2Zlci5pdGVtcyxcblx0XHRcdGRhdGFUcmFuc2ZlcjogKGRhdGFUcmFuc2ZlcjogRGF0YVRyYW5zZmVyKTogRGF0YVRyYW5zZmVyID0+IGRhdGFUcmFuc2Zlcixcblx0XHR9LFxuXHRcdG1hdGNoZXNUeXBlczogWydGaWxlcyddLFxuXHR9LFxuXHRbTmF0aXZlVHlwZXMuSFRNTF06IHtcblx0XHRleHBvc2VQcm9wZXJ0aWVzOiB7XG5cdFx0XHRodG1sOiAoZGF0YVRyYW5zZmVyOiBEYXRhVHJhbnNmZXIsIG1hdGNoZXNUeXBlczogc3RyaW5nW10pOiBzdHJpbmcgPT5cblx0XHRcdFx0Z2V0RGF0YUZyb21EYXRhVHJhbnNmZXIoZGF0YVRyYW5zZmVyLCBtYXRjaGVzVHlwZXMsICcnKSxcblx0XHRcdGRhdGFUcmFuc2ZlcjogKGRhdGFUcmFuc2ZlcjogRGF0YVRyYW5zZmVyKTogRGF0YVRyYW5zZmVyID0+IGRhdGFUcmFuc2Zlcixcblx0XHR9LFxuXHRcdG1hdGNoZXNUeXBlczogWydIdG1sJywgJ3RleHQvaHRtbCddLFxuXHR9LFxuXHRbTmF0aXZlVHlwZXMuVVJMXToge1xuXHRcdGV4cG9zZVByb3BlcnRpZXM6IHtcblx0XHRcdHVybHM6IChkYXRhVHJhbnNmZXI6IERhdGFUcmFuc2ZlciwgbWF0Y2hlc1R5cGVzOiBzdHJpbmdbXSk6IHN0cmluZ1tdID0+XG5cdFx0XHRcdGdldERhdGFGcm9tRGF0YVRyYW5zZmVyKGRhdGFUcmFuc2ZlciwgbWF0Y2hlc1R5cGVzLCAnJykuc3BsaXQoJ1xcbicpLFxuXHRcdFx0ZGF0YVRyYW5zZmVyOiAoZGF0YVRyYW5zZmVyOiBEYXRhVHJhbnNmZXIpOiBEYXRhVHJhbnNmZXIgPT4gZGF0YVRyYW5zZmVyLFxuXHRcdH0sXG5cdFx0bWF0Y2hlc1R5cGVzOiBbJ1VybCcsICd0ZXh0L3VyaS1saXN0J10sXG5cdH0sXG5cdFtOYXRpdmVUeXBlcy5URVhUXToge1xuXHRcdGV4cG9zZVByb3BlcnRpZXM6IHtcblx0XHRcdHRleHQ6IChkYXRhVHJhbnNmZXI6IERhdGFUcmFuc2ZlciwgbWF0Y2hlc1R5cGVzOiBzdHJpbmdbXSk6IHN0cmluZyA9PlxuXHRcdFx0XHRnZXREYXRhRnJvbURhdGFUcmFuc2ZlcihkYXRhVHJhbnNmZXIsIG1hdGNoZXNUeXBlcywgJycpLFxuXHRcdFx0ZGF0YVRyYW5zZmVyOiAoZGF0YVRyYW5zZmVyOiBEYXRhVHJhbnNmZXIpOiBEYXRhVHJhbnNmZXIgPT4gZGF0YVRyYW5zZmVyLFxuXHRcdH0sXG5cdFx0bWF0Y2hlc1R5cGVzOiBbJ1RleHQnLCAndGV4dC9wbGFpbiddLFxuXHR9LFxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxXQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyx3QkFBQSxHQUFBRCxPQUFBO0FBQXNFLFNBQUFFLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZ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