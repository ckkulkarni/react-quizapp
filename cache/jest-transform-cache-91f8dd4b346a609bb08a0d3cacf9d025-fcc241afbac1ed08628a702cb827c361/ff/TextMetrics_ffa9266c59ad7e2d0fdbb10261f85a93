859f305d733af3a0595dad848e879a84
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
class TextMetrics {
  constructor(text) {
    _defineProperty(this, "width", 0);
    _defineProperty(this, "actualBoundingBoxLeft", 0);
    _defineProperty(this, "actualBoundingBoxRight", 0);
    _defineProperty(this, "fontBoundingBoxAscent", 0);
    _defineProperty(this, "fontBoundingBoxDescent", 0);
    _defineProperty(this, "actualBoundingBoxAscent", 0);
    _defineProperty(this, "actualBoundingBoxDescent", 0);
    _defineProperty(this, "emHeightAscent", 0);
    _defineProperty(this, "emHeightDescent", 0);
    _defineProperty(this, "hangingBaseline", 0);
    _defineProperty(this, "alphabeticBaseline", 0);
    _defineProperty(this, "ideographicBaseline", 0);
    this.width = text.length;
  }
}
exports.default = TextMetrics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJfdG9Qcm9wZXJ0eUtleSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJUZXh0TWV0cmljcyIsImNvbnN0cnVjdG9yIiwidGV4dCIsIndpZHRoIiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiVGV4dE1ldHJpY3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIHR5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAodHlwZW9mIHJlcyAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9XG5jbGFzcyBUZXh0TWV0cmljcyB7XG4gIGNvbnN0cnVjdG9yKHRleHQpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ3aWR0aFwiLCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJhY3R1YWxCb3VuZGluZ0JveExlZnRcIiwgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiYWN0dWFsQm91bmRpbmdCb3hSaWdodFwiLCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJmb250Qm91bmRpbmdCb3hBc2NlbnRcIiwgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZm9udEJvdW5kaW5nQm94RGVzY2VudFwiLCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJhY3R1YWxCb3VuZGluZ0JveEFzY2VudFwiLCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJhY3R1YWxCb3VuZGluZ0JveERlc2NlbnRcIiwgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZW1IZWlnaHRBc2NlbnRcIiwgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZW1IZWlnaHREZXNjZW50XCIsIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImhhbmdpbmdCYXNlbGluZVwiLCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJhbHBoYWJldGljQmFzZWxpbmVcIiwgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaWRlb2dyYXBoaWNCYXNlbGluZVwiLCAwKTtcbiAgICB0aGlzLndpZHRoID0gdGV4dC5sZW5ndGg7XG4gIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFRleHRNZXRyaWNzOyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDeEIsU0FBU0MsZUFBZUEsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEVBQUVKLEtBQUssRUFBRTtFQUFFSSxHQUFHLEdBQUdDLGNBQWMsQ0FBQ0QsR0FBRyxDQUFDO0VBQUUsSUFBSUEsR0FBRyxJQUFJRCxHQUFHLEVBQUU7SUFBRU4sTUFBTSxDQUFDQyxjQUFjLENBQUNLLEdBQUcsRUFBRUMsR0FBRyxFQUFFO01BQUVKLEtBQUssRUFBRUEsS0FBSztNQUFFTSxVQUFVLEVBQUUsSUFBSTtNQUFFQyxZQUFZLEVBQUUsSUFBSTtNQUFFQyxRQUFRLEVBQUU7SUFBSyxDQUFDLENBQUM7RUFBRSxDQUFDLE1BQU07SUFBRUwsR0FBRyxDQUFDQyxHQUFHLENBQUMsR0FBR0osS0FBSztFQUFFO0VBQUUsT0FBT0csR0FBRztBQUFFO0FBQzNPLFNBQVNFLGNBQWNBLENBQUNJLEdBQUcsRUFBRTtFQUFFLElBQUlMLEdBQUcsR0FBR00sWUFBWSxDQUFDRCxHQUFHLEVBQUUsUUFBUSxDQUFDO0VBQUUsT0FBTyxPQUFPTCxHQUFHLEtBQUssUUFBUSxHQUFHQSxHQUFHLEdBQUdPLE1BQU0sQ0FBQ1AsR0FBRyxDQUFDO0FBQUU7QUFDMUgsU0FBU00sWUFBWUEsQ0FBQ0UsS0FBSyxFQUFFQyxJQUFJLEVBQUU7RUFBRSxJQUFJLE9BQU9ELEtBQUssS0FBSyxRQUFRLElBQUlBLEtBQUssS0FBSyxJQUFJLEVBQUUsT0FBT0EsS0FBSztFQUFFLElBQUlFLElBQUksR0FBR0YsS0FBSyxDQUFDRyxNQUFNLENBQUNDLFdBQVcsQ0FBQztFQUFFLElBQUlGLElBQUksS0FBS0csU0FBUyxFQUFFO0lBQUUsSUFBSUMsR0FBRyxHQUFHSixJQUFJLENBQUNLLElBQUksQ0FBQ1AsS0FBSyxFQUFFQyxJQUFJLElBQUksU0FBUyxDQUFDO0lBQUUsSUFBSSxPQUFPSyxHQUFHLEtBQUssUUFBUSxFQUFFLE9BQU9BLEdBQUc7SUFBRSxNQUFNLElBQUlFLFNBQVMsQ0FBQyw4Q0FBOEMsQ0FBQztFQUFFO0VBQUUsT0FBTyxDQUFDUCxJQUFJLEtBQUssUUFBUSxHQUFHRixNQUFNLEdBQUdVLE1BQU0sRUFBRVQsS0FBSyxDQUFDO0FBQUU7QUFDeFgsTUFBTVUsV0FBVyxDQUFDO0VBQ2hCQyxXQUFXQSxDQUFDQyxJQUFJLEVBQUU7SUFDaEJ0QixlQUFlLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDakNBLGVBQWUsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO0lBQ2pEQSxlQUFlLENBQUMsSUFBSSxFQUFFLHdCQUF3QixFQUFFLENBQUMsQ0FBQztJQUNsREEsZUFBZSxDQUFDLElBQUksRUFBRSx1QkFBdUIsRUFBRSxDQUFDLENBQUM7SUFDakRBLGVBQWUsQ0FBQyxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDO0lBQ2xEQSxlQUFlLENBQUMsSUFBSSxFQUFFLHlCQUF5QixFQUFFLENBQUMsQ0FBQztJQUNuREEsZUFBZSxDQUFDLElBQUksRUFBRSwwQkFBMEIsRUFBRSxDQUFDLENBQUM7SUFDcERBLGVBQWUsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQzFDQSxlQUFlLENBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFLENBQUMsQ0FBQztJQUMzQ0EsZUFBZSxDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFDM0NBLGVBQWUsQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0lBQzlDQSxlQUFlLENBQUMsSUFBSSxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQztJQUMvQyxJQUFJLENBQUN1QixLQUFLLEdBQUdELElBQUksQ0FBQ0UsTUFBTTtFQUMxQjtBQUNGO0FBQ0EzQixPQUFPLENBQUNFLE9BQU8sR0FBR3FCLFdBQVcifQ==