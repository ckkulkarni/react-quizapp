a86568b78149128bdab41d089a0851ec
'use strict';

var ArraySpeciesCreate = require('es-abstract/2022/ArraySpeciesCreate');
var Call = require('es-abstract/2022/Call');
var CreateDataPropertyOrThrow = require('es-abstract/2022/CreateDataPropertyOrThrow');
var Get = require('es-abstract/2022/Get');
var HasProperty = require('es-abstract/2022/HasProperty');
var IsCallable = require('es-abstract/2022/IsCallable');
var LengthOfArrayLike = require('es-abstract/2022/LengthOfArrayLike');
var ToBoolean = require('es-abstract/2022/ToBoolean');
var ToObject = require('es-abstract/2022/ToObject');
var ToString = require('es-abstract/2022/ToString');
var callBound = require('call-bind/callBound');
var isString = require('is-string');

// Check failure of by-index access of string characters (IE < 9) and failure of `0 in boxedString` (Rhino)
var boxedString = Object('a');
var splitString = boxedString[0] !== 'a' || !(0 in boxedString);
var strSplit = callBound('String.prototype.split');
module.exports = function filter(callbackfn) {
  var O = ToObject(this);
  var self = splitString && isString(O) ? strSplit(O, '') : O;
  var len = LengthOfArrayLike(self);

  // If no callback function or if callback is not a callable function
  if (!IsCallable(callbackfn)) {
    throw new TypeError('Array.prototype.filter callback must be a function');
  }
  var thisArg;
  if (arguments.length > 1) {
    thisArg = arguments[1];
  }
  var A = ArraySpeciesCreate(O, 0);
  var k = 0;
  var to = 0;
  while (k < len) {
    var Pk = ToString(k);
    var kPresent = HasProperty(O, Pk);
    if (kPresent) {
      var kValue = Get(O, Pk);
      var selected = ToBoolean(Call(callbackfn, thisArg, [kValue, k, O]));
      if (selected) {
        CreateDataPropertyOrThrow(A, ToString(to), kValue);
        to += 1;
      }
    }
    k += 1;
  }
  return A;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBcnJheVNwZWNpZXNDcmVhdGUiLCJyZXF1aXJlIiwiQ2FsbCIsIkNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3ciLCJHZXQiLCJIYXNQcm9wZXJ0eSIsIklzQ2FsbGFibGUiLCJMZW5ndGhPZkFycmF5TGlrZSIsIlRvQm9vbGVhbiIsIlRvT2JqZWN0IiwiVG9TdHJpbmciLCJjYWxsQm91bmQiLCJpc1N0cmluZyIsImJveGVkU3RyaW5nIiwiT2JqZWN0Iiwic3BsaXRTdHJpbmciLCJzdHJTcGxpdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJmaWx0ZXIiLCJjYWxsYmFja2ZuIiwiTyIsInNlbGYiLCJsZW4iLCJUeXBlRXJyb3IiLCJ0aGlzQXJnIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiQSIsImsiLCJ0byIsIlBrIiwia1ByZXNlbnQiLCJrVmFsdWUiLCJzZWxlY3RlZCJdLCJzb3VyY2VzIjpbImltcGxlbWVudGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMjIvQXJyYXlTcGVjaWVzQ3JlYXRlJyk7XG52YXIgQ2FsbCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMjIvQ2FsbCcpO1xudmFyIENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDIyL0NyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cnKTtcbnZhciBHZXQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDIyL0dldCcpO1xudmFyIEhhc1Byb3BlcnR5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAyMi9IYXNQcm9wZXJ0eScpO1xudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDIyL0lzQ2FsbGFibGUnKTtcbnZhciBMZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMjIvTGVuZ3RoT2ZBcnJheUxpa2UnKTtcbnZhciBUb0Jvb2xlYW4gPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDIyL1RvQm9vbGVhbicpO1xudmFyIFRvT2JqZWN0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAyMi9Ub09iamVjdCcpO1xudmFyIFRvU3RyaW5nID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAyMi9Ub1N0cmluZycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciBpc1N0cmluZyA9IHJlcXVpcmUoJ2lzLXN0cmluZycpO1xuXG4vLyBDaGVjayBmYWlsdXJlIG9mIGJ5LWluZGV4IGFjY2VzcyBvZiBzdHJpbmcgY2hhcmFjdGVycyAoSUUgPCA5KSBhbmQgZmFpbHVyZSBvZiBgMCBpbiBib3hlZFN0cmluZ2AgKFJoaW5vKVxudmFyIGJveGVkU3RyaW5nID0gT2JqZWN0KCdhJyk7XG52YXIgc3BsaXRTdHJpbmcgPSBib3hlZFN0cmluZ1swXSAhPT0gJ2EnIHx8ICEoMCBpbiBib3hlZFN0cmluZyk7XG5cbnZhciBzdHJTcGxpdCA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zcGxpdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuKSB7XG5cdHZhciBPID0gVG9PYmplY3QodGhpcyk7XG5cdHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcoTykgPyBzdHJTcGxpdChPLCAnJykgOiBPO1xuXHR2YXIgbGVuID0gTGVuZ3RoT2ZBcnJheUxpa2Uoc2VsZik7XG5cblx0Ly8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cblx0aWYgKCFJc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLmZpbHRlciBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0fVxuXG5cdHZhciB0aGlzQXJnO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHR0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xuXHR9XG5cblx0dmFyIEEgPSBBcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG5cdHZhciBrID0gMDtcblx0dmFyIHRvID0gMDtcblxuXHR3aGlsZSAoayA8IGxlbikge1xuXHRcdHZhciBQayA9IFRvU3RyaW5nKGspO1xuXHRcdHZhciBrUHJlc2VudCA9IEhhc1Byb3BlcnR5KE8sIFBrKTtcblx0XHRpZiAoa1ByZXNlbnQpIHtcblx0XHRcdHZhciBrVmFsdWUgPSBHZXQoTywgUGspO1xuXHRcdFx0dmFyIHNlbGVjdGVkID0gVG9Cb29sZWFuKENhbGwoY2FsbGJhY2tmbiwgdGhpc0FyZywgW2tWYWx1ZSwgaywgT10pKTtcblx0XHRcdGlmIChzZWxlY3RlZCkge1xuXHRcdFx0XHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KEEsIFRvU3RyaW5nKHRvKSwga1ZhbHVlKTtcblx0XHRcdFx0dG8gKz0gMTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ayArPSAxO1xuXHR9XG5cblx0cmV0dXJuIEE7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLGtCQUFrQixHQUFHQyxPQUFPLENBQUMscUNBQXFDLENBQUM7QUFDdkUsSUFBSUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFDM0MsSUFBSUUseUJBQXlCLEdBQUdGLE9BQU8sQ0FBQyw0Q0FBNEMsQ0FBQztBQUNyRixJQUFJRyxHQUFHLEdBQUdILE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUN6QyxJQUFJSSxXQUFXLEdBQUdKLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztBQUN6RCxJQUFJSyxVQUFVLEdBQUdMLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQztBQUN2RCxJQUFJTSxpQkFBaUIsR0FBR04sT0FBTyxDQUFDLG9DQUFvQyxDQUFDO0FBQ3JFLElBQUlPLFNBQVMsR0FBR1AsT0FBTyxDQUFDLDRCQUE0QixDQUFDO0FBQ3JELElBQUlRLFFBQVEsR0FBR1IsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ25ELElBQUlTLFFBQVEsR0FBR1QsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ25ELElBQUlVLFNBQVMsR0FBR1YsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FBQzlDLElBQUlXLFFBQVEsR0FBR1gsT0FBTyxDQUFDLFdBQVcsQ0FBQzs7QUFFbkM7QUFDQSxJQUFJWSxXQUFXLEdBQUdDLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDN0IsSUFBSUMsV0FBVyxHQUFHRixXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLEVBQUUsQ0FBQyxJQUFJQSxXQUFXLENBQUM7QUFFL0QsSUFBSUcsUUFBUSxHQUFHTCxTQUFTLENBQUMsd0JBQXdCLENBQUM7QUFFbERNLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLE1BQU1BLENBQUNDLFVBQVUsRUFBRTtFQUM1QyxJQUFJQyxDQUFDLEdBQUdaLFFBQVEsQ0FBQyxJQUFJLENBQUM7RUFDdEIsSUFBSWEsSUFBSSxHQUFHUCxXQUFXLElBQUlILFFBQVEsQ0FBQ1MsQ0FBQyxDQUFDLEdBQUdMLFFBQVEsQ0FBQ0ssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHQSxDQUFDO0VBQzNELElBQUlFLEdBQUcsR0FBR2hCLGlCQUFpQixDQUFDZSxJQUFJLENBQUM7O0VBRWpDO0VBQ0EsSUFBSSxDQUFDaEIsVUFBVSxDQUFDYyxVQUFVLENBQUMsRUFBRTtJQUM1QixNQUFNLElBQUlJLFNBQVMsQ0FBQyxvREFBb0QsQ0FBQztFQUMxRTtFQUVBLElBQUlDLE9BQU87RUFDWCxJQUFJQyxTQUFTLENBQUNDLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDekJGLE9BQU8sR0FBR0MsU0FBUyxDQUFDLENBQUMsQ0FBQztFQUN2QjtFQUVBLElBQUlFLENBQUMsR0FBRzVCLGtCQUFrQixDQUFDcUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNoQyxJQUFJUSxDQUFDLEdBQUcsQ0FBQztFQUNULElBQUlDLEVBQUUsR0FBRyxDQUFDO0VBRVYsT0FBT0QsQ0FBQyxHQUFHTixHQUFHLEVBQUU7SUFDZixJQUFJUSxFQUFFLEdBQUdyQixRQUFRLENBQUNtQixDQUFDLENBQUM7SUFDcEIsSUFBSUcsUUFBUSxHQUFHM0IsV0FBVyxDQUFDZ0IsQ0FBQyxFQUFFVSxFQUFFLENBQUM7SUFDakMsSUFBSUMsUUFBUSxFQUFFO01BQ2IsSUFBSUMsTUFBTSxHQUFHN0IsR0FBRyxDQUFDaUIsQ0FBQyxFQUFFVSxFQUFFLENBQUM7TUFDdkIsSUFBSUcsUUFBUSxHQUFHMUIsU0FBUyxDQUFDTixJQUFJLENBQUNrQixVQUFVLEVBQUVLLE9BQU8sRUFBRSxDQUFDUSxNQUFNLEVBQUVKLENBQUMsRUFBRVIsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUNuRSxJQUFJYSxRQUFRLEVBQUU7UUFDYi9CLHlCQUF5QixDQUFDeUIsQ0FBQyxFQUFFbEIsUUFBUSxDQUFDb0IsRUFBRSxDQUFDLEVBQUVHLE1BQU0sQ0FBQztRQUNsREgsRUFBRSxJQUFJLENBQUM7TUFDUjtJQUNEO0lBQ0FELENBQUMsSUFBSSxDQUFDO0VBQ1A7RUFFQSxPQUFPRCxDQUFDO0FBQ1QsQ0FBQyJ9