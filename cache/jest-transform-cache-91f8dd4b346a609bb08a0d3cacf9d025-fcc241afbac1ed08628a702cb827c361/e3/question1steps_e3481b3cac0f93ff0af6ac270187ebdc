4c8b46cddf3cf4bb89695ada4e596379
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRouterDom = require("react-router-dom");
var _Question = _interopRequireDefault(require("../../questions/Question1"));
var _Question2 = _interopRequireDefault(require("../../questions/Question2"));
var _App = require("../../../App");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/question1.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    document.body.innerHTML = "";
  });
  test("User answers first quiz question correctly", ({
    given,
    when,
    then
  }) => {
    const mockQuizContext = {
      score: 0,
      setScore: jest.fn(),
      name: "chandu",
      setName: jest.fn(),
      age: 0,
      setAge: jest.fn(),
      email: "chandra@chandu.com",
      setMail: jest.fn(),
      phoneNumber: "1234567890",
      setPhone: jest.fn(),
      selectedLanguage: "ReactJS",
      setSelector: jest.fn(),
      trackScore: false,
      setTracker: jest.fn()
    };
    given("I am on the Question 1 screen", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_App.QuizContext.Provider, {
        value: mockQuizContext,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactRouterDom.Routes, {
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
              path: "/",
              element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Question.default, {})
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
              path: "/question2",
              element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Question2.default, {})
            })]
          })
        })
      }));
      expect(screen).toBeTruthy();
      const questionText = screen.getByText("What is the extension used for TypeScript in ReactJS?");
      expect(questionText).toBeTruthy();
    });
    when('I select the correct answer and press "Answer", then the score should update, and disable the answer button', async () => {
      const correctAnswer = _react2.screen.getByRole("radio", {
        name: ".tsx"
      });
      expect(correctAnswer).toBeTruthy();
      expect(correctAnswer).not.toBeChecked();
      _react2.fireEvent.click(correctAnswer);
      expect(correctAnswer).toBeChecked();
      const answerButton = _react2.screen.getByRole("button", {
        name: "Submit"
      });
      expect(answerButton).toBeTruthy();
      _react2.fireEvent.click(answerButton);
      await (0, _react2.waitFor)(() => {
        expect(mockQuizContext.setScore).toBeCalled();
        expect(answerButton).toBeDisabled();
      });
    });
    then('I navigate to the next question when I click on the "Next Question" button', () => {
      // const questionNumberButtons = screen
      //   .getAllByRole("button")
      //   .filter(
      //     (button) => button.textContent && /^\d+$/.test(button.textContent)
      //   );
      // expect(questionNumberButtons[0]).toBeTruthy();
      // expect(questionNumberButtons[1]).toBeTruthy();
      // expect(questionNumberButtons[2]).toBeTruthy();
      // expect(questionNumberButtons[3]).toBeTruthy();
      // expect(questionNumberButtons[4]).toBeTruthy();
      // fireEvent.click(questionNumberButtons[1]);
      const nextQuestionButton = _react2.screen.getByRole("button", {
        name: "next-question"
      });
      expect(nextQuestionButton).toBeTruthy();
      _react2.fireEvent.click(nextQuestionButton);
      expect(window.location.pathname).toEqual("/question2");
    });
  });
  test("User answers first quiz question incorrectly", ({
    given,
    when,
    then
  }) => {
    const mockQuizContext = {
      score: 0,
      setScore: jest.fn(),
      name: "chandu",
      setName: jest.fn(),
      age: 0,
      setAge: jest.fn(),
      email: "chandra@chandu.com",
      setMail: jest.fn(),
      phoneNumber: "1234567890",
      setPhone: jest.fn(),
      selectedLanguage: "ReactJS",
      setSelector: jest.fn(),
      trackScore: false,
      setTracker: jest.fn()
    };
    given("I am on the Question 1 screen", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_App.QuizContext.Provider, {
        value: mockQuizContext,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactRouterDom.Routes, {
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
              path: "/",
              element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Question.default, {})
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
              path: "/question2",
              element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Question2.default, {})
            })]
          })
        })
      }));
      expect(screen).toBeTruthy();
      const questionNumberButtons = screen.getAllByRole("button").filter(button => button.textContent && /^\d+$/.test(button.textContent));
      expect(questionNumberButtons[0]).toBeTruthy();
      expect(questionNumberButtons[1]).toBeTruthy();
      expect(questionNumberButtons[2]).toBeTruthy();
      expect(questionNumberButtons[3]).toBeTruthy();
      expect(questionNumberButtons[4]).toBeTruthy();
      _react2.fireEvent.click(questionNumberButtons[0]);
      const questionText = screen.getByText("Which of these packages that are used to install React and create React Apps?");
      expect(questionText).toBeTruthy();
    });
    when('I select an incorrect answer and press "Answer", then the score should remain the same', () => {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,