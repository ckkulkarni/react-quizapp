c7bf96fa85e5411333a9dded27c4cdf5
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $TypeError = GetIntrinsic('%TypeError%');
var isPropertyDescriptor = require('../helpers/isPropertyDescriptor');
var DefineOwnProperty = require('../helpers/DefineOwnProperty');
var FromPropertyDescriptor = require('./FromPropertyDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsPropertyKey = require('./IsPropertyKey');
var SameValue = require('./SameValue');
var ToPropertyDescriptor = require('./ToPropertyDescriptor');
var Type = require('./Type');

// https://ecma-international.org/ecma-262/6.0/#sec-definepropertyorthrow

module.exports = function DefinePropertyOrThrow(O, P, desc) {
  if (Type(O) !== 'Object') {
    throw new $TypeError('Assertion failed: Type(O) is not Object');
  }
  if (!IsPropertyKey(P)) {
    throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');
  }
  var Desc = isPropertyDescriptor({
    Type: Type,
    IsDataDescriptor: IsDataDescriptor,
    IsAccessorDescriptor: IsAccessorDescriptor
  }, desc) ? desc : ToPropertyDescriptor(desc);
  if (!isPropertyDescriptor({
    Type: Type,
    IsDataDescriptor: IsDataDescriptor,
    IsAccessorDescriptor: IsAccessorDescriptor
  }, Desc)) {
    throw new $TypeError('Assertion failed: Desc is not a valid Property Descriptor');
  }
  return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, Desc);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsImlzUHJvcGVydHlEZXNjcmlwdG9yIiwiRGVmaW5lT3duUHJvcGVydHkiLCJGcm9tUHJvcGVydHlEZXNjcmlwdG9yIiwiSXNBY2Nlc3NvckRlc2NyaXB0b3IiLCJJc0RhdGFEZXNjcmlwdG9yIiwiSXNQcm9wZXJ0eUtleSIsIlNhbWVWYWx1ZSIsIlRvUHJvcGVydHlEZXNjcmlwdG9yIiwiVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJEZWZpbmVQcm9wZXJ0eU9yVGhyb3ciLCJPIiwiUCIsImRlc2MiLCJEZXNjIl0sInNvdXJjZXMiOlsiRGVmaW5lUHJvcGVydHlPclRocm93LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBpc1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNQcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBEZWZpbmVPd25Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvRGVmaW5lT3duUHJvcGVydHknKTtcblxudmFyIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0Zyb21Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBJc0FjY2Vzc29yRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vSXNBY2Nlc3NvckRlc2NyaXB0b3InKTtcbnZhciBJc0RhdGFEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Jc0RhdGFEZXNjcmlwdG9yJyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIFNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vU2FtZVZhbHVlJyk7XG52YXIgVG9Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL1RvUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZGVmaW5lcHJvcGVydHlvcnRocm93XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gRGVmaW5lUHJvcGVydHlPclRocm93KE8sIFAsIGRlc2MpIHtcblx0aWYgKFR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHR9XG5cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0fVxuXG5cdHZhciBEZXNjID0gaXNQcm9wZXJ0eURlc2NyaXB0b3Ioe1xuXHRcdFR5cGU6IFR5cGUsXG5cdFx0SXNEYXRhRGVzY3JpcHRvcjogSXNEYXRhRGVzY3JpcHRvcixcblx0XHRJc0FjY2Vzc29yRGVzY3JpcHRvcjogSXNBY2Nlc3NvckRlc2NyaXB0b3Jcblx0fSwgZGVzYykgPyBkZXNjIDogVG9Qcm9wZXJ0eURlc2NyaXB0b3IoZGVzYyk7XG5cdGlmICghaXNQcm9wZXJ0eURlc2NyaXB0b3Ioe1xuXHRcdFR5cGU6IFR5cGUsXG5cdFx0SXNEYXRhRGVzY3JpcHRvcjogSXNEYXRhRGVzY3JpcHRvcixcblx0XHRJc0FjY2Vzc29yRGVzY3JpcHRvcjogSXNBY2Nlc3NvckRlc2NyaXB0b3Jcblx0fSwgRGVzYykpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogRGVzYyBpcyBub3QgYSB2YWxpZCBQcm9wZXJ0eSBEZXNjcmlwdG9yJyk7XG5cdH1cblxuXHRyZXR1cm4gRGVmaW5lT3duUHJvcGVydHkoXG5cdFx0SXNEYXRhRGVzY3JpcHRvcixcblx0XHRTYW1lVmFsdWUsXG5cdFx0RnJvbVByb3BlcnR5RGVzY3JpcHRvcixcblx0XHRPLFxuXHRcdFAsXG5cdFx0RGVzY1xuXHQpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFFM0MsSUFBSUMsVUFBVSxHQUFHRixZQUFZLENBQUMsYUFBYSxDQUFDO0FBRTVDLElBQUlHLG9CQUFvQixHQUFHRixPQUFPLENBQUMsaUNBQWlDLENBQUM7QUFDckUsSUFBSUcsaUJBQWlCLEdBQUdILE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQztBQUUvRCxJQUFJSSxzQkFBc0IsR0FBR0osT0FBTyxDQUFDLDBCQUEwQixDQUFDO0FBQ2hFLElBQUlLLG9CQUFvQixHQUFHTCxPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFDNUQsSUFBSU0sZ0JBQWdCLEdBQUdOLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUNwRCxJQUFJTyxhQUFhLEdBQUdQLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUM5QyxJQUFJUSxTQUFTLEdBQUdSLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDdEMsSUFBSVMsb0JBQW9CLEdBQUdULE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztBQUM1RCxJQUFJVSxJQUFJLEdBQUdWLE9BQU8sQ0FBQyxRQUFRLENBQUM7O0FBRTVCOztBQUVBVyxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxxQkFBcUJBLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxJQUFJLEVBQUU7RUFDM0QsSUFBSU4sSUFBSSxDQUFDSSxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7SUFDekIsTUFBTSxJQUFJYixVQUFVLENBQUMseUNBQXlDLENBQUM7RUFDaEU7RUFFQSxJQUFJLENBQUNNLGFBQWEsQ0FBQ1EsQ0FBQyxDQUFDLEVBQUU7SUFDdEIsTUFBTSxJQUFJZCxVQUFVLENBQUMsZ0RBQWdELENBQUM7RUFDdkU7RUFFQSxJQUFJZ0IsSUFBSSxHQUFHZixvQkFBb0IsQ0FBQztJQUMvQlEsSUFBSSxFQUFFQSxJQUFJO0lBQ1ZKLGdCQUFnQixFQUFFQSxnQkFBZ0I7SUFDbENELG9CQUFvQixFQUFFQTtFQUN2QixDQUFDLEVBQUVXLElBQUksQ0FBQyxHQUFHQSxJQUFJLEdBQUdQLG9CQUFvQixDQUFDTyxJQUFJLENBQUM7RUFDNUMsSUFBSSxDQUFDZCxvQkFBb0IsQ0FBQztJQUN6QlEsSUFBSSxFQUFFQSxJQUFJO0lBQ1ZKLGdCQUFnQixFQUFFQSxnQkFBZ0I7SUFDbENELG9CQUFvQixFQUFFQTtFQUN2QixDQUFDLEVBQUVZLElBQUksQ0FBQyxFQUFFO0lBQ1QsTUFBTSxJQUFJaEIsVUFBVSxDQUFDLDJEQUEyRCxDQUFDO0VBQ2xGO0VBRUEsT0FBT0UsaUJBQWlCLENBQ3ZCRyxnQkFBZ0IsRUFDaEJFLFNBQVMsRUFDVEosc0JBQXNCLEVBQ3RCVSxDQUFDLEVBQ0RDLENBQUMsRUFDREUsSUFBSSxDQUNKO0FBQ0YsQ0FBQyJ9