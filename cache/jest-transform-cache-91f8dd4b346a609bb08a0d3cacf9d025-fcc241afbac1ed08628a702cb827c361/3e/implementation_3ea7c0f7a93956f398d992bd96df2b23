5ac6cb9eb6a46e7bdf1d336abaa5e634
'use strict';

var IsCallable = require('es-abstract/2021/IsCallable');
var functionsHaveNames = require('functions-have-names')();
var callBound = require('call-bind/callBound');
var $functionToString = callBound('Function.prototype.toString');
var $stringMatch = callBound('String.prototype.match');
var classRegex = /^class /;
var isClass = function isClassConstructor(fn) {
  if (IsCallable(fn)) {
    return false;
  }
  if (typeof fn !== 'function') {
    return false;
  }
  try {
    var match = $stringMatch($functionToString(fn), classRegex);
    return !!match;
  } catch (e) {}
  return false;
};
var regex = /\s*function\s+([^(\s]*)\s*/;
var functionProto = Function.prototype;
module.exports = function getName() {
  if (!isClass(this) && !IsCallable(this)) {
    throw new TypeError('Function.prototype.name sham getter called on non-function');
  }
  if (functionsHaveNames) {
    return this.name;
  }
  if (this === functionProto) {
    return '';
  }
  var str = $functionToString(this);
  var match = $stringMatch(str, regex);
  var name = match && match[1];
  return name;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJc0NhbGxhYmxlIiwicmVxdWlyZSIsImZ1bmN0aW9uc0hhdmVOYW1lcyIsImNhbGxCb3VuZCIsIiRmdW5jdGlvblRvU3RyaW5nIiwiJHN0cmluZ01hdGNoIiwiY2xhc3NSZWdleCIsImlzQ2xhc3MiLCJpc0NsYXNzQ29uc3RydWN0b3IiLCJmbiIsIm1hdGNoIiwiZSIsInJlZ2V4IiwiZnVuY3Rpb25Qcm90byIsIkZ1bmN0aW9uIiwicHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsImdldE5hbWUiLCJUeXBlRXJyb3IiLCJuYW1lIiwic3RyIl0sInNvdXJjZXMiOlsiaW1wbGVtZW50YXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMjEvSXNDYWxsYWJsZScpO1xudmFyIGZ1bmN0aW9uc0hhdmVOYW1lcyA9IHJlcXVpcmUoJ2Z1bmN0aW9ucy1oYXZlLW5hbWVzJykoKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgJGZ1bmN0aW9uVG9TdHJpbmcgPSBjYWxsQm91bmQoJ0Z1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZycpO1xudmFyICRzdHJpbmdNYXRjaCA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5tYXRjaCcpO1xuXG52YXIgY2xhc3NSZWdleCA9IC9eY2xhc3MgLztcblxudmFyIGlzQ2xhc3MgPSBmdW5jdGlvbiBpc0NsYXNzQ29uc3RydWN0b3IoZm4pIHtcblx0aWYgKElzQ2FsbGFibGUoZm4pKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dHJ5IHtcblx0XHR2YXIgbWF0Y2ggPSAkc3RyaW5nTWF0Y2goJGZ1bmN0aW9uVG9TdHJpbmcoZm4pLCBjbGFzc1JlZ2V4KTtcblx0XHRyZXR1cm4gISFtYXRjaDtcblx0fSBjYXRjaCAoZSkge31cblx0cmV0dXJuIGZhbHNlO1xufTtcblxudmFyIHJlZ2V4ID0gL1xccypmdW5jdGlvblxccysoW14oXFxzXSopXFxzKi87XG5cbnZhciBmdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE5hbWUoKSB7XG5cdGlmICghaXNDbGFzcyh0aGlzKSAmJiAhSXNDYWxsYWJsZSh0aGlzKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uLnByb3RvdHlwZS5uYW1lIHNoYW0gZ2V0dGVyIGNhbGxlZCBvbiBub24tZnVuY3Rpb24nKTtcblx0fVxuXHRpZiAoZnVuY3Rpb25zSGF2ZU5hbWVzKSB7XG5cdFx0cmV0dXJuIHRoaXMubmFtZTtcblx0fVxuXHRpZiAodGhpcyA9PT0gZnVuY3Rpb25Qcm90bykge1xuXHRcdHJldHVybiAnJztcblx0fVxuXHR2YXIgc3RyID0gJGZ1bmN0aW9uVG9TdHJpbmcodGhpcyk7XG5cdHZhciBtYXRjaCA9ICRzdHJpbmdNYXRjaChzdHIsIHJlZ2V4KTtcblx0dmFyIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcblx0cmV0dXJuIG5hbWU7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLFVBQVUsR0FBR0MsT0FBTyxDQUFDLDZCQUE2QixDQUFDO0FBQ3ZELElBQUlDLGtCQUFrQixHQUFHRCxPQUFPLENBQUMsc0JBQXNCLENBQUMsRUFBRTtBQUMxRCxJQUFJRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUM5QyxJQUFJRyxpQkFBaUIsR0FBR0QsU0FBUyxDQUFDLDZCQUE2QixDQUFDO0FBQ2hFLElBQUlFLFlBQVksR0FBR0YsU0FBUyxDQUFDLHdCQUF3QixDQUFDO0FBRXRELElBQUlHLFVBQVUsR0FBRyxTQUFTO0FBRTFCLElBQUlDLE9BQU8sR0FBRyxTQUFTQyxrQkFBa0JBLENBQUNDLEVBQUUsRUFBRTtFQUM3QyxJQUFJVCxVQUFVLENBQUNTLEVBQUUsQ0FBQyxFQUFFO0lBQ25CLE9BQU8sS0FBSztFQUNiO0VBQ0EsSUFBSSxPQUFPQSxFQUFFLEtBQUssVUFBVSxFQUFFO0lBQzdCLE9BQU8sS0FBSztFQUNiO0VBQ0EsSUFBSTtJQUNILElBQUlDLEtBQUssR0FBR0wsWUFBWSxDQUFDRCxpQkFBaUIsQ0FBQ0ssRUFBRSxDQUFDLEVBQUVILFVBQVUsQ0FBQztJQUMzRCxPQUFPLENBQUMsQ0FBQ0ksS0FBSztFQUNmLENBQUMsQ0FBQyxPQUFPQyxDQUFDLEVBQUUsQ0FBQztFQUNiLE9BQU8sS0FBSztBQUNiLENBQUM7QUFFRCxJQUFJQyxLQUFLLEdBQUcsNEJBQTRCO0FBRXhDLElBQUlDLGFBQWEsR0FBR0MsUUFBUSxDQUFDQyxTQUFTO0FBRXRDQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxPQUFPQSxDQUFBLEVBQUc7RUFDbkMsSUFBSSxDQUFDWCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQ1AsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ3hDLE1BQU0sSUFBSW1CLFNBQVMsQ0FBQyw0REFBNEQsQ0FBQztFQUNsRjtFQUNBLElBQUlqQixrQkFBa0IsRUFBRTtJQUN2QixPQUFPLElBQUksQ0FBQ2tCLElBQUk7RUFDakI7RUFDQSxJQUFJLElBQUksS0FBS1AsYUFBYSxFQUFFO0lBQzNCLE9BQU8sRUFBRTtFQUNWO0VBQ0EsSUFBSVEsR0FBRyxHQUFHakIsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0VBQ2pDLElBQUlNLEtBQUssR0FBR0wsWUFBWSxDQUFDZ0IsR0FBRyxFQUFFVCxLQUFLLENBQUM7RUFDcEMsSUFBSVEsSUFBSSxHQUFHVixLQUFLLElBQUlBLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDNUIsT0FBT1UsSUFBSTtBQUNaLENBQUMifQ==