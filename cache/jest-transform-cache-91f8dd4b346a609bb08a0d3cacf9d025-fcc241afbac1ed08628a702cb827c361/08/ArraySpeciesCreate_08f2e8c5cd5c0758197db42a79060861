a411ed1d5ed8843207325169292717ee
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $species = GetIntrinsic('%Symbol.species%', true);
var $TypeError = GetIntrinsic('%TypeError%');
var ArrayCreate = require('./ArrayCreate');
var Get = require('./Get');
var IsArray = require('./IsArray');
var IsConstructor = require('./IsConstructor');
var IsIntegralNumber = require('./IsIntegralNumber');
var Type = require('./Type');

// https://ecma-international.org/ecma-262/12.0/#sec-arrayspeciescreate

module.exports = function ArraySpeciesCreate(originalArray, length) {
  if (!IsIntegralNumber(length) || length < 0) {
    throw new $TypeError('Assertion failed: length must be an integer >= 0');
  }
  var isArray = IsArray(originalArray);
  if (!isArray) {
    return ArrayCreate(length);
  }
  var C = Get(originalArray, 'constructor');
  // TODO: figure out how to make a cross-realm normal Array, a same-realm Array
  // if (IsConstructor(C)) {
  // 	if C is another realm's Array, C = undefined
  // 	Object.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?
  // }
  if ($species && Type(C) === 'Object') {
    C = Get(C, $species);
    if (C === null) {
      C = void 0;
    }
  }
  if (typeof C === 'undefined') {
    return ArrayCreate(length);
  }
  if (!IsConstructor(C)) {
    throw new $TypeError('C must be a constructor');
  }
  return new C(length); // Construct(C, length);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJHNwZWNpZXMiLCIkVHlwZUVycm9yIiwiQXJyYXlDcmVhdGUiLCJHZXQiLCJJc0FycmF5IiwiSXNDb25zdHJ1Y3RvciIsIklzSW50ZWdyYWxOdW1iZXIiLCJUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFycmF5U3BlY2llc0NyZWF0ZSIsIm9yaWdpbmFsQXJyYXkiLCJsZW5ndGgiLCJpc0FycmF5IiwiQyJdLCJzb3VyY2VzIjpbIkFycmF5U3BlY2llc0NyZWF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkc3BlY2llcyA9IEdldEludHJpbnNpYygnJVN5bWJvbC5zcGVjaWVzJScsIHRydWUpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBBcnJheUNyZWF0ZSA9IHJlcXVpcmUoJy4vQXJyYXlDcmVhdGUnKTtcbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIElzQXJyYXkgPSByZXF1aXJlKCcuL0lzQXJyYXknKTtcbnZhciBJc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9Jc0NvbnN0cnVjdG9yJyk7XG52YXIgSXNJbnRlZ3JhbE51bWJlciA9IHJlcXVpcmUoJy4vSXNJbnRlZ3JhbE51bWJlcicpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzEyLjAvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG5cdGlmICghSXNJbnRlZ3JhbE51bWJlcihsZW5ndGgpIHx8IGxlbmd0aCA8IDApIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogbGVuZ3RoIG11c3QgYmUgYW4gaW50ZWdlciA+PSAwJyk7XG5cdH1cblxuXHR2YXIgaXNBcnJheSA9IElzQXJyYXkob3JpZ2luYWxBcnJheSk7XG5cdGlmICghaXNBcnJheSkge1xuXHRcdHJldHVybiBBcnJheUNyZWF0ZShsZW5ndGgpO1xuXHR9XG5cblx0dmFyIEMgPSBHZXQob3JpZ2luYWxBcnJheSwgJ2NvbnN0cnVjdG9yJyk7XG5cdC8vIFRPRE86IGZpZ3VyZSBvdXQgaG93IHRvIG1ha2UgYSBjcm9zcy1yZWFsbSBub3JtYWwgQXJyYXksIGEgc2FtZS1yZWFsbSBBcnJheVxuXHQvLyBpZiAoSXNDb25zdHJ1Y3RvcihDKSkge1xuXHQvLyBcdGlmIEMgaXMgYW5vdGhlciByZWFsbSdzIEFycmF5LCBDID0gdW5kZWZpbmVkXG5cdC8vIFx0T2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoQXJyYXkpKSkgPT09IG51bGwgP1xuXHQvLyB9XG5cdGlmICgkc3BlY2llcyAmJiBUeXBlKEMpID09PSAnT2JqZWN0Jykge1xuXHRcdEMgPSBHZXQoQywgJHNwZWNpZXMpO1xuXHRcdGlmIChDID09PSBudWxsKSB7XG5cdFx0XHRDID0gdm9pZCAwO1xuXHRcdH1cblx0fVxuXG5cdGlmICh0eXBlb2YgQyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gQXJyYXlDcmVhdGUobGVuZ3RoKTtcblx0fVxuXHRpZiAoIUlzQ29uc3RydWN0b3IoQykpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQyBtdXN0IGJlIGEgY29uc3RydWN0b3InKTtcblx0fVxuXHRyZXR1cm4gbmV3IEMobGVuZ3RoKTsgLy8gQ29uc3RydWN0KEMsIGxlbmd0aCk7XG59O1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRTNDLElBQUlDLFFBQVEsR0FBR0YsWUFBWSxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQztBQUNyRCxJQUFJRyxVQUFVLEdBQUdILFlBQVksQ0FBQyxhQUFhLENBQUM7QUFFNUMsSUFBSUksV0FBVyxHQUFHSCxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQzFDLElBQUlJLEdBQUcsR0FBR0osT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUMxQixJQUFJSyxPQUFPLEdBQUdMLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDbEMsSUFBSU0sYUFBYSxHQUFHTixPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFDOUMsSUFBSU8sZ0JBQWdCLEdBQUdQLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUNwRCxJQUFJUSxJQUFJLEdBQUdSLE9BQU8sQ0FBQyxRQUFRLENBQUM7O0FBRTVCOztBQUVBUyxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxrQkFBa0JBLENBQUNDLGFBQWEsRUFBRUMsTUFBTSxFQUFFO0VBQ25FLElBQUksQ0FBQ04sZ0JBQWdCLENBQUNNLE1BQU0sQ0FBQyxJQUFJQSxNQUFNLEdBQUcsQ0FBQyxFQUFFO0lBQzVDLE1BQU0sSUFBSVgsVUFBVSxDQUFDLGtEQUFrRCxDQUFDO0VBQ3pFO0VBRUEsSUFBSVksT0FBTyxHQUFHVCxPQUFPLENBQUNPLGFBQWEsQ0FBQztFQUNwQyxJQUFJLENBQUNFLE9BQU8sRUFBRTtJQUNiLE9BQU9YLFdBQVcsQ0FBQ1UsTUFBTSxDQUFDO0VBQzNCO0VBRUEsSUFBSUUsQ0FBQyxHQUFHWCxHQUFHLENBQUNRLGFBQWEsRUFBRSxhQUFhLENBQUM7RUFDekM7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUlYLFFBQVEsSUFBSU8sSUFBSSxDQUFDTyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7SUFDckNBLENBQUMsR0FBR1gsR0FBRyxDQUFDVyxDQUFDLEVBQUVkLFFBQVEsQ0FBQztJQUNwQixJQUFJYyxDQUFDLEtBQUssSUFBSSxFQUFFO01BQ2ZBLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDWDtFQUNEO0VBRUEsSUFBSSxPQUFPQSxDQUFDLEtBQUssV0FBVyxFQUFFO0lBQzdCLE9BQU9aLFdBQVcsQ0FBQ1UsTUFBTSxDQUFDO0VBQzNCO0VBQ0EsSUFBSSxDQUFDUCxhQUFhLENBQUNTLENBQUMsQ0FBQyxFQUFFO0lBQ3RCLE1BQU0sSUFBSWIsVUFBVSxDQUFDLHlCQUF5QixDQUFDO0VBQ2hEO0VBQ0EsT0FBTyxJQUFJYSxDQUFDLENBQUNGLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDdkIsQ0FBQyJ9