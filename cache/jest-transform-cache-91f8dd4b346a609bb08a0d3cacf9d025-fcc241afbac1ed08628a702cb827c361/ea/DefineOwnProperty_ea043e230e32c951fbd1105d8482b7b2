131a98409027949415446f3ca658f13b
'use strict';

var hasPropertyDescriptors = require('has-property-descriptors');
var GetIntrinsic = require('get-intrinsic');
var $defineProperty = hasPropertyDescriptors() && GetIntrinsic('%Object.defineProperty%', true);
var hasArrayLengthDefineBug = hasPropertyDescriptors.hasArrayLengthDefineBug();

// eslint-disable-next-line global-require
var isArray = hasArrayLengthDefineBug && require('../helpers/IsArray');
var callBound = require('call-bind/callBound');
var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');

// eslint-disable-next-line max-params
module.exports = function DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, desc) {
  if (!$defineProperty) {
    if (!IsDataDescriptor(desc)) {
      // ES3 does not support getters/setters
      return false;
    }
    if (!desc['[[Configurable]]'] || !desc['[[Writable]]']) {
      return false;
    }

    // fallback for ES3
    if (P in O && $isEnumerable(O, P) !== !!desc['[[Enumerable]]']) {
      // a non-enumerable existing property
      return false;
    }

    // property does not exist at all, or exists but is enumerable
    var V = desc['[[Value]]'];
    // eslint-disable-next-line no-param-reassign
    O[P] = V; // will use [[Define]]
    return SameValue(O[P], V);
  }
  if (hasArrayLengthDefineBug && P === 'length' && '[[Value]]' in desc && isArray(O) && O.length !== desc['[[Value]]']) {
    // eslint-disable-next-line no-param-reassign
    O.length = desc['[[Value]]'];
    return O.length === desc['[[Value]]'];
  }
  $defineProperty(O, P, FromPropertyDescriptor(desc));
  return true;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoYXNQcm9wZXJ0eURlc2NyaXB0b3JzIiwicmVxdWlyZSIsIkdldEludHJpbnNpYyIsIiRkZWZpbmVQcm9wZXJ0eSIsImhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnIiwiaXNBcnJheSIsImNhbGxCb3VuZCIsIiRpc0VudW1lcmFibGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiRGVmaW5lT3duUHJvcGVydHkiLCJJc0RhdGFEZXNjcmlwdG9yIiwiU2FtZVZhbHVlIiwiRnJvbVByb3BlcnR5RGVzY3JpcHRvciIsIk8iLCJQIiwiZGVzYyIsIlYiLCJsZW5ndGgiXSwic291cmNlcyI6WyJEZWZpbmVPd25Qcm9wZXJ0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzID0gcmVxdWlyZSgnaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzKCkgJiYgR2V0SW50cmluc2ljKCclT2JqZWN0LmRlZmluZVByb3BlcnR5JScsIHRydWUpO1xuXG52YXIgaGFzQXJyYXlMZW5ndGhEZWZpbmVCdWcgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzLmhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnKCk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZVxudmFyIGlzQXJyYXkgPSBoYXNBcnJheUxlbmd0aERlZmluZUJ1ZyAmJiByZXF1aXJlKCcuLi9oZWxwZXJzL0lzQXJyYXknKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcblxudmFyICRpc0VudW1lcmFibGUgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gRGVmaW5lT3duUHJvcGVydHkoSXNEYXRhRGVzY3JpcHRvciwgU2FtZVZhbHVlLCBGcm9tUHJvcGVydHlEZXNjcmlwdG9yLCBPLCBQLCBkZXNjKSB7XG5cdGlmICghJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0aWYgKCFJc0RhdGFEZXNjcmlwdG9yKGRlc2MpKSB7XG5cdFx0XHQvLyBFUzMgZG9lcyBub3Qgc3VwcG9ydCBnZXR0ZXJzL3NldHRlcnNcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKCFkZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10gfHwgIWRlc2NbJ1tbV3JpdGFibGVdXSddKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gZmFsbGJhY2sgZm9yIEVTM1xuXHRcdGlmIChQIGluIE8gJiYgJGlzRW51bWVyYWJsZShPLCBQKSAhPT0gISFkZXNjWydbW0VudW1lcmFibGVdXSddKSB7XG5cdFx0XHQvLyBhIG5vbi1lbnVtZXJhYmxlIGV4aXN0aW5nIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gcHJvcGVydHkgZG9lcyBub3QgZXhpc3QgYXQgYWxsLCBvciBleGlzdHMgYnV0IGlzIGVudW1lcmFibGVcblx0XHR2YXIgViA9IGRlc2NbJ1tbVmFsdWVdXSddO1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHRcdE9bUF0gPSBWOyAvLyB3aWxsIHVzZSBbW0RlZmluZV1dXG5cdFx0cmV0dXJuIFNhbWVWYWx1ZShPW1BdLCBWKTtcblx0fVxuXHRpZiAoXG5cdFx0aGFzQXJyYXlMZW5ndGhEZWZpbmVCdWdcblx0XHQmJiBQID09PSAnbGVuZ3RoJ1xuXHRcdCYmICdbW1ZhbHVlXV0nIGluIGRlc2Ncblx0XHQmJiBpc0FycmF5KE8pXG5cdFx0JiYgTy5sZW5ndGggIT09IGRlc2NbJ1tbVmFsdWVdXSddXG5cdCkge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHRcdE8ubGVuZ3RoID0gZGVzY1snW1tWYWx1ZV1dJ107XG5cdFx0cmV0dXJuIE8ubGVuZ3RoID09PSBkZXNjWydbW1ZhbHVlXV0nXTtcblx0fVxuXG5cdCRkZWZpbmVQcm9wZXJ0eShPLCBQLCBGcm9tUHJvcGVydHlEZXNjcmlwdG9yKGRlc2MpKTtcblx0cmV0dXJuIHRydWU7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsMEJBQTBCLENBQUM7QUFFaEUsSUFBSUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRTNDLElBQUlFLGVBQWUsR0FBR0gsc0JBQXNCLEVBQUUsSUFBSUUsWUFBWSxDQUFDLHlCQUF5QixFQUFFLElBQUksQ0FBQztBQUUvRixJQUFJRSx1QkFBdUIsR0FBR0osc0JBQXNCLENBQUNJLHVCQUF1QixFQUFFOztBQUU5RTtBQUNBLElBQUlDLE9BQU8sR0FBR0QsdUJBQXVCLElBQUlILE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUV0RSxJQUFJSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUU5QyxJQUFJTSxhQUFhLEdBQUdELFNBQVMsQ0FBQyx1Q0FBdUMsQ0FBQzs7QUFFdEU7QUFDQUUsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsaUJBQWlCQSxDQUFDQyxnQkFBZ0IsRUFBRUMsU0FBUyxFQUFFQyxzQkFBc0IsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLElBQUksRUFBRTtFQUM1RyxJQUFJLENBQUNiLGVBQWUsRUFBRTtJQUNyQixJQUFJLENBQUNRLGdCQUFnQixDQUFDSyxJQUFJLENBQUMsRUFBRTtNQUM1QjtNQUNBLE9BQU8sS0FBSztJQUNiO0lBQ0EsSUFBSSxDQUFDQSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDQSxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUU7TUFDdkQsT0FBTyxLQUFLO0lBQ2I7O0lBRUE7SUFDQSxJQUFJRCxDQUFDLElBQUlELENBQUMsSUFBSVAsYUFBYSxDQUFDTyxDQUFDLEVBQUVDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7TUFDL0Q7TUFDQSxPQUFPLEtBQUs7SUFDYjs7SUFFQTtJQUNBLElBQUlDLENBQUMsR0FBR0QsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN6QjtJQUNBRixDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFHRSxDQUFDLENBQUMsQ0FBQztJQUNWLE9BQU9MLFNBQVMsQ0FBQ0UsQ0FBQyxDQUFDQyxDQUFDLENBQUMsRUFBRUUsQ0FBQyxDQUFDO0VBQzFCO0VBQ0EsSUFDQ2IsdUJBQXVCLElBQ3BCVyxDQUFDLEtBQUssUUFBUSxJQUNkLFdBQVcsSUFBSUMsSUFBSSxJQUNuQlgsT0FBTyxDQUFDUyxDQUFDLENBQUMsSUFDVkEsQ0FBQyxDQUFDSSxNQUFNLEtBQUtGLElBQUksQ0FBQyxXQUFXLENBQUMsRUFDaEM7SUFDRDtJQUNBRixDQUFDLENBQUNJLE1BQU0sR0FBR0YsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixPQUFPRixDQUFDLENBQUNJLE1BQU0sS0FBS0YsSUFBSSxDQUFDLFdBQVcsQ0FBQztFQUN0QztFQUVBYixlQUFlLENBQUNXLENBQUMsRUFBRUMsQ0FBQyxFQUFFRixzQkFBc0IsQ0FBQ0csSUFBSSxDQUFDLENBQUM7RUFDbkQsT0FBTyxJQUFJO0FBQ1osQ0FBQyJ9