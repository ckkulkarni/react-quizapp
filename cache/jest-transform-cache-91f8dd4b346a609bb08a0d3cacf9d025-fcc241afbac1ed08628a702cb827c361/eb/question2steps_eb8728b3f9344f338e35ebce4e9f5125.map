{"version":3,"names":["_react","_interopRequireDefault","require","_jestCucumber","_react2","_reactRouterDom","_Question","_App","_Question2","_jsxRuntime","obj","__esModule","default","feature","loadFeature","defineFeature","test","beforeEach","document","body","innerHTML","given","when","then","mockQuizContext","score","setScore","jest","fn","name","setName","age","setAge","email","setMail","phoneNumber","setPhone","selectedLanguage","setSelector","trackScore","setTracker","screen","render","jsx","QuizContext","Provider","value","children","BrowserRouter","jsxs","Routes","Route","path","element","expect","toBeTruthy","questionText","getByText","correctAnswer","getByRole","not","toBeChecked","fireEvent","click","answerButton","waitFor","toBeCalled","toBeDisabled"],"sources":["question2.steps.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { defineFeature, loadFeature } from \"jest-cucumber\";\r\nimport { render, screen, fireEvent, waitFor } from \"@testing-library/react\";\r\nimport \"text-encoding\";\r\nimport Home from \"./../../homeandsubmit/Home\";\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport Question1 from \"../../questions/Question1\";\r\nimport Question2 from \"../../questions/Question2\";\r\nimport { QuizContext } from \"../../../App\";\r\nimport Question3 from \"./../../questions/Question3\";\r\nimport Question4 from \"./../../questions/Question4\";\r\nconst feature = loadFeature(\"src/components/features/question2.feature\");\r\ndefineFeature(feature, (test) => {\r\n  beforeEach(() => {\r\n    document.body.innerHTML = \"\";\r\n  });\r\n  test(\"User answers first quiz question correctly\", ({\r\n    given,\r\n    when,\r\n    then,\r\n  }) => {\r\n    const mockQuizContext = {\r\n      score: 0,\r\n      setScore: jest.fn(),\r\n      name: \"chandu\",\r\n      setName: jest.fn(),\r\n      age: 0,\r\n      setAge: jest.fn(),\r\n      email: \"chandra@chandu.com\",\r\n      setMail: jest.fn(),\r\n      phoneNumber: \"1234567890\",\r\n      setPhone: jest.fn(),\r\n      selectedLanguage: \"ReactJS\",\r\n      setSelector: jest.fn(),\r\n      trackScore: false,\r\n      setTracker: jest.fn(),\r\n    };\r\n    given(\"I am on the Question 2 screen\", () => {\r\n      const screen = render(\r\n        <QuizContext.Provider value={mockQuizContext}>\r\n          <Router>\r\n            <Routes>\r\n              <Route path=\"/\" element={<Question2 />} />\r\n              <Route path=\"/question2\" element={<Question3 />} />\r\n            </Routes>\r\n          </Router>\r\n        </QuizContext.Provider>\r\n      );\r\n      expect(screen).toBeTruthy();\r\n      const questionText = screen.getByText(\r\n        \"Which of these packages that are used to install React and create React Apps?\"\r\n      );\r\n      expect(questionText).toBeTruthy();\r\n    });\r\n    when(\r\n      'I select the correct answer and press \"Answer\", then the score should update, and disable the answer button',\r\n      async () => {\r\n        const correctAnswer = screen.getByRole(\"radio\", {\r\n          name: \"npm -- Node Package Manager\",\r\n        });\r\n        expect(correctAnswer).toBeTruthy();\r\n        expect(correctAnswer).not.toBeChecked();\r\n        fireEvent.click(correctAnswer);\r\n        expect(correctAnswer).toBeChecked();\r\n        const answerButton = screen.getByRole(\"button\", { name: \"Submit\" });\r\n        expect(answerButton).toBeTruthy();\r\n        fireEvent.click(answerButton);\r\n        await waitFor(() => {\r\n          expect(mockQuizContext.setScore).toBeCalled();\r\n          expect(answerButton).toBeDisabled();\r\n        });\r\n      }\r\n    );\r\n    // then(\r\n    //   'I navigate to the next question when I click on the \"Next Question\" button',\r\n    //   () => {\r\n    //     // const questionNumberButtons = screen\r\n    //     //   .getAllByRole(\"button\")\r\n    //     //   .filter(\r\n    //     //     (button) => button.textContent && /^\\d+$/.test(button.textContent)\r\n    //     //   );\r\n    //     // expect(questionNumberButtons[0]).toBeTruthy();\r\n    //     // expect(questionNumberButtons[1]).toBeTruthy();\r\n    //     // expect(questionNumberButtons[2]).toBeTruthy();\r\n    //     // expect(questionNumberButtons[3]).toBeTruthy();\r\n    //     // expect(questionNumberButtons[4]).toBeTruthy();\r\n    //     // fireEvent.click(questionNumberButtons[1]);\r\n    //     const nextQuestionButton = screen.getByRole(\"button\", {\r\n    //       name: \"next-question\",\r\n    //     });\r\n    //     expect(nextQuestionButton).toBeTruthy();\r\n    //     fireEvent.click(nextQuestionButton);\r\n    //     expect(window.location.pathname).toEqual(\"/question3\");\r\n    //   }\r\n    // );\r\n  });\r\n  //   test(\"User answers first quiz question incorrectly\", ({\r\n  //     given,\r\n  //     when,\r\n  //     then,\r\n  //   }) => {\r\n  //     const mockQuizContext = {\r\n  //       score: 0,\r\n  //       setScore: jest.fn(),\r\n  //       name: \"chandu\",\r\n  //       setName: jest.fn(),\r\n  //       age: 0,\r\n  //       setAge: jest.fn(),\r\n  //       email: \"chandra@chandu.com\",\r\n  //       setMail: jest.fn(),\r\n  //       phoneNumber: \"1234567890\",\r\n  //       setPhone: jest.fn(),\r\n  //       selectedLanguage: \"ReactJS\",\r\n  //       setSelector: jest.fn(),\r\n  //       trackScore: false,\r\n  //       setTracker: jest.fn(),\r\n  //     };\r\n  //     given(\"I am on the Question 2 screen\", () => {\r\n  //       const screen = render(\r\n  //         <QuizContext.Provider value={mockQuizContext}>\r\n  //           <Router>\r\n  //             <Routes>\r\n  //               <Route path=\"/\" element={<Question2 />} />\r\n  //               <Route path=\"/question2\" element={<Question3 />} />\r\n  //               <Route path=\"/question3\" element={<Question4 />} />\r\n  //             </Routes>\r\n  //           </Router>\r\n  //         </QuizContext.Provider>\r\n  //       );\r\n  //       expect(screen).toBeTruthy();\r\n  //       const questionText = screen.getByText(\"What is ReactJS?\");\r\n  //       expect(questionText).toBeTruthy();\r\n  //     });\r\n  //     when(\r\n  //       'I select an incorrect answer and press \"Answer\", then the score should remain the same',\r\n  //       () => {\r\n  //         const wrongAnswer = screen.getByRole(\"radio\", { name: \"A framework\" });\r\n  //         expect(wrongAnswer).toBeTruthy();\r\n  //         fireEvent.click(wrongAnswer);\r\n  //         expect(mockQuizContext.score).toBe(0);\r\n  //       }\r\n  //     );\r\n  //     when(\"I select any of the numbers above the questions\", () => {\r\n  //       const questionNumberButtons = screen\r\n  //         .getAllByRole(\"button\")\r\n  //         .filter(\r\n  //           (button) => button.textContent && /^\\d+$/.test(button.textContent)\r\n  //         );\r\n  //       expect(questionNumberButtons[0]).toBeTruthy();\r\n  //       expect(questionNumberButtons[1]).toBeTruthy();\r\n  //       expect(questionNumberButtons[2]).toBeTruthy();\r\n  //       expect(questionNumberButtons[3]).toBeTruthy();\r\n  //       expect(questionNumberButtons[4]).toBeTruthy();\r\n  //       fireEvent.click(questionNumberButtons[3]);\r\n  //     });\r\n  //     then(\"it should navigate to that respective question screen\", () => {\r\n  //       expect(window.location.pathname).toEqual(\"/question4\");\r\n  //     });\r\n  //   });\r\n});\r\n"],"mappings":"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"}