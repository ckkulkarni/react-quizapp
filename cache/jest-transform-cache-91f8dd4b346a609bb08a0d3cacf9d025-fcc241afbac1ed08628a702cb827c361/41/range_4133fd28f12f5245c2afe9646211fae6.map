{"version":3,"names":["_and","_interopRequireDefault","require","_between","_integer","_isInteger","_wrapValidator","MAX_SAFE_INTEGER","Number","Math","pow","isValidLength","x","abs","range","min","max","RangeError","concat","gte","lt"],"sources":["../src/range.js"],"sourcesContent":["import and from './and';\nimport between from './between';\nimport integer from './integer';\nimport isInteger from './helpers/isInteger';\nimport wrapValidator from './helpers/wrapValidator';\n\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ (2 ** 53) - 1;\n\nfunction isValidLength(x) {\n  return isInteger(x) && Math.abs(x) < MAX_SAFE_INTEGER;\n}\n\nexport default function range(min, max) {\n  if (!isValidLength(min) || !isValidLength(max)) {\n    throw new RangeError(`\"range\" requires two integers: ${min} and ${max} given`);\n  }\n  if (min === max) {\n    throw new RangeError('min and max must not be the same');\n  }\n  return wrapValidator(and([integer(), between({ gte: min, lt: max })], 'range'), 'range', { min, max });\n}\n"],"mappings":";;;;;;AAAA,IAAAA,IAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,QAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,QAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,UAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,cAAA,GAAAL,sBAAA,CAAAC,OAAA;;;;;;AAEA,IAAMK,gBAAgB,GAAGC,MAAM,CAACD,gBAAP,IAA2B;AAA2BE,IAAA,CAAAC,GAAA,CAAC,CAAD,EAAM,EAAN,IAAY,CAA3F;AAEA,SAASC,aAATA,CAAuBC,CAAvB,EAA0B;EACxB,OAAO,IAAAP,UAAA,aAAUO,CAAV,KAAgBH,IAAI,CAACI,GAAL,CAASD,CAAT,IAAcL,gBAArC;AACD;AAEc,SAASO,KAATA,CAAeC,GAAf,EAAoBC,GAApB,EAAyB;EACtC,IAAI,CAACL,aAAa,CAACI,GAAD,CAAd,IAAuB,CAACJ,aAAa,CAACK,GAAD,CAAzC,EAAgD;IAC9C,MAAM,IAAIC,UAAJ,qCAAAC,MAAA,CAAiDH,GAAjD,WAAAG,MAAA,CAA4DF,GAA5D,YAAN;EACD;EACD,IAAID,GAAG,KAAKC,GAAZ,EAAiB;IACf,MAAM,IAAIC,UAAJ,CAAe,kCAAf,CAAN;EACD;EACD,OAAO,IAAAX,cAAA,aAAc,IAAAN,IAAA,aAAI,CAAC,IAAAI,QAAA,cAAD,EAAY,IAAAD,QAAA,aAAQ;IAAEgB,GAAG,EAAEJ,GAAP;IAAYK,EAAE,EAAEJ;EAAhB,CAAR,CAAZ,CAAJ,EAAiD,OAAjD,CAAd,EAAyE,OAAzE,EAAkF;IAAED,GAAG,EAAHA,GAAF;IAAOC,GAAG,EAAHA;EAAP,CAAlF,CAAP;AACD"}