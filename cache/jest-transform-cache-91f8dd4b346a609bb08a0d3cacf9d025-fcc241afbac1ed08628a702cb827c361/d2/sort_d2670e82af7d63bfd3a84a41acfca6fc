f31d00861eb7a7c60c16fa38bd512d1f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isTraversal = void 0;
var css_what_1 = require("css-what");
var procedure = new Map([[css_what_1.SelectorType.Universal, 50], [css_what_1.SelectorType.Tag, 30], [css_what_1.SelectorType.Attribute, 1], [css_what_1.SelectorType.Pseudo, 0]]);
function isTraversal(token) {
  return !procedure.has(token.type);
}
exports.isTraversal = isTraversal;
var attributes = new Map([[css_what_1.AttributeAction.Exists, 10], [css_what_1.AttributeAction.Equals, 8], [css_what_1.AttributeAction.Not, 7], [css_what_1.AttributeAction.Start, 6], [css_what_1.AttributeAction.End, 6], [css_what_1.AttributeAction.Any, 5]]);
/**
 * Sort the parts of the passed selector,
 * as there is potential for optimization
 * (some types of selectors are faster than others)
 *
 * @param arr Selector to sort
 */
function sortByProcedure(arr) {
  var procs = arr.map(getProcedure);
  for (var i = 1; i < arr.length; i++) {
    var procNew = procs[i];
    if (procNew < 0) continue;
    for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {
      var token = arr[j + 1];
      arr[j + 1] = arr[j];
      arr[j] = token;
      procs[j + 1] = procs[j];
      procs[j] = procNew;
    }
  }
}
exports.default = sortByProcedure;
function getProcedure(token) {
  var _a, _b;
  var proc = (_a = procedure.get(token.type)) !== null && _a !== void 0 ? _a : -1;
  if (token.type === css_what_1.SelectorType.Attribute) {
    proc = (_b = attributes.get(token.action)) !== null && _b !== void 0 ? _b : 4;
    if (token.action === css_what_1.AttributeAction.Equals && token.name === "id") {
      // Prefer ID selectors (eg. #ID)
      proc = 9;
    }
    if (token.ignoreCase) {
      /*
       * IgnoreCase adds some overhead, prefer "normal" token
       * this is a binary operation, to ensure it's still an int
       */
      proc >>= 1;
    }
  } else if (token.type === css_what_1.SelectorType.Pseudo) {
    if (!token.data) {
      proc = 3;
    } else if (token.name === "has" || token.name === "contains") {
      proc = 0; // Expensive in any case
    } else if (Array.isArray(token.data)) {
      // Eg. :matches, :not
      proc = Math.min.apply(Math, token.data.map(function (d) {
        return Math.min.apply(Math, d.map(getProcedure));
      }));
      // If we have traversals, try to avoid executing this selector
      if (proc < 0) {
        proc = 0;
      }
    } else {
      proc = 2;
    }
  }
  return proc;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3Nfd2hhdF8xIiwicmVxdWlyZSIsInByb2NlZHVyZSIsIk1hcCIsIlNlbGVjdG9yVHlwZSIsIlVuaXZlcnNhbCIsIlRhZyIsIkF0dHJpYnV0ZSIsIlBzZXVkbyIsImlzVHJhdmVyc2FsIiwidG9rZW4iLCJoYXMiLCJ0eXBlIiwiZXhwb3J0cyIsImF0dHJpYnV0ZXMiLCJBdHRyaWJ1dGVBY3Rpb24iLCJFeGlzdHMiLCJFcXVhbHMiLCJOb3QiLCJTdGFydCIsIkVuZCIsIkFueSIsInNvcnRCeVByb2NlZHVyZSIsImFyciIsInByb2NzIiwibWFwIiwiZ2V0UHJvY2VkdXJlIiwiaSIsImxlbmd0aCIsInByb2NOZXciLCJqIiwiZGVmYXVsdCIsInByb2MiLCJfYSIsImdldCIsIl9iIiwiYWN0aW9uIiwibmFtZSIsImlnbm9yZUNhc2UiLCJkYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwiTWF0aCIsIm1pbiIsImFwcGx5IiwiZCJdLCJzb3VyY2VzIjpbImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9mYjU1L2Nzcy1zZWxlY3QvMGYwNzI1YTlkZmVkZGQyZmRiNTRlZGE5NjU2Y2RiYWI1YmJmNmJlNi9zcmMvc29ydC50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsVUFBQSxHQUFBQyxPQUFBO0FBRUEsSUFBTUMsU0FBUyxHQUFHLElBQUlDLEdBQUcsQ0FBbUMsQ0FDeEQsQ0FBQ0gsVUFBQSxDQUFBSSxZQUFZLENBQUNDLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFDNUIsQ0FBQ0wsVUFBQSxDQUFBSSxZQUFZLENBQUNFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFDdEIsQ0FBQ04sVUFBQSxDQUFBSSxZQUFZLENBQUNHLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFDM0IsQ0FBQ1AsVUFBQSxDQUFBSSxZQUFZLENBQUNJLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FDM0IsQ0FBQztBQUVGLFNBQWdCQyxXQUFXQSxD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