6e377e7cc199854c07dc418fe896b25d
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
var _Home = _interopRequireDefault(require("./../../homeandsubmit/Home"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/base.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User submits form with valid inputs", ({
    given,
    when,
    and,
    then
  }) => {
    let container;
    let getByLabelText;
    let getByText;
    given("I am on the Home screen", () => {
      container = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_Home.default, null));
      getByLabelText = container.getByLabelText;
      getByText = container.getByText;
    });
    when('I enter a valid email "test@test.com"', email => {
      const emailInput = getByLabelText("Enter MailID:");
      _react2.fireEvent.change(emailInput, {
        target: {
          value: "test@test.com"
        }
      });
    });
    and('I enter a valid name "John"', name => {
      const nameInput = getByLabelText("Enter your name:");
      _react2.fireEvent.change(nameInput, {
        target: {
          value: "John"
        }
      });
    });
    and('I enter a valid phone number "1234567890"', phone => {
      const phoneInput = getByLabelText("Enter your Phone Number:");
      _react2.fireEvent.change(phoneInput, {
        target: {
          value: "1234567890"
        }
      });
    });
    and("I submit the form", () => {
      const submitButton = getByText("Submit");
      _react2.fireEvent.click(submitButton);
    });
    then("I should see the start quiz button", () => {
      expect(_react2.screen.getByText("Start Quiz")).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX0hvbWUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiZ2l2ZW4iLCJ3aGVuIiwiYW5kIiwidGhlbiIsImNvbnRhaW5lciIsImdldEJ5TGFiZWxUZXh0IiwiZ2V0QnlUZXh0IiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsImVtYWlsIiwiZW1haWxJbnB1dCIsImZpcmVFdmVudCIsImNoYW5nZSIsInRhcmdldCIsInZhbHVlIiwibmFtZSIsIm5hbWVJbnB1dCIsInBob25lIiwicGhvbmVJbnB1dCIsInN1Ym1pdEJ1dHRvbiIsImNsaWNrIiwiZXhwZWN0Iiwic2NyZWVuIiwidG9CZUluVGhlRG9jdW1lbnQiXSwic291cmNlcyI6WyJiYXNlLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGRlZmluZUZlYXR1cmUsIGxvYWRGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XHJcbmltcG9ydCB7IGFjdCB9IGZyb20gXCJyZWFjdC1kb20vdGVzdC11dGlsc1wiO1xyXG5pbXBvcnQgSG9tZSBmcm9tIFwiLi8uLi8uLi9ob21lYW5kc3VibWl0L0hvbWVcIjtcclxuaW1wb3J0IHsgUXVpekNvbnRleHQgfSBmcm9tIFwiLi8uLi8uLi8uLi9BcHBcIjtcclxuXHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9jb21wb25lbnRzL2ZlYXR1cmVzL2Jhc2UuZmVhdHVyZVwiKTtcclxuXHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICB0ZXN0KFwiVXNlciBzdWJtaXRzIGZvcm0gd2l0aCB2YWxpZCBpbnB1dHNcIiwgKHsgZ2l2ZW4sIHdoZW4sIGFuZCwgdGhlbiB9KSA9PiB7XHJcbiAgICBsZXQgY29udGFpbmVyO1xyXG4gICAgbGV0IGdldEJ5TGFiZWxUZXh0OiBhbnk7XHJcbiAgICBsZXQgZ2V0QnlUZXh0OiBhbnk7XHJcblxyXG4gICAgZ2l2ZW4oXCJJIGFtIG9uIHRoZSBIb21lIHNjcmVlblwiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnRhaW5lciA9IHJlbmRlcig8SG9tZSAvPik7XHJcbiAgICAgIGdldEJ5TGFiZWxUZXh0ID0gY29udGFpbmVyLmdldEJ5TGFiZWxUZXh0O1xyXG4gICAgICBnZXRCeVRleHQgPSBjb250YWluZXIuZ2V0QnlUZXh0O1xyXG4gICAgfSk7XHJcblxyXG4gICAgd2hlbignSSBlbnRlciBhIHZhbGlkIGVtYWlsIFwidGVzdEB0ZXN0LmNvbVwiJywgKGVtYWlsKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVtYWlsSW5wdXQgPSBnZXRCeUxhYmVsVGV4dChcIkVudGVyIE1haWxJRDpcIik7XHJcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZW1haWxJbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6IFwidGVzdEB0ZXN0LmNvbVwiIH0gfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhbmQoJ0kgZW50ZXIgYSB2YWxpZCBuYW1lIFwiSm9oblwiJywgKG5hbWUpID0+IHtcclxuICAgICAgY29uc3QgbmFtZUlucHV0ID0gZ2V0QnlMYWJlbFRleHQoXCJFbnRlciB5b3VyIG5hbWU6XCIpO1xyXG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKG5hbWVJbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6IFwiSm9oblwiIH0gfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhbmQoJ0kgZW50ZXIgYSB2YWxpZCBwaG9uZSBudW1iZXIgXCIxMjM0NTY3ODkwXCInLCAocGhvbmUpID0+IHtcclxuICAgICAgY29uc3QgcGhvbmVJbnB1dCA9IGdldEJ5TGFiZWxUZXh0KFwiRW50ZXIgeW91ciBQaG9uZSBOdW1iZXI6XCIpO1xyXG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKHBob25lSW5wdXQsIHsgdGFyZ2V0OiB7IHZhbHVlOiBcIjEyMzQ1Njc4OTBcIiB9IH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYW5kKFwiSSBzdWJtaXQgdGhlIGZvcm1cIiwgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBnZXRCeVRleHQoXCJTdWJtaXRcIik7XHJcbiAgICAgIGZpcmVFdmVudC5jbGljayhzdWJtaXRCdXR0b24pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhlbihcIkkgc2hvdWxkIHNlZSB0aGUgc3RhcnQgcXVpeiBidXR0b25cIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcIlN0YXJ0IFF1aXpcIikpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFBRyxLQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBOEMsU0FBQUQsdUJBQUFLLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFHOUMsTUFBTUcsT0FBTyxHQUFHLElBQUFDLHlCQUFXLEVBQUMsc0NBQXNDLENBQUM7QUFFbkUsSUFBQUMsMkJBQWEsRUFBQ0YsT0FBTyxFQUFHRyxJQUFJLElBQUs7RUFDL0JBLElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxDQUFDO0lBQUVDLEtBQUs7SUFBRUMsSUFBSTtJQUFFQyxHQUFHO0lBQUVDO0VBQUssQ0FBQyxLQUFLO0lBQzFFLElBQUlDLFNBQVM7SUFDYixJQUFJQyxjQUFtQjtJQUN2QixJQUFJQyxTQUFjO0lBRWxCTixLQUFLLENBQUMseUJBQXlCLEVBQUUsTUFBTTtNQUNyQ0ksU0FBUyxHQUFHLElBQUFHLGNBQU0sZ0JBQUNwQixNQUFBLENBQUFRLE9BQUEsQ0FBQWEsYUFBQSxDQUFDaEIsS0FBQSxDQUFBRyxPQUFJLE9BQUcsQ0FBQztNQUM1QlUsY0FBYyxHQUFHRCxTQUFTLENBQUNDLGNBQWM7TUFDekNDLFNBQVMsR0FBR0YsU0FBUyxDQUFDRSxTQUFTO0lBQ2pDLENBQUMsQ0FBQztJQUVGTCxJQUFJLENBQUMsdUNBQXVDLEVBQUdRLEtBQUssSUFBSztNQUN2RCxNQUFNQyxVQUFVLEdBQUdMLGNBQWMsQ0FBQyxlQUFlLENBQUM7TUFDbERNLGlCQUFTLENBQUNDLE1BQU0sQ0FBQ0YsVUFBVSxFQUFFO1FBQUVHLE1BQU0sRUFBRTtVQUFFQyxLQUFLLEVBQUU7UUFBZ0I7TUFBRSxDQUFDLENBQUM7SUFDdEUsQ0FBQyxDQUFDO0lBRUZaLEdBQUcsQ0FBQyw2QkFBNkIsRUFBR2EsSUFBSSxJQUFLO01BQzNDLE1BQU1DLFNBQVMsR0FBR1gsY0FBYyxDQUFDLGtCQUFrQixDQUFDO01BQ3BETSxpQkFBUyxDQUFDQyxNQUFNLENBQUNJLFNBQVMsRUFBRTtRQUFFSCxNQUFNLEVBQUU7VUFBRUMsS0FBSyxFQUFFO1FBQU87TUFBRSxDQUFDLENBQUM7SUFDNUQsQ0FBQyxDQUFDO0lBRUZaLEdBQUcsQ0FBQywyQ0FBMkMsRUFBR2UsS0FBSyxJQUFLO01BQzFELE1BQU1DLFVBQVUsR0FBR2IsY0FBYyxDQUFDLDBCQUEwQixDQUFDO01BQzdETSxpQkFBUyxDQUFDQyxNQUFNLENBQUNNLFVBQVUsRUFBRTtRQUFFTCxNQUFNLEVBQUU7VUFBRUMsS0FBSyxFQUFFO1FBQWE7TUFBRSxDQUFDLENBQUM7SUFDbkUsQ0FBQyxDQUFDO0lBRUZaLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNO01BQzdCLE1BQU1pQixZQUFZLEdBQUdiLFNBQVMsQ0FBQyxRQUFRLENBQUM7TUFDeENLLGlCQUFTLENBQUNTLEtBQUssQ0FBQ0QsWUFBWSxDQUFDO0lBQy9CLENBQUMsQ0FBQztJQUVGaEIsSUFBSSxDQUFDLG9DQUFvQyxFQUFFLE1BQU07TUFDL0NrQixNQUFNLENBQUNDLGNBQU0sQ0FBQ2hCLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDaUIsaUJBQWlCLEVBQUU7SUFDNUQsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=