48f741e8d84015a99078b61883951d21
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeTypes = exports.HTML5Backend = void 0;
Object.defineProperty(exports, "getEmptyImage", {
  enumerable: true,
  get: function () {
    return _getEmptyImage.getEmptyImage;
  }
});
var _HTML5BackendImpl = require("./HTML5BackendImpl.js");
var _NativeTypes = _interopRequireWildcard(require("./NativeTypes.js"));
exports.NativeTypes = _NativeTypes;
var _getEmptyImage = require("./getEmptyImage.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const HTML5Backend = function createBackend(manager, context, options) {
  return new _HTML5BackendImpl.HTML5BackendImpl(manager, context, options);
};
exports.HTML5Backend = HTML5Backend;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfSFRNTDVCYWNrZW5kSW1wbCIsInJlcXVpcmUiLCJleHBvcnRzIiwiTmF0aXZlVHlwZXMiLCJfTmF0aXZlVHlwZXMiLCJfZ2V0RW1wdHlJbWFnZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIkhUTUw1QmFja2VuZCIsImNyZWF0ZUJhY2tlbmQiLCJtYW5hZ2VyIiwiY29udGV4dCIsIm9wdGlvbnMiLCJIVE1MNUJhY2tlbmRJbXBsIl0sInNvdXJjZXMiOlsiLi4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQmFja2VuZEZhY3RvcnksIERyYWdEcm9wTWFuYWdlciB9IGZyb20gJ2RuZC1jb3JlJ1xuXG5pbXBvcnQgeyBIVE1MNUJhY2tlbmRJbXBsIH0gZnJvbSAnLi9IVE1MNUJhY2tlbmRJbXBsLmpzJ1xuaW1wb3J0IHR5cGUgeyBIVE1MNUJhY2tlbmRDb250ZXh0LCBIVE1MNUJhY2tlbmRPcHRpb25zIH0gZnJvbSAnLi90eXBlcy5qcydcbmV4cG9ydCB7IGdldEVtcHR5SW1hZ2UgfSBmcm9tICcuL2dldEVtcHR5SW1hZ2UuanMnXG5leHBvcnQgKiBhcyBOYXRpdmVUeXBlcyBmcm9tICcuL05hdGl2ZVR5cGVzLmpzJ1xuZXhwb3J0IHR5cGUgeyBIVE1MNUJhY2tlbmRDb250ZXh0LCBIVE1MNUJhY2tlbmRPcHRpb25zIH0gZnJvbSAnLi90eXBlcy5qcydcblxuZXhwb3J0IGNvbnN0IEhUTUw1QmFja2VuZDogQmFja2VuZEZhY3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCYWNrZW5kKFxuXHRtYW5hZ2VyOiBEcmFnRHJvcE1hbmFnZXIsXG5cdGNvbnRleHQ/OiBIVE1MNUJhY2tlbmRDb250ZXh0LFxuXHRvcHRpb25zPzogSFRNTDVCYWNrZW5kT3B0aW9ucyxcbik6IEhUTUw1QmFja2VuZEltcGwge1xuXHRyZXR1cm4gbmV3IEhUTUw1QmFja2VuZEltcGwobWFuYWdlciwgY29udGV4dCwgb3B0aW9ucylcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRUEsSUFBQUEsaUJBQUEsR0FBQUMsT0FBQTs7QUFHK0NDLE9BQUEsQ0FBQUMsV0FBQSxHQUFBQyxZQUFBO0FBRC9DLElBQUFDLGNBQUEsR0FBQUosT0FBQTtBQUFrRCxTQUFBSyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEsQ0FBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBSSx3QkFBQUMsR0FBQSxFQUFBTCxXQUFBLFNBQUFBLFdBQUEsSUFBQUssR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBLDRCQUFBRSxPQUFBLEVBQUFGLEdBQUEsVUFBQUcsS0FBQSxHQUFBVCx3QkFBQSxDQUFBQyxXQUFBLE9BQUFRLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFKLEdBQUEsWUFBQUcsS0FBQSxDQUFBRSxHQUFBLENBQUFMLEdBQUEsU0FBQU0sTUFBQSxXQUFBQyxxQkFBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxHQUFBLElBQUFYLEdBQUEsUUFBQVcsR0FBQSxrQkFBQUgsTUFBQSxDQUFBSSxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBZCxHQUFBLEVBQUFXLEdBQUEsU0FBQUksSUFBQSxHQUFBUixxQkFBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFWLEdBQUEsRUFBQVcsR0FBQSxjQUFBSSxJQUFBLEtBQUFBLElBQUEsQ0FBQVYsR0FBQSxJQUFBVSxJQUFBLENBQUFDLEdBQUEsS0FBQVIsTUFBQSxDQUFBQyxjQUFBLENBQUFILE1BQUEsRUFBQUssR0FBQSxFQUFBSSxJQUFBLFlBQUFULE1BQUEsQ0FBQUssR0FBQSxJQUFBWCxHQUFBLENBQUFXLEdBQUEsU0FBQUwsTUFBQSxDQUFBSixPQUFBLEdBQUFGLEdBQUEsTUFBQUcsS0FBQSxJQUFBQSxLQUFBLENBQUFhLEdBQUEsQ0FBQWhCLEdBQUEsRUFBQU0sTUFBQSxZQUFBQSxNQUFBO0FBSTNDLE1BQU1XLFlBQVksR0FBbUIsU0FBU0MsYUFBYUEsQ0FDakVDLE9BQXdCLEVBQ3hCQyxPQUE2QixFQUM3QkMsT0FBNkIsRUFDVjtFQUNuQixPQUFPLElBQUlDLGtDQUFnQixDQUFDSCxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxDQUFDO0NBQ3REO0FBQUEvQixPQUFBLENBQUEyQixZQUFBLEdBQUFBLFlBQUEifQ==