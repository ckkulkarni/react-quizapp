3941e76af36a86eaa8eea87fd05aa55a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _App = require("./../../App");
var _material = require("@mui/material");
var _reactDnd = require("react-dnd");
var _NavigateNext = _interopRequireDefault(require("@mui/icons-material/NavigateNext"));
var _reactRouter = require("react-router");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Question5 = () => {
  const navigation = (0, _reactRouter.useNavigate)();
  const {
    score,
    setScore,
    trackScore,
    setTracker,
    selectedLanguage
  } = (0, _react.useContext)(_App.QuizContext);
  let questions = [];
  let answers = [];
  if (selectedLanguage === "ReactJS") {
    questions = ["React is a _", "React is used to make _", "The library used to navigate between components is _", "State Management Library _"];
    answers = ["Redux", "React-Router-Dom", "UIs", "Libary of JS"];
  } else if (selectedLanguage === "React Native") {
    questions = ["React Native is a _", "React Native is used to make _", "The library used to navigate between components is _", "State Management Library _"];
    answers = ["Redux", "React Native Navigate", "Mobile Apps", "Libary of JS"];
  } else if (selectedLanguage === "Java") {
    questions = ["Java is an _", "To enter custom inputs in Java, we use _", "JSP stands for _", "API used to connect to SQL _"];
    answers = ["JDBC", "Java server pages", "Scanner", "Object-oriented Language"];
  }
  const [isSubmitted, setIsSubmitted] = (0, _react.useState)(false);
  const [questionsObject, setQuestionsObject] = (0, _react.useState)(questions);
  const [answersObject, setAnswersObject] = (0, _react.useState)(answers);
  const [droppedAnswers, setDroppedAnswers] = (0, _react.useState)([]);
  const handleDrop = (index, answer) => {
    const updatedQuestions = [...questionsObject];
    if (selectedLanguage === "ReactJS") {
      if (index === 0 && answer === answersObject[3] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 1 && answer === answersObject[2] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 2 && answer === answersObject[1] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 3 && answer === answersObject[0] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      }
      setDroppedAnswers(prevDropped => [...prevDropped, answer]);
    } else if (selectedLanguage === "React Native") {
      if (index === 0 && answer === answersObject[3] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 1 && answer === answersObject[2] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 2 && answer === answersObject[1] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 3 && answer === answersObject[0] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      }
      setDroppedAnswers(prevDropped => [...prevDropped, answer]);
    } else if (selectedLanguage === "Java") {
      if (index === 0 && answer === answersObject[3] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 1 && answer === answersObject[2] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 2 && answer === answersObject[1] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 3 && answer === answersObject[0] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      }
      setDroppedAnswers(prevDropped => [...prevDropped, answer]);
    }
    setQuestionsObject(updatedQuestions);
  };
  const handleNavigation = () => {
    navigation("/submission");
  };
  const DraggableAnswer = ({
    answer
  }) => {
    const [{
      isDragging
    }, drag] = (0, _reactDnd.useDrag)({
      type: "ANSWER",
      item: {
        answer
      },
      collect: monitor => ({
        isDragging: monitor.isDragging()
      })
    });
    const isDropped = droppedAnswers.includes(answer);
    return /*#__PURE__*/React.createElement("div", {
      ref: drag,
      style: {
        opacity: isDragging ? 0.5 : 1,
        cursor: "move",
        display: isDropped ? "none" : "block"
      }
    }, /*#__PURE__*/React.createElement(_material.Typography, null, answer));
  };
  const DropZone = ({
    index,
    onDrop
  }) => {
    const [{
      isOver
    }, drop] = (0, _reactDnd.useDrop)({
      accept: "ANSWER",
      drop: item => onDrop(index, item.answer),
      collect: monitor => ({
        isOver: monitor.isOver()
      })
    });
    return /*#__PURE__*/React.createElement("div", {
      ref: drop,
      style: {
        backgroundColor: isOver ? "lightblue" : "white",
        flex: 1,
        height: "100%"
      }
    }, "Drop here");
  };
  const handleQuestionNavigation = index => {
    navigation(`/question${index}`);
  };
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_material.Box, {
    sx: {
      display: "flex",
      gap: 1,
      flexDirection: "column",
      alignItems: "flex-end",
      p: 1,
      mt: "25vh",
      mr: 2
    }
  }, [1, 2, 3, 4, 5].map(number => /*#__PURE__*/React.createElement(_material.IconButton, {
    onClick: () => handleQuestionNavigation(number),
    sx: {
      border: 1,
      borderColor: "divider"
    }
  }, number))), /*#__PURE__*/React.createElement("div", {
    className: "quiz-container"
  }, /*#__PURE__*/React.createElement(_material.Box, {
    sx: {
      display: "flex",
      justifyContent: "center",
      alignItems: "flex-start",
      flexDirection: "column",
      gap: 2
    }
  }, /*#__PURE__*/React.createElement(_material.Box, {
    sx: {
      display: "flex",
      flexDirection: "column",
      gap: 1
    }
  }, trackScore && /*#__PURE__*/React.createElement(_material.Typography, null, "Score: ", score), /*#__PURE__*/React.createElement(_material.Button, {
    variant: "outlined",
    onClick: () => {
      setTracker(!trackScore);
    }
  }, trackScore ? "Disable Score Tracking" : "Enable Score Tracking")), /*#__PURE__*/React.createElement(_material.Box, {
    sx: {
      display: "flex"
    }
  }, /*#__PURE__*/React.createElement(_material.Box, null, questionsObject.map((question, index) => /*#__PURE__*/React.createElement(_material.Box, {
    key: index,
    sx: {
      display: "flex",
      alignItems: "center",
      gap: 2,
      padding: 2,
      backgroundColor: "lightgray",
      marginBottom: 2
    }
  }, /*#__PURE__*/React.createElement(_material.Typography, null, question), question.includes("_") && /*#__PURE__*/React.createElement(DropZone, {
    index: index,
    onDrop: handleDrop
  })))), /*#__PURE__*/React.createElement(_material.Box, null, droppedAnswers.length === 4 ? /*#__PURE__*/React.createElement(_material.Box, null) : /*#__PURE__*/React.createElement(_material.Box, null, answersObject.map((answer, index) => /*#__PURE__*/React.createElement(_material.Box, {
    key: index,
    sx: {
      display: "flex",
      alignItems: "center",
      gap: 2,
      padding: 2,
      backgroundColor: "lightgray",
      marginBottom: 2
    }
  }, /*#__PURE__*/React.createElement(DraggableAnswer, {
    key: index,
    answer: answer
  })))))), /*#__PURE__*/React.createElement(_material.Box, {
    sx: {
      display: "flex"
    }
  }, /*#__PURE__*/React.createElement(_material.Button, {
    variant: "contained",
    disabled: isSubmitted,
    onClick: () => setIsSubmitted(true)
  }, "Submit"), /*#__PURE__*/React.createElement(_material.IconButton, {
    onClick: handleNavigation
  }, /*#__PURE__*/React.createElement(_NavigateNext.default, null))))));
};
var _default = Question5;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,