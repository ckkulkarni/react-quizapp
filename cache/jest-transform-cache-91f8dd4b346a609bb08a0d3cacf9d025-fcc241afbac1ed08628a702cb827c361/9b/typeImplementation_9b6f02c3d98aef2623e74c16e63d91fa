ac46987886ca07c105208daa50561dbe
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeImplementation = typeImplementation;
var _utils = require("../utils");
var _click = require("../click");
var _keyboard = require("../keyboard");
async function typeImplementation(element, text, {
  delay,
  skipClick = false,
  skipAutoClose = false,
  initialSelectionStart = undefined,
  initialSelectionEnd = undefined
}) {
  // TODO: properly type guard
  // we use this workaround for now to prevent changing behavior
  if (element.disabled) return;
  if (!skipClick) (0, _click.click)(element); // The focused element could change between each event, so get the currently active element each time

  const currentElement = () => (0, _utils.getActiveElement)(element.ownerDocument); // by default, a new element has its selection start and end at 0
  // but most of the time when people call "type", they expect it to type
  // at the end of the current input value. So, if the selection start
  // and end are both the default of 0, then we'll go ahead and change
  // them to the length of the current value.
  // the only time it would make sense to pass the initialSelectionStart or
  // initialSelectionEnd is if you have an input with a value and want to
  // explicitly start typing with the cursor at 0. Not super common.

  const value = (0, _utils.getValue)(currentElement());
  const {
    selectionStart,
    selectionEnd
  } = (0, _utils.getSelectionRange)(element);
  if (value != null && (selectionStart === null || selectionStart === 0) && (selectionEnd === null || selectionEnd === 0)) {
    (0, _utils.setSelectionRange)(currentElement(), initialSelectionStart != null ? initialSelectionStart : value.length, initialSelectionEnd != null ? initialSelectionEnd : value.length);
  }
  const {
    promise,
    releaseAllKeys
  } = (0, _keyboard.keyboardImplementationWrapper)(text, {
    delay,
    document: element.ownerDocument
  });
  if (delay > 0) {
    await promise;
  }
  if (!skipAutoClose) {
    releaseAllKeys();
  } // eslint-disable-next-line consistent-return -- we need to return the internal Promise so that it is catchable if we don't await

  return promise;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInR5cGVJbXBsZW1lbnRhdGlvbiIsIl91dGlscyIsInJlcXVpcmUiLCJfY2xpY2siLCJfa2V5Ym9hcmQiLCJlbGVtZW50IiwidGV4dCIsImRlbGF5Iiwic2tpcENsaWNrIiwic2tpcEF1dG9DbG9zZSIsImluaXRpYWxTZWxlY3Rpb25TdGFydCIsInVuZGVmaW5lZCIsImluaXRpYWxTZWxlY3Rpb25FbmQiLCJkaXNhYmxlZCIsImNsaWNrIiwiY3VycmVudEVsZW1lbnQiLCJnZXRBY3RpdmVFbGVtZW50Iiwib3duZXJEb2N1bWVudCIsImdldFZhbHVlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb25SYW5nZSIsInNldFNlbGVjdGlvblJhbmdlIiwibGVuZ3RoIiwicHJvbWlzZSIsInJlbGVhc2VBbGxLZXlzIiwia2V5Ym9hcmRJbXBsZW1lbnRhdGlvbldyYXBwZXIiLCJkb2N1bWVudCJdLCJzb3VyY2VzIjpbInR5cGVJbXBsZW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudHlwZUltcGxlbWVudGF0aW9uID0gdHlwZUltcGxlbWVudGF0aW9uO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuXG52YXIgX2NsaWNrID0gcmVxdWlyZShcIi4uL2NsaWNrXCIpO1xuXG52YXIgX2tleWJvYXJkID0gcmVxdWlyZShcIi4uL2tleWJvYXJkXCIpO1xuXG5hc3luYyBmdW5jdGlvbiB0eXBlSW1wbGVtZW50YXRpb24oZWxlbWVudCwgdGV4dCwge1xuICBkZWxheSxcbiAgc2tpcENsaWNrID0gZmFsc2UsXG4gIHNraXBBdXRvQ2xvc2UgPSBmYWxzZSxcbiAgaW5pdGlhbFNlbGVjdGlvblN0YXJ0ID0gdW5kZWZpbmVkLFxuICBpbml0aWFsU2VsZWN0aW9uRW5kID0gdW5kZWZpbmVkXG59KSB7XG4gIC8vIFRPRE86IHByb3Blcmx5IHR5cGUgZ3VhcmRcbiAgLy8gd2UgdXNlIHRoaXMgd29ya2Fyb3VuZCBmb3Igbm93IHRvIHByZXZlbnQgY2hhbmdpbmcgYmVoYXZpb3JcbiAgaWYgKGVsZW1lbnQuZGlzYWJsZWQpIHJldHVybjtcbiAgaWYgKCFza2lwQ2xpY2spICgwLCBfY2xpY2suY2xpY2spKGVsZW1lbnQpOyAvLyBUaGUgZm9jdXNlZCBlbGVtZW50IGNvdWxkIGNoYW5nZSBiZXR3ZWVuIGVhY2ggZXZlbnQsIHNvIGdldCB0aGUgY3VycmVudGx5IGFjdGl2ZSBlbGVtZW50IGVhY2ggdGltZVxuXG4gIGNvbnN0IGN1cnJlbnRFbGVtZW50ID0gKCkgPT4gKDAsIF91dGlscy5nZXRBY3RpdmVFbGVtZW50KShlbGVtZW50Lm93bmVyRG9jdW1lbnQpOyAvLyBieSBkZWZhdWx0LCBhIG5ldyBlbGVtZW50IGhhcyBpdHMgc2VsZWN0aW9uIHN0YXJ0IGFuZCBlbmQgYXQgMFxuICAvLyBidXQgbW9zdCBvZiB0aGUgdGltZSB3aGVuIHBlb3BsZSBjYWxsIFwidHlwZVwiLCB0aGV5IGV4cGVjdCBpdCB0byB0eXBlXG4gIC8vIGF0IHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgaW5wdXQgdmFsdWUuIFNvLCBpZiB0aGUgc2VsZWN0aW9uIHN0YXJ0XG4gIC8vIGFuZCBlbmQgYXJlIGJvdGggdGhlIGRlZmF1bHQgb2YgMCwgdGhlbiB3ZSdsbCBnbyBhaGVhZCBhbmQgY2hhbmdlXG4gIC8vIHRoZW0gdG8gdGhlIGxlbmd0aCBvZiB0aGUgY3VycmVudCB2YWx1ZS5cbiAgLy8gdGhlIG9ubHkgdGltZSBpdCB3b3VsZCBtYWtlIHNlbnNlIHRvIHBhc3MgdGhlIGluaXRpYWxTZWxlY3Rpb25TdGFydCBvclxuICAvLyBpbml0aWFsU2VsZWN0aW9uRW5kIGlzIGlmIHlvdSBoYXZlIGFuIGlucHV0IHdpdGggYSB2YWx1ZSBhbmQgd2FudCB0b1xuICAvLyBleHBsaWNpdGx5IHN0YXJ0IHR5cGluZyB3aXRoIHRoZSBjdXJzb3IgYXQgMC4gTm90IHN1cGVyIGNvbW1vbi5cblxuXG4gIGNvbnN0IHZhbHVlID0gKDAsIF91dGlscy5nZXRWYWx1ZSkoY3VycmVudEVsZW1lbnQoKSk7XG4gIGNvbnN0IHtcbiAgICBzZWxlY3Rpb25TdGFydCxcbiAgICBzZWxlY3Rpb25FbmRcbiAgfSA9ICgwLCBfdXRpbHMuZ2V0U2VsZWN0aW9uUmFuZ2UpKGVsZW1lbnQpO1xuXG4gIGlmICh2YWx1ZSAhPSBudWxsICYmIChzZWxlY3Rpb25TdGFydCA9PT0gbnVsbCB8fCBzZWxlY3Rpb25TdGFydCA9PT0gMCkgJiYgKHNlbGVjdGlvbkVuZCA9PT0gbnVsbCB8fCBzZWxlY3Rpb25FbmQgPT09IDApKSB7XG4gICAgKDAsIF91dGlscy5zZXRTZWxlY3Rpb25SYW5nZSkoY3VycmVudEVsZW1lbnQoKSwgaW5pdGlhbFNlbGVjdGlvblN0YXJ0ICE9IG51bGwgPyBpbml0aWFsU2VsZWN0aW9uU3RhcnQgOiB2YWx1ZS5sZW5ndGgsIGluaXRpYWxTZWxlY3Rpb25FbmQgIT0gbnVsbCA/IGluaXRpYWxTZWxlY3Rpb25FbmQgOiB2YWx1ZS5sZW5ndGgpO1xuICB9XG5cbiAgY29uc3Qge1xuICAgIHByb21pc2UsXG4gICAgcmVsZWFzZUFsbEtleXNcbiAgfSA9ICgwLCBfa2V5Ym9hcmQua2V5Ym9hcmRJbXBsZW1lbnRhdGlvbldyYXBwZXIpKHRleHQsIHtcbiAgICBkZWxheSxcbiAgICBkb2N1bWVudDogZWxlbWVudC5vd25lckRvY3VtZW50XG4gIH0pO1xuXG4gIGlmIChkZWxheSA+IDApIHtcbiAgICBhd2FpdCBwcm9taXNlO1xuICB9XG5cbiAgaWYgKCFza2lwQXV0b0Nsb3NlKSB7XG4gICAgcmVsZWFzZUFsbEtleXMoKTtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm4gLS0gd2UgbmVlZCB0byByZXR1cm4gdGhlIGludGVybmFsIFByb21pc2Ugc28gdGhhdCBpdCBpcyBjYXRjaGFibGUgaWYgd2UgZG9uJ3QgYXdhaXRcblxuXG4gIHJldHVybiBwcm9taXNlO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLGtCQUFrQixHQUFHQSxrQkFBa0I7QUFFL0MsSUFBSUMsTUFBTSxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBRWhDLElBQUlDLE1BQU0sR0FBR0QsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUVoQyxJQUFJRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFFdEMsZUFBZUYsa0JBQWtCQSxDQUFDSyxPQUFPLEVBQUVDLElBQUksRUFBRTtFQUMvQ0MsS0FBSztFQUNMQyxTQUFTLEdBQUcsS0FBSztFQUNqQkMsYUFBYSxHQUFHLEtBQUs7RUFDckJDLHFCQUFxQixHQUFHQyxTQUFTO0VBQ2pDQyxtQkFBbUIsR0FBR0Q7QUFDeEIsQ0FBQyxFQUFFO0VBQ0Q7RUFDQTtFQUNBLElBQUlOLE9BQU8sQ0FBQ1EsUUFBUSxFQUFFO0VBQ3RCLElBQUksQ0FBQ0wsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFTCxNQUFNLENBQUNXLEtBQUssRUFBRVQsT0FBTyxDQUFDLENBQUMsQ0FBQzs7RUFFNUMsTUFBTVUsY0FBYyxHQUFHQSxDQUFBLEtBQU0sQ0FBQyxDQUFDLEVBQUVkLE1BQU0sQ0FBQ2UsZ0JBQWdCLEVBQUVYLE9BQU8sQ0FBQ1ksYUFBYSxDQUFDLENBQUMsQ0FBQztFQUNsRjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFHQSxNQUFNbEIsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFRSxNQUFNLENBQUNpQixRQUFRLEVBQUVILGNBQWMsRUFBRSxDQUFDO0VBQ3BELE1BQU07SUFDSkksY0FBYztJQUNkQztFQUNGLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRW5CLE1BQU0sQ0FBQ29CLGlCQUFpQixFQUFFaEIsT0FBTyxDQUFDO0VBRTFDLElBQUlOLEtBQUssSUFBSSxJQUFJLEtBQUtvQixjQUFjLEtBQUssSUFBSSxJQUFJQSxjQUFjLEtBQUssQ0FBQyxDQUFDLEtBQUtDLFlBQVksS0FBSyxJQUFJLElBQUlBLFlBQVksS0FBSyxDQUFDLENBQUMsRUFBRTtJQUN2SCxDQUFDLENBQUMsRUFBRW5CLE1BQU0sQ0FBQ3FCLGlCQUFpQixFQUFFUCxjQUFjLEVBQUUsRUFBRUwscUJBQXFCLElBQUksSUFBSSxHQUFHQSxxQkFBcUIsR0FBR1gsS0FBSyxDQUFDd0IsTUFBTSxFQUFFWCxtQkFBbUIsSUFBSSxJQUFJLEdBQUdBLG1CQUFtQixHQUFHYixLQUFLLENBQUN3QixNQUFNLENBQUM7RUFDekw7RUFFQSxNQUFNO0lBQ0pDLE9BQU87SUFDUEM7RUFDRixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUVyQixTQUFTLENBQUNzQiw2QkFBNkIsRUFBRXBCLElBQUksRUFBRTtJQUNyREMsS0FBSztJQUNMb0IsUUFBUSxFQUFFdEIsT0FBTyxDQUFDWTtFQUNwQixDQUFDLENBQUM7RUFFRixJQUFJVixLQUFLLEdBQUcsQ0FBQyxFQUFFO0lBQ2IsTUFBTWlCLE9BQU87RUFDZjtFQUVBLElBQUksQ0FBQ2YsYUFBYSxFQUFFO0lBQ2xCZ0IsY0FBYyxFQUFFO0VBQ2xCLENBQUMsQ0FBQzs7RUFHRixPQUFPRCxPQUFPO0FBQ2hCIn0=