f7df2d743520414ff034f57b28ee2fa9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.paste = paste;
var _dom = require("@testing-library/dom");
var _utils = require("./utils");
function isSupportedElement(element) {
  return (0, _utils.isElementType)(element, 'input') && Boolean(_utils.editableInputTypes[element.type]) || (0, _utils.isElementType)(element, 'textarea');
}
function paste(element, text, init, {
  initialSelectionStart,
  initialSelectionEnd
} = {}) {
  // TODO: implement for contenteditable
  if (!isSupportedElement(element)) {
    throw new TypeError(`The given ${element.tagName} element is currently unsupported.
      A PR extending this implementation would be very much welcome at https://github.com/testing-library/user-event`);
  }
  if ((0, _utils.isDisabled)(element)) {
    return;
  }
  (0, _utils.eventWrapper)(() => element.focus()); // by default, a new element has it's selection start and end at 0
  // but most of the time when people call "paste", they expect it to paste
  // at the end of the current input value. So, if the selection start
  // and end are both the default of 0, then we'll go ahead and change
  // them to the length of the current value.
  // the only time it would make sense to pass the initialSelectionStart or
  // initialSelectionEnd is if you have an input with a value and want to
  // explicitely start typing with the cursor at 0. Not super common.

  if (element.selectionStart === 0 && element.selectionEnd === 0) {
    (0, _utils.setSelectionRange)(element, initialSelectionStart != null ? initialSelectionStart : element.value.length, initialSelectionEnd != null ? initialSelectionEnd : element.value.length);
  }
  _dom.fireEvent.paste(element, init);
  if (element.readOnly) {
    return;
  }
  text = text.substr(0, (0, _utils.getSpaceUntilMaxLength)(element));
  const {
    newValue,
    newSelectionStart
  } = (0, _utils.calculateNewValue)(text, element);
  _dom.fireEvent.input(element, {
    inputType: 'insertFromPaste',
    target: {
      value: newValue
    }
  });
  (0, _utils.setSelectionRange)(element,
  // TODO: investigate why the selection caused by invalid parameters was expected
  {
    newSelectionStart,
    selectionEnd: newSelectionStart
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInBhc3RlIiwiX2RvbSIsInJlcXVpcmUiLCJfdXRpbHMiLCJpc1N1cHBvcnRlZEVsZW1lbnQiLCJlbGVtZW50IiwiaXNFbGVtZW50VHlwZSIsIkJvb2xlYW4iLCJlZGl0YWJsZUlucHV0VHlwZXMiLCJ0eXBlIiwidGV4dCIsImluaXQiLCJpbml0aWFsU2VsZWN0aW9uU3RhcnQiLCJpbml0aWFsU2VsZWN0aW9uRW5kIiwiVHlwZUVycm9yIiwidGFnTmFtZSIsImlzRGlzYWJsZWQiLCJldmVudFdyYXBwZXIiLCJmb2N1cyIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJsZW5ndGgiLCJmaXJlRXZlbnQiLCJyZWFkT25seSIsInN1YnN0ciIsImdldFNwYWNlVW50aWxNYXhMZW5ndGgiLCJuZXdWYWx1ZSIsIm5ld1NlbGVjdGlvblN0YXJ0IiwiY2FsY3VsYXRlTmV3VmFsdWUiLCJpbnB1dCIsImlucHV0VHlwZSIsInRhcmdldCJdLCJzb3VyY2VzIjpbInBhc3RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wYXN0ZSA9IHBhc3RlO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoXCJAdGVzdGluZy1saWJyYXJ5L2RvbVwiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBpc1N1cHBvcnRlZEVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gKDAsIF91dGlscy5pc0VsZW1lbnRUeXBlKShlbGVtZW50LCAnaW5wdXQnKSAmJiBCb29sZWFuKF91dGlscy5lZGl0YWJsZUlucHV0VHlwZXNbZWxlbWVudC50eXBlXSkgfHwgKDAsIF91dGlscy5pc0VsZW1lbnRUeXBlKShlbGVtZW50LCAndGV4dGFyZWEnKTtcbn1cblxuZnVuY3Rpb24gcGFzdGUoZWxlbWVudCwgdGV4dCwgaW5pdCwge1xuICBpbml0aWFsU2VsZWN0aW9uU3RhcnQsXG4gIGluaXRpYWxTZWxlY3Rpb25FbmRcbn0gPSB7fSkge1xuICAvLyBUT0RPOiBpbXBsZW1lbnQgZm9yIGNvbnRlbnRlZGl0YWJsZVxuICBpZiAoIWlzU3VwcG9ydGVkRWxlbWVudChlbGVtZW50KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFRoZSBnaXZlbiAke2VsZW1lbnQudGFnTmFtZX0gZWxlbWVudCBpcyBjdXJyZW50bHkgdW5zdXBwb3J0ZWQuXG4gICAgICBBIFBSIGV4dGVuZGluZyB0aGlzIGltcGxlbWVudGF0aW9uIHdvdWxkIGJlIHZlcnkgbXVjaCB3ZWxjb21lIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS90ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudGApO1xuICB9XG5cbiAgaWYgKCgwLCBfdXRpbHMuaXNEaXNhYmxlZCkoZWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAoMCwgX3V0aWxzLmV2ZW50V3JhcHBlcikoKCkgPT4gZWxlbWVudC5mb2N1cygpKTsgLy8gYnkgZGVmYXVsdCwgYSBuZXcgZWxlbWVudCBoYXMgaXQncyBzZWxlY3Rpb24gc3RhcnQgYW5kIGVuZCBhdCAwXG4gIC8vIGJ1dCBtb3N0IG9mIHRoZSB0aW1lIHdoZW4gcGVvcGxlIGNhbGwgXCJwYXN0ZVwiLCB0aGV5IGV4cGVjdCBpdCB0byBwYXN0ZVxuICAvLyBhdCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGlucHV0IHZhbHVlLiBTbywgaWYgdGhlIHNlbGVjdGlvbiBzdGFydFxuICAvLyBhbmQgZW5kIGFyZSBib3RoIHRoZSBkZWZhdWx0IG9mIDAsIHRoZW4gd2UnbGwgZ28gYWhlYWQgYW5kIGNoYW5nZVxuICAvLyB0aGVtIHRvIHRoZSBsZW5ndGggb2YgdGhlIGN1cnJlbnQgdmFsdWUuXG4gIC8vIHRoZSBvbmx5IHRpbWUgaXQgd291bGQgbWFrZSBzZW5zZSB0byBwYXNzIHRoZSBpbml0aWFsU2VsZWN0aW9uU3RhcnQgb3JcbiAgLy8gaW5pdGlhbFNlbGVjdGlvbkVuZCBpcyBpZiB5b3UgaGF2ZSBhbiBpbnB1dCB3aXRoIGEgdmFsdWUgYW5kIHdhbnQgdG9cbiAgLy8gZXhwbGljaXRlbHkgc3RhcnQgdHlwaW5nIHdpdGggdGhlIGN1cnNvciBhdCAwLiBOb3Qgc3VwZXIgY29tbW9uLlxuXG4gIGlmIChlbGVtZW50LnNlbGVjdGlvblN0YXJ0ID09PSAwICYmIGVsZW1lbnQuc2VsZWN0aW9uRW5kID09PSAwKSB7XG4gICAgKDAsIF91dGlscy5zZXRTZWxlY3Rpb25SYW5nZSkoZWxlbWVudCwgaW5pdGlhbFNlbGVjdGlvblN0YXJ0ICE9IG51bGwgPyBpbml0aWFsU2VsZWN0aW9uU3RhcnQgOiBlbGVtZW50LnZhbHVlLmxlbmd0aCwgaW5pdGlhbFNlbGVjdGlvbkVuZCAhPSBudWxsID8gaW5pdGlhbFNlbGVjdGlvbkVuZCA6IGVsZW1lbnQudmFsdWUubGVuZ3RoKTtcbiAgfVxuXG4gIF9kb20uZmlyZUV2ZW50LnBhc3RlKGVsZW1lbnQsIGluaXQpO1xuXG4gIGlmIChlbGVtZW50LnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGV4dCA9IHRleHQuc3Vic3RyKDAsICgwLCBfdXRpbHMuZ2V0U3BhY2VVbnRpbE1heExlbmd0aCkoZWxlbWVudCkpO1xuICBjb25zdCB7XG4gICAgbmV3VmFsdWUsXG4gICAgbmV3U2VsZWN0aW9uU3RhcnRcbiAgfSA9ICgwLCBfdXRpbHMuY2FsY3VsYXRlTmV3VmFsdWUpKHRleHQsIGVsZW1lbnQpO1xuXG4gIF9kb20uZmlyZUV2ZW50LmlucHV0KGVsZW1lbnQsIHtcbiAgICBpbnB1dFR5cGU6ICdpbnNlcnRGcm9tUGFzdGUnLFxuICAgIHRhcmdldDoge1xuICAgICAgdmFsdWU6IG5ld1ZhbHVlXG4gICAgfVxuICB9KTtcblxuICAoMCwgX3V0aWxzLnNldFNlbGVjdGlvblJhbmdlKShlbGVtZW50LCAvLyBUT0RPOiBpbnZlc3RpZ2F0ZSB3aHkgdGhlIHNlbGVjdGlvbiBjYXVzZWQgYnkgaW52YWxpZCBwYXJhbWV0ZXJzIHdhcyBleHBlY3RlZFxuICB7XG4gICAgbmV3U2VsZWN0aW9uU3RhcnQsXG4gICAgc2VsZWN0aW9uRW5kOiBuZXdTZWxlY3Rpb25TdGFydFxuICB9LCB7fSk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsS0FBSyxHQUFHQSxLQUFLO0FBRXJCLElBQUlDLElBQUksR0FBR0MsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0FBRTFDLElBQUlDLE1BQU0sR0FBR0QsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUUvQixTQUFTRSxrQkFBa0JBLENBQUNDLE9BQU8sRUFBRTtFQUNuQyxPQUFPLENBQUMsQ0FBQyxFQUFFRixNQUFNLENBQUNHLGFBQWEsRUFBRUQsT0FBTyxFQUFFLE9BQU8sQ0FBQyxJQUFJRSxPQUFPLENBQUNKLE1BQU0sQ0FBQ0ssa0JBQWtCLENBQUNILE9BQU8sQ0FBQ0ksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRU4sTUFBTSxDQUFDRyxhQUFhLEVBQUVELE9BQU8sRUFBRSxVQUFVLENBQUM7QUFDMUo7QUFFQSxTQUFTTCxLQUFLQSxDQUFDSyxPQUFPLEVBQUVLLElBQUksRUFBRUMsSUFBSSxFQUFFO0VBQ2xDQyxxQkFBcUI7RUFDckJDO0FBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO0VBQ047RUFDQSxJQUFJLENBQUNULGtCQUFrQixDQUFDQyxPQUFPLENBQUMsRUFBRTtJQUNoQyxNQUFNLElBQUlTLFNBQVMsQ0FBRSxhQUFZVCxPQUFPLENBQUNVLE9BQVE7QUFDckQscUhBQXFILENBQUM7RUFDcEg7RUFFQSxJQUFJLENBQUMsQ0FBQyxFQUFFWixNQUFNLENBQUNhLFVBQVUsRUFBRVgsT0FBTyxDQUFDLEVBQUU7SUFDbkM7RUFDRjtFQUVBLENBQUMsQ0FBQyxFQUFFRixNQUFNLENBQUNjLFlBQVksRUFBRSxNQUFNWixPQUFPLENBQUNhLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztFQUNqRDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQSxJQUFJYixPQUFPLENBQUNjLGNBQWMsS0FBSyxDQUFDLElBQUlkLE9BQU8sQ0FBQ2UsWUFBWSxLQUFLLENBQUMsRUFBRTtJQUM5RCxDQUFDLENBQUMsRUFBRWpCLE1BQU0sQ0FBQ2tCLGlCQUFpQixFQUFFaEIsT0FBTyxFQUFFTyxxQkFBcUIsSUFBSSxJQUFJLEdBQUdBLHFCQUFxQixHQUFHUCxPQUFPLENBQUNOLEtBQUssQ0FBQ3VCLE1BQU0sRUFBRVQsbUJBQW1CLElBQUksSUFBSSxHQUFHQSxtQkFBbUIsR0FBR1IsT0FBTyxDQUFDTixLQUFLLENBQUN1QixNQUFNLENBQUM7RUFDaE07RUFFQXJCLElBQUksQ0FBQ3NCLFNBQVMsQ0FBQ3ZCLEtBQUssQ0FBQ0ssT0FBTyxFQUFFTSxJQUFJLENBQUM7RUFFbkMsSUFBSU4sT0FBTyxDQUFDbUIsUUFBUSxFQUFFO0lBQ3BCO0VBQ0Y7RUFFQWQsSUFBSSxHQUFHQSxJQUFJLENBQUNlLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUV0QixNQUFNLENBQUN1QixzQkFBc0IsRUFBRXJCLE9BQU8sQ0FBQyxDQUFDO0VBQ2xFLE1BQU07SUFDSnNCLFFBQVE7SUFDUkM7RUFDRixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUV6QixNQUFNLENBQUMwQixpQkFBaUIsRUFBRW5CLElBQUksRUFBRUwsT0FBTyxDQUFDO0VBRWhESixJQUFJLENBQUNzQixTQUFTLENBQUNPLEtBQUssQ0FBQ3pCLE9BQU8sRUFBRTtJQUM1QjBCLFNBQVMsRUFBRSxpQkFBaUI7SUFDNUJDLE1BQU0sRUFBRTtNQUNOakMsS0FBSyxFQUFFNEI7SUFDVDtFQUNGLENBQUMsQ0FBQztFQUVGLENBQUMsQ0FBQyxFQUFFeEIsTUFBTSxDQUFDa0IsaUJBQWlCLEVBQUVoQixPQUFPO0VBQUU7RUFDdkM7SUFDRXVCLGlCQUFpQjtJQUNqQlIsWUFBWSxFQUFFUTtFQUNoQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDUiJ9