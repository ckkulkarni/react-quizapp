6c97a82277835e229cbed59c73fee36f
"use strict";

var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _Home = _interopRequireDefault(require("./../../homeandsubmit/Home"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("./path/to/your/feature-file.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User submits form with valid inputs", ({
    given,
    when,
    and,
    then
  }) => {
    let container;
    let getByLabelText;
    let getByText;
    given("I am on the Home screen", () => {
      container = (0, _react.render)( /*#__PURE__*/React.createElement(_Home.default, null));
      getByLabelText = container.getByLabelText;
      getByText = container.getByText;
    });
    when("I enter a valid email {string}", email => {
      const emailInput = getByLabelText("Enter MailID:");
      _react.fireEvent.change(emailInput, {
        target: {
          value: email
        }
      });
    });
    and("I enter a valid name {string}", name => {
      const nameInput = getByLabelText("Enter your name:");
      _react.fireEvent.change(nameInput, {
        target: {
          value: name
        }
      });
    });
    and("I enter a valid phone number {string}", phone => {
      const phoneInput = getByLabelText("Enter your Phone Number:");
      _react.fireEvent.change(phoneInput, {
        target: {
          value: phone
        }
      });
    });
    and("I submit the form", () => {
      const submitButton = getByText("Submit");
      _react.fireEvent.click(submitButton);
    });
    then("I should see the start quiz button", () => {
      expect(_react.screen.getByText("Start Quiz")).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfamVzdEN1Y3VtYmVyIiwicmVxdWlyZSIsIl9yZWFjdCIsIl9Ib21lIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJnaXZlbiIsIndoZW4iLCJhbmQiLCJ0aGVuIiwiY29udGFpbmVyIiwiZ2V0QnlMYWJlbFRleHQiLCJnZXRCeVRleHQiLCJyZW5kZXIiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJlbWFpbCIsImVtYWlsSW5wdXQiLCJmaXJlRXZlbnQiLCJjaGFuZ2UiLCJ0YXJnZXQiLCJ2YWx1ZSIsIm5hbWUiLCJuYW1lSW5wdXQiLCJwaG9uZSIsInBob25lSW5wdXQiLCJzdWJtaXRCdXR0b24iLCJjbGljayIsImV4cGVjdCIsInNjcmVlbiIsInRvQmVJblRoZURvY3VtZW50Il0sInNvdXJjZXMiOlsiYmFzZS5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lRmVhdHVyZSwgbG9hZEZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50IH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcclxuaW1wb3J0IHsgYWN0IH0gZnJvbSBcInJlYWN0LWRvbS90ZXN0LXV0aWxzXCI7XHJcbmltcG9ydCBIb21lIGZyb20gXCIuLy4uLy4uL2hvbWVhbmRzdWJtaXQvSG9tZVwiO1xyXG5pbXBvcnQgeyBRdWl6Q29udGV4dCB9IGZyb20gXCIuLy4uLy4uLy4uL0FwcFwiO1xyXG5cclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKFwiLi9wYXRoL3RvL3lvdXIvZmVhdHVyZS1maWxlLmZlYXR1cmVcIik7XHJcblxyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsICh0ZXN0KSA9PiB7XHJcbiAgdGVzdChcIlVzZXIgc3VibWl0cyBmb3JtIHdpdGggdmFsaWQgaW5wdXRzXCIsICh7IGdpdmVuLCB3aGVuLCBhbmQsIHRoZW4gfSkgPT4ge1xyXG4gICAgbGV0IGNvbnRhaW5lcjtcclxuICAgIGxldCBnZXRCeUxhYmVsVGV4dDogYW55O1xyXG4gICAgbGV0IGdldEJ5VGV4dDogYW55O1xyXG5cclxuICAgIGdpdmVuKFwiSSBhbSBvbiB0aGUgSG9tZSBzY3JlZW5cIiwgKCkgPT4ge1xyXG4gICAgICBjb250YWluZXIgPSByZW5kZXIoPEhvbWUgLz4pO1xyXG4gICAgICBnZXRCeUxhYmVsVGV4dCA9IGNvbnRhaW5lci5nZXRCeUxhYmVsVGV4dDtcclxuICAgICAgZ2V0QnlUZXh0ID0gY29udGFpbmVyLmdldEJ5VGV4dDtcclxuICAgIH0pO1xyXG5cclxuICAgIHdoZW4oXCJJIGVudGVyIGEgdmFsaWQgZW1haWwge3N0cmluZ31cIiwgKGVtYWlsKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVtYWlsSW5wdXQgPSBnZXRCeUxhYmVsVGV4dChcIkVudGVyIE1haWxJRDpcIik7XHJcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZW1haWxJbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6IGVtYWlsIH0gfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhbmQoXCJJIGVudGVyIGEgdmFsaWQgbmFtZSB7c3RyaW5nfVwiLCAobmFtZSkgPT4ge1xyXG4gICAgICBjb25zdCBuYW1lSW5wdXQgPSBnZXRCeUxhYmVsVGV4dChcIkVudGVyIHlvdXIgbmFtZTpcIik7XHJcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UobmFtZUlucHV0LCB7IHRhcmdldDogeyB2YWx1ZTogbmFtZSB9IH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYW5kKFwiSSBlbnRlciBhIHZhbGlkIHBob25lIG51bWJlciB7c3RyaW5nfVwiLCAocGhvbmUpID0+IHtcclxuICAgICAgY29uc3QgcGhvbmVJbnB1dCA9IGdldEJ5TGFiZWxUZXh0KFwiRW50ZXIgeW91ciBQaG9uZSBOdW1iZXI6XCIpO1xyXG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKHBob25lSW5wdXQsIHsgdGFyZ2V0OiB7IHZhbHVlOiBwaG9uZSB9IH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYW5kKFwiSSBzdWJtaXQgdGhlIGZvcm1cIiwgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBnZXRCeVRleHQoXCJTdWJtaXRcIik7XHJcbiAgICAgIGZpcmVFdmVudC5jbGljayhzdWJtaXRCdXR0b24pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhlbihcIkkgc2hvdWxkIHNlZSB0aGUgc3RhcnQgcXVpeiBidXR0b25cIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcIlN0YXJ0IFF1aXpcIikpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxLQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFBOEMsU0FBQUcsdUJBQUFDLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFHOUMsTUFBTUcsT0FBTyxHQUFHLElBQUFDLHlCQUFXLEVBQUMscUNBQXFDLENBQUM7QUFFbEUsSUFBQUMsMkJBQWEsRUFBQ0YsT0FBTyxFQUFHRyxJQUFJLElBQUs7RUFDL0JBLElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxDQUFDO0lBQUVDLEtBQUs7SUFBRUMsSUFBSTtJQUFFQyxHQUFHO0lBQUVDO0VBQUssQ0FBQyxLQUFLO0lBQzFFLElBQUlDLFNBQVM7SUFDYixJQUFJQyxjQUFtQjtJQUN2QixJQUFJQyxTQUFjO0lBRWxCTixLQUFLLENBQUMseUJBQXlCLEVBQUUsTUFBTTtNQUNyQ0ksU0FBUyxHQUFHLElBQUFHLGFBQU0sZ0JBQUNDLEtBQUEsQ0FBQUMsYUFBQSxDQUFDbEIsS0FBQSxDQUFBSSxPQUFJLE9BQUcsQ0FBQztNQUM1QlUsY0FBYyxHQUFHRCxTQUFTLENBQUNDLGNBQWM7TUFDekNDLFNBQVMsR0FBR0YsU0FBUyxDQUFDRSxTQUFTO0lBQ2pDLENBQUMsQ0FBQztJQUVGTCxJQUFJLENBQUMsZ0NBQWdDLEVBQUdTLEtBQUssSUFBSztNQUNoRCxNQUFNQyxVQUFVLEdBQUdOLGNBQWMsQ0FBQyxlQUFlLENBQUM7TUFDbERPLGdCQUFTLENBQUNDLE1BQU0sQ0FBQ0YsVUFBVSxFQUFFO1FBQUVHLE1BQU0sRUFBRTtVQUFFQyxLQUFLLEVBQUVMO1FBQU07TUFBRSxDQUFDLENBQUM7SUFDNUQsQ0FBQyxDQUFDO0lBRUZSLEdBQUcsQ0FBQywrQkFBK0IsRUFBR2MsSUFBSSxJQUFLO01BQzdDLE1BQU1DLFNBQVMsR0FBR1osY0FBYyxDQUFDLGtCQUFrQixDQUFDO01BQ3BETyxnQkFBUyxDQUFDQyxNQUFNLENBQUNJLFNBQVMsRUFBRTtRQUFFSCxNQUFNLEVBQUU7VUFBRUMsS0FBSyxFQUFFQztRQUFLO01BQUUsQ0FBQyxDQUFDO0lBQzFELENBQUMsQ0FBQztJQUVGZCxHQUFHLENBQUMsdUNBQXVDLEVBQUdnQixLQUFLLElBQUs7TUFDdEQsTUFBTUMsVUFBVSxHQUFHZCxjQUFjLENBQUMsMEJBQTBCLENBQUM7TUFDN0RPLGdCQUFTLENBQUNDLE1BQU0sQ0FBQ00sVUFBVSxFQUFFO1FBQUVMLE1BQU0sRUFBRTtVQUFFQyxLQUFLLEVBQUVHO1FBQU07TUFBRSxDQUFDLENBQUM7SUFDNUQsQ0FBQyxDQUFDO0lBRUZoQixHQUFHLENBQUMsbUJBQW1CLEVBQUUsTUFBTTtNQUM3QixNQUFNa0IsWUFBWSxHQUFHZCxTQUFTLENBQUMsUUFBUSxDQUFDO01BQ3hDTSxnQkFBUyxDQUFDUyxLQUFLLENBQUNELFlBQVksQ0FBQztJQUMvQixDQUFDLENBQUM7SUFFRmpCLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxNQUFNO01BQy9DbUIsTUFBTSxDQUFDQyxhQUFNLENBQUNqQixTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQ2tCLGlCQUFpQixFQUFFO0lBQzVELENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9