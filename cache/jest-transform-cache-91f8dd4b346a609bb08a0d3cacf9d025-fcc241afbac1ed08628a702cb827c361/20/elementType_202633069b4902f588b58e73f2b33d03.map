{"version":3,"names":["_propTypes","require","_reactIs","_and","_interopRequireDefault","_getComponentName","_wrapValidator","getTypeName","Type","type","validateElementType","props","propName","componentName","TypeError","concat","elementTypeValidator","element","isValidElementType","_typeof","elementType","_len","arguments","length","rest","Array","_key","apply","isRequired","typeName","validatorName"],"sources":["../src/elementType.js"],"sourcesContent":["import { element } from 'prop-types';\nimport { isValidElementType } from 'react-is';\n\nimport and from './and';\nimport getComponentName from './helpers/getComponentName';\nimport wrapValidator from './helpers/wrapValidator';\n\nfunction getTypeName(Type) {\n  if (typeof Type === 'string') {\n    return Type;\n  }\n  const type = getComponentName(Type);\n\n  /* istanbul ignore next */ // in environments where functions do not have names\n  return type || 'Anonymous Component';\n}\n\nfunction validateElementType(Type, props, propName, componentName) {\n  const { type } = props[propName];\n\n  if (type === Type) {\n    return null;\n  }\n\n  return new TypeError(`${componentName}.${propName} must be a React element of type ${getTypeName(Type)}`);\n}\n\nexport default function elementTypeValidator(Type) {\n  if (Type === '*') {\n    return wrapValidator(element, 'elementType(*)', Type);\n  }\n\n  if (!isValidElementType(Type)) {\n    throw new TypeError(`Type must be a React Component, an HTML element tag name, or \"*\". Got an ${typeof Type}`);\n  }\n\n  function elementType(props, propName, componentName, ...rest) {\n    if (props[propName] == null) {\n      return null;\n    }\n    return validateElementType(Type, props, propName, componentName, ...rest);\n  }\n  elementType.isRequired = elementType; // covered by and + element\n\n  const typeName = getTypeName(Type);\n  const validatorName = `elementType(${typeName})`;\n  return wrapValidator(and([element, elementType], validatorName), validatorName, Type);\n}\n"],"mappings":";;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AAEA,IAAAE,IAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,iBAAA,GAAAD,sBAAA,CAAAH,OAAA;AACA,IAAAK,cAAA,GAAAF,sBAAA,CAAAH,OAAA;;;;;;;;;;;;;;;;;;;;AAEA,SAASM,WAATA,CAAqBC,IAArB,EAA2B;EACzB,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IAC5B,OAAOA,IAAP;EACD;EACD,IAAMC,IAAI,GAAG,IAAAJ,iBAAA,aAAiBG,IAAjB,CAAb;EAEA;EAA2B;;EAC3B,OAAOC,IAAI,IAAI,qBAAf;AACD;AAED,SAASC,mBAATA,CAA6BF,IAA7B,EAAmCG,KAAnC,EAA0CC,QAA1C,EAAoDC,aAApD,EAAmE;EAAA,IACzDJ,IADyD,GAChDE,KAAK,CAACC,QAAD,CAD2C,CACzDH,IADyD;EAGjE,IAAIA,IAAI,KAAKD,IAAb,EAAmB;IACjB,OAAO,IAAP;EACD;EAED,OAAO,IAAIM,SAAJ,IAAAC,MAAA,CAAiBF,aAAjB,OAAAE,MAAA,CAAkCH,QAAlC,uCAAAG,MAAA,CAA8ER,WAAW,CAACC,IAAD,CAAzF,EAAP;AACD;AAEc,SAASQ,oBAATA,CAA8BR,IAA9B,EAAoC;EACjD,IAAIA,IAAI,KAAK,GAAb,EAAkB;IAChB,OAAO,IAAAF,cAAA,aAAcN,UAAA,CAAAiB,OAAd,EAAuB,gBAAvB,EAAyCT,IAAzC,CAAP;EACD;EAED,IAAI,CAAC,IAAAN,QAAA,CAAAgB,kBAAA,EAAmBV,IAAnB,CAAL,EAA+B;IAC7B,MAAM,IAAIM,SAAJ,+EAAAC,MAAA,CAAAI,OAAA,CAAiGX,IAAjG,GAAN;EACD;EAED,SAASY,WAATA,CAAqBT,KAArB,EAA4BC,QAA5B,EAAsCC,aAAtC,EAA8D;IAC5D,IAAIF,KAAK,CAACC,QAAD,CAAL,IAAmB,IAAvB,EAA6B;MAC3B,OAAO,IAAP;IACD;IAH2D,SAAAS,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAM,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAANF,IAAM,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IAI5D,OAAOhB,mBAAmB,CAAAiB,KAAnB,UAAoBnB,IAApB,EAA0BG,KAA1B,EAAiCC,QAAjC,EAA2CC,aAA3C,EAAAE,MAAA,CAA6DS,IAA7D,EAAP;EACD;EACDJ,WAAW,CAACQ,UAAZ,GAAyBR,WAAzB,CAfiD,CAeX;;EAEtC,IAAMS,QAAQ,GAAGtB,WAAW,CAACC,IAAD,CAA5B;EACA,IAAMsB,aAAa,kBAAAf,MAAA,CAAkBc,QAAlB,MAAnB;EACA,OAAO,IAAAvB,cAAA,aAAc,IAAAH,IAAA,aAAI,CAACH,UAAA,CAAAiB,OAAD,EAAUG,WAAV,CAAJ,EAA4BU,aAA5B,CAAd,EAA0DA,aAA1D,EAAyEtB,IAAzE,CAAP;AACD"}