bd8aaaaea0043f2c2bef8ee1df0145c6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHover = createHover;
var _invariant = require("@react-dnd/invariant");
var _matchesType = require("../../utils/matchesType.js");
var _types = require("./types.js");
function createHover(manager) {
  return function hover(targetIdsArg, {
    clientOffset
  } = {}) {
    verifyTargetIdsIsArray(targetIdsArg);
    const targetIds = targetIdsArg.slice(0);
    const monitor = manager.getMonitor();
    const registry = manager.getRegistry();
    const draggedItemType = monitor.getItemType();
    removeNonMatchingTargetIds(targetIds, registry, draggedItemType);
    checkInvariants(targetIds, monitor, registry);
    hoverAllTargets(targetIds, monitor, registry);
    return {
      type: _types.HOVER,
      payload: {
        targetIds,
        clientOffset: clientOffset || null
      }
    };
  };
}
function verifyTargetIdsIsArray(targetIdsArg) {
  (0, _invariant.invariant)(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');
}
function checkInvariants(targetIds, monitor, registry) {
  (0, _invariant.invariant)(monitor.isDragging(), 'Cannot call hover while not dragging.');
  (0, _invariant.invariant)(!monitor.didDrop(), 'Cannot call hover after drop.');
  for (let i = 0; i < targetIds.length; i++) {
    const targetId = targetIds[i];
    (0, _invariant.invariant)(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');
    const target = registry.getTarget(targetId);
    (0, _invariant.invariant)(target, 'Expected targetIds to be registered.');
  }
}
function removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {
  // Remove those targetIds that don't match the targetType.  This
  // fixes shallow isOver which would only be non-shallow because of
  // non-matching targets.
  for (let i = targetIds.length - 1; i >= 0; i--) {
    const targetId = targetIds[i];
    const targetType = registry.getTargetType(targetId);
    if (!(0, _matchesType.matchesType)(targetType, draggedItemType)) {
      targetIds.splice(i, 1);
    }
  }
}
function hoverAllTargets(targetIds, monitor, registry) {
  // Finally call hover on all matching targets.
  targetIds.forEach(function (targetId) {
    const target = registry.getTarget(targetId);
    target.hover(monitor, targetId);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW52YXJpYW50IiwicmVxdWlyZSIsIl9tYXRjaGVzVHlwZSIsIl90eXBlcyIsImNyZWF0ZUhvdmVyIiwibWFuYWdlciIsImhvdmVyIiwidGFyZ2V0SWRzQXJnIiwiY2xpZW50T2Zmc2V0IiwidmVyaWZ5VGFyZ2V0SWRzSXNBcnJheSIsInRhcmdldElkcyIsInNsaWNlIiwibW9uaXRvciIsImdldE1vbml0b3IiLCJyZWdpc3RyeSIsImdldFJlZ2lzdHJ5IiwiZHJhZ2dlZEl0ZW1UeXBlIiwiZ2V0SXRlbVR5cGUiLCJyZW1vdmVOb25NYXRjaGluZ1RhcmdldElkcyIsImNoZWNrSW52YXJpYW50cyIsImhvdmVyQWxsVGFyZ2V0cyIsInR5cGUiLCJIT1ZFUiIsInBheWxvYWQiLCJpbnZhcmlhbnQiLCJBcnJheSIsImlzQXJyYXkiLCJpc0RyYWdnaW5nIiwiZGlkRHJvcCIsImkiLCJsZW5ndGgiLCJ0YXJnZXRJZCIsImxhc3RJbmRleE9mIiwidGFyZ2V0IiwiZ2V0VGFyZ2V0IiwidGFyZ2V0VHlwZSIsImdldFRhcmdldFR5cGUiLCJtYXRjaGVzVHlwZSIsInNwbGljZSIsImZvckVhY2giXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYWN0aW9ucy9kcmFnRHJvcC9ob3Zlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICdAcmVhY3QtZG5kL2ludmFyaWFudCdcblxuaW1wb3J0IHR5cGUge1xuXHRBY3Rpb24sXG5cdERyYWdEcm9wTWFuYWdlcixcblx0RHJhZ0Ryb3BNb25pdG9yLFxuXHRIYW5kbGVyUmVnaXN0cnksXG5cdEhvdmVyT3B0aW9ucyxcblx0SG92ZXJQYXlsb2FkLFxuXHRJZGVudGlmaWVyLFxufSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzLmpzJ1xuaW1wb3J0IHsgbWF0Y2hlc1R5cGUgfSBmcm9tICcuLi8uLi91dGlscy9tYXRjaGVzVHlwZS5qcydcbmltcG9ydCB7IEhPVkVSIH0gZnJvbSAnLi90eXBlcy5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhvdmVyKG1hbmFnZXI6IERyYWdEcm9wTWFuYWdlcikge1xuXHRyZXR1cm4gZnVuY3Rpb24gaG92ZXIoXG5cdFx0dGFyZ2V0SWRzQXJnOiBzdHJpbmdbXSxcblx0XHR7IGNsaWVudE9mZnNldCB9OiBIb3Zlck9wdGlvbnMgPSB7fSxcblx0KTogQWN0aW9uPEhvdmVyUGF5bG9hZD4ge1xuXHRcdHZlcmlmeVRhcmdldElkc0lzQXJyYXkodGFyZ2V0SWRzQXJnKVxuXHRcdGNvbnN0IHRhcmdldElkcyA9IHRhcmdldElkc0FyZy5zbGljZSgwKVxuXHRcdGNvbnN0IG1vbml0b3IgPSBtYW5hZ2VyLmdldE1vbml0b3IoKVxuXHRcdGNvbnN0IHJlZ2lzdHJ5ID0gbWFuYWdlci5nZXRSZWdpc3RyeSgpXG5cdFx0Y29uc3QgZHJhZ2dlZEl0ZW1UeXBlID0gbW9uaXRvci5nZXRJdGVtVHlwZSgpXG5cdFx0cmVtb3ZlTm9uTWF0Y2hpbmdUYXJnZXRJZHModGFyZ2V0SWRzLCByZWdpc3RyeSwgZHJhZ2dlZEl0ZW1UeXBlKVxuXHRcdGNoZWNrSW52YXJpYW50cyh0YXJnZXRJZHMsIG1vbml0b3IsIHJlZ2lzdHJ5KVxuXHRcdGhvdmVyQWxsVGFyZ2V0cyh0YXJnZXRJZHMsIG1vbml0b3IsIHJlZ2lzdHJ5KVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHR5cGU6IEhPVkVSLFxuXHRcdFx0cGF5bG9hZDoge1xuXHRcdFx0XHR0YXJnZXRJZHMsXG5cdFx0XHRcdGNsaWVudE9mZnNldDogY2xpZW50T2Zmc2V0IHx8IG51bGwsXG5cdFx0XHR9LFxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiB2ZXJpZnlUYXJnZXRJZHNJc0FycmF5KHRhcmdldElkc0FyZzogc3RyaW5nW10pIHtcblx0aW52YXJpYW50KEFycmF5LmlzQXJyYXkodGFyZ2V0SWRzQXJnKSwgJ0V4cGVjdGVkIHRhcmdldElkcyB0byBiZSBhbiBhcnJheS4nKVxufVxuXG5mdW5jdGlvbiBjaGVja0ludmFyaWFudHMoXG5cdHRhcmdldElkczogc3RyaW5nW10sXG5cdG1vbml0b3I6IERyYWdEcm9wTW9uaXRvcixcblx0cmVnaXN0cnk6IEhhbmRsZXJSZWdpc3RyeSxcbikge1xuXHRpbnZhcmlhbnQobW9uaXRvci5pc0RyYWdnaW5nKCksICdDYW5ub3QgY2FsbCBob3ZlciB3aGlsZSBub3QgZHJhZ2dpbmcuJylcblx0aW52YXJpYW50KCFtb25pdG9yLmRpZERyb3AoKSwgJ0Nhbm5vdCBjYWxsIGhvdmVyIGFmdGVyIGRyb3AuJylcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXRJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCB0YXJnZXRJZCA9IHRhcmdldElkc1tpXSBhcyBzdHJpbmdcblx0XHRpbnZhcmlhbnQoXG5cdFx0XHR0YXJnZXRJZHMubGFzdEluZGV4T2YodGFyZ2V0SWQpID09PSBpLFxuXHRcdFx0J0V4cGVjdGVkIHRhcmdldElkcyB0byBiZSB1bmlxdWUgaW4gdGhlIHBhc3NlZCBhcnJheS4nLFxuXHRcdClcblxuXHRcdGNvbnN0IHRhcmdldCA9IHJlZ2lzdHJ5LmdldFRhcmdldCh0YXJnZXRJZClcblx0XHRpbnZhcmlhbnQodGFyZ2V0LCAnRXhwZWN0ZWQgdGFyZ2V0SWRzIHRvIGJlIHJlZ2lzdGVyZWQuJylcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVOb25NYXRjaGluZ1RhcmdldElkcyhcblx0dGFyZ2V0SWRzOiBzdHJpbmdbXSxcblx0cmVnaXN0cnk6IEhhbmRsZXJSZWdpc3RyeSxcblx0ZHJhZ2dlZEl0ZW1UeXBlOiBJZGVudGlmaWVyIHwgbnVsbCxcbikge1xuXHQvLyBSZW1vdmUgdGhvc2UgdGFyZ2V0SWRzIHRoYXQgZG9uJ3QgbWF0Y2ggdGhlIHRhcmdldFR5cGUuICBUaGlzXG5cdC8vIGZpeGVzIHNoYWxsb3cgaXNPdmVyIHdoaWNoIHdvdWxkIG9ubHkgYmUgbm9uLXNoYWxsb3cgYmVjYXVzZSBvZlxuXHQvLyBub24tbWF0Y2hpbmcgdGFyZ2V0cy5cblx0Zm9yIChsZXQgaSA9IHRhcmdldElkcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdGNvbnN0IHRhcmdldElkID0gdGFyZ2V0SWRzW2ldIGFzIHN0cmluZ1xuXHRcdGNvbnN0IHRhcmdldFR5cGUgPSByZWdpc3RyeS5nZXRUYXJnZXRUeXBlKHRhcmdldElkKVxuXHRcdGlmICghbWF0Y2hlc1R5cGUodGFyZ2V0VHlwZSwgZHJhZ2dlZEl0ZW1UeXBlKSkge1xuXHRcdFx0dGFyZ2V0SWRzLnNwbGljZShpLCAxKVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBob3ZlckFsbFRhcmdldHMoXG5cdHRhcmdldElkczogc3RyaW5nW10sXG5cdG1vbml0b3I6IERyYWdEcm9wTW9uaXRvcixcblx0cmVnaXN0cnk6IEhhbmRsZXJSZWdpc3RyeSxcbikge1xuXHQvLyBGaW5hbGx5IGNhbGwgaG92ZXIgb24gYWxsIG1hdGNoaW5nIHRhcmdldHMuXG5cdHRhcmdldElkcy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXRJZCkge1xuXHRcdGNvbnN0IHRhcmdldCA9IHJlZ2lzdHJ5LmdldFRhcmdldCh0YXJnZXRJZClcblx0XHR0YXJnZXQuaG92ZXIobW9uaXRvciwgdGFyZ2V0SWQpXG5cdH0pXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMsT0FBQTtBQVdBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUYsT0FBQTtBQUVPLFNBQVNHLFdBQVdBLENBQUNDLE9BQXdCLEVBQUU7RUFDckQsT0FBTyxTQUFTQyxLQUFLQSxDQUNwQkMsWUFBc0IsRUFDdEI7SUFBRUM7RUFBWSxDQUFnQixHQUFHLEVBQUUsRUFDWjtJQUN2QkMsc0JBQXNCLENBQUNGLFlBQVksQ0FBQztJQUNwQyxNQUFNRyxTQUFTLEdBQUdILFlBQVksQ0FBQ0ksS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN2QyxNQUFNQyxPQUFPLEdBQUdQLE9BQU8sQ0FBQ1EsVUFBVSxFQUFFO0lBQ3BDLE1BQU1DLFFBQVEsR0FB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