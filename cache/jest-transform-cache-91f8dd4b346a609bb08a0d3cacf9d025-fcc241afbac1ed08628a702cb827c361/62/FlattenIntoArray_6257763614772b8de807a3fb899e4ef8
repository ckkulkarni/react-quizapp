dbf4a0ef454ef63be5bb5cd7f8a4b002
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $TypeError = GetIntrinsic('%TypeError%');
var MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');
var Call = require('./Call');
var CreateDataPropertyOrThrow = require('./CreateDataPropertyOrThrow');
var Get = require('./Get');
var HasProperty = require('./HasProperty');
var IsArray = require('./IsArray');
var LengthOfArrayLike = require('./LengthOfArrayLike');
var ToString = require('./ToString');

// https://262.ecma-international.org/11.0/#sec-flattenintoarray

// eslint-disable-next-line max-params
module.exports = function FlattenIntoArray(target, source, sourceLen, start, depth) {
  var mapperFunction;
  if (arguments.length > 5) {
    mapperFunction = arguments[5];
  }
  var targetIndex = start;
  var sourceIndex = 0;
  while (sourceIndex < sourceLen) {
    var P = ToString(sourceIndex);
    var exists = HasProperty(source, P);
    if (exists === true) {
      var element = Get(source, P);
      if (typeof mapperFunction !== 'undefined') {
        if (arguments.length <= 6) {
          throw new $TypeError('Assertion failed: thisArg is required when mapperFunction is provided');
        }
        element = Call(mapperFunction, arguments[6], [element, sourceIndex, source]);
      }
      var shouldFlatten = false;
      if (depth > 0) {
        shouldFlatten = IsArray(element);
      }
      if (shouldFlatten) {
        var elementLen = LengthOfArrayLike(element);
        targetIndex = FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);
      } else {
        if (targetIndex >= MAX_SAFE_INTEGER) {
          throw new $TypeError('index too large');
        }
        CreateDataPropertyOrThrow(target, ToString(targetIndex), element);
        targetIndex += 1;
      }
    }
    sourceIndex += 1;
  }
  return targetIndex;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJDYWxsIiwiQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyIsIkdldCIsIkhhc1Byb3BlcnR5IiwiSXNBcnJheSIsIkxlbmd0aE9mQXJyYXlMaWtlIiwiVG9TdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiRmxhdHRlbkludG9BcnJheSIsInRhcmdldCIsInNvdXJjZSIsInNvdXJjZUxlbiIsInN0YXJ0IiwiZGVwdGgiLCJtYXBwZXJGdW5jdGlvbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJQIiwiZXhpc3RzIiwiZWxlbWVudCIsInNob3VsZEZsYXR0ZW4iLCJlbGVtZW50TGVuIl0sInNvdXJjZXMiOlsiRmxhdHRlbkludG9BcnJheS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbWF4U2FmZUludGVnZXInKTtcblxudmFyIENhbGwgPSByZXF1aXJlKCcuL0NhbGwnKTtcbnZhciBDcmVhdGVEYXRhUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi9DcmVhdGVEYXRhUHJvcGVydHlPclRocm93Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnLi9HZXQnKTtcbnZhciBIYXNQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vSGFzUHJvcGVydHknKTtcbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnLi9Jc0FycmF5Jyk7XG52YXIgTGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuL0xlbmd0aE9mQXJyYXlMaWtlJyk7XG52YXIgVG9TdHJpbmcgPSByZXF1aXJlKCcuL1RvU3RyaW5nJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTEuMC8jc2VjLWZsYXR0ZW5pbnRvYXJyYXlcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gRmxhdHRlbkludG9BcnJheSh0YXJnZXQsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgpIHtcblx0dmFyIG1hcHBlckZ1bmN0aW9uO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDUpIHtcblx0XHRtYXBwZXJGdW5jdGlvbiA9IGFyZ3VtZW50c1s1XTtcblx0fVxuXG5cdHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuXHR2YXIgc291cmNlSW5kZXggPSAwO1xuXHR3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcblx0XHR2YXIgUCA9IFRvU3RyaW5nKHNvdXJjZUluZGV4KTtcblx0XHR2YXIgZXhpc3RzID0gSGFzUHJvcGVydHkoc291cmNlLCBQKTtcblx0XHRpZiAoZXhpc3RzID09PSB0cnVlKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IEdldChzb3VyY2UsIFApO1xuXHRcdFx0aWYgKHR5cGVvZiBtYXBwZXJGdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gNikge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiB0aGlzQXJnIGlzIHJlcXVpcmVkIHdoZW4gbWFwcGVyRnVuY3Rpb24gaXMgcHJvdmlkZWQnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbGVtZW50ID0gQ2FsbChtYXBwZXJGdW5jdGlvbiwgYXJndW1lbnRzWzZdLCBbZWxlbWVudCwgc291cmNlSW5kZXgsIHNvdXJjZV0pO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHNob3VsZEZsYXR0ZW4gPSBmYWxzZTtcblx0XHRcdGlmIChkZXB0aCA+IDApIHtcblx0XHRcdFx0c2hvdWxkRmxhdHRlbiA9IElzQXJyYXkoZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2hvdWxkRmxhdHRlbikge1xuXHRcdFx0XHR2YXIgZWxlbWVudExlbiA9IExlbmd0aE9mQXJyYXlMaWtlKGVsZW1lbnQpO1xuXHRcdFx0XHR0YXJnZXRJbmRleCA9IEZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBlbGVtZW50LCBlbGVtZW50TGVuLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICh0YXJnZXRJbmRleCA+PSBNQVhfU0FGRV9JTlRFR0VSKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2luZGV4IHRvbyBsYXJnZScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3codGFyZ2V0LCBUb1N0cmluZyh0YXJnZXRJbmRleCksIGVsZW1lbnQpO1xuXHRcdFx0XHR0YXJnZXRJbmRleCArPSAxO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRzb3VyY2VJbmRleCArPSAxO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldEluZGV4O1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFFM0MsSUFBSUMsVUFBVSxHQUFHRixZQUFZLENBQUMsYUFBYSxDQUFDO0FBRTVDLElBQUlHLGdCQUFnQixHQUFHRixPQUFPLENBQUMsMkJBQTJCLENBQUM7QUFFM0QsSUFBSUcsSUFBSSxHQUFHSCxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQzVCLElBQUlJLHlCQUF5QixHQUFHSixPQUFPLENBQUMsNkJBQTZCLENBQUM7QUFDdEUsSUFBSUssR0FBRyxHQUFHTCxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzFCLElBQUlNLFdBQVcsR0FBR04sT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUMxQyxJQUFJTyxPQUFPLEdBQUdQLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDbEMsSUFBSVEsaUJBQWlCLEdBQUdSLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUN0RCxJQUFJUyxRQUFRLEdBQUdULE9BQU8sQ0FBQyxZQUFZLENBQUM7O0FBRXBDOztBQUVBO0FBQ0FVLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUU7RUFDbkYsSUFBSUMsY0FBYztFQUNsQixJQUFJQyxTQUFTLENBQUNDLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDekJGLGNBQWMsR0FBR0MsU0FBUyxDQUFDLENBQUMsQ0FBQztFQUM5QjtFQUVBLElBQUlFLFdBQVcsR0FBR0wsS0FBSztFQUN2QixJQUFJTSxXQUFXLEdBQUcsQ0FBQztFQUNuQixPQUFPQSxXQUFXLEdBQUdQLFNBQVMsRUFBRTtJQUMvQixJQUFJUSxDQUFDLEdBQUdkLFFBQVEsQ0FBQ2EsV0FBVyxDQUFDO0lBQzdCLElBQUlFLE1BQU0sR0FBR2xCLFdBQVcsQ0FBQ1EsTUFBTSxFQUFFUyxDQUFDLENBQUM7SUFDbkMsSUFBSUMsTUFBTSxLQUFLLElBQUksRUFBRTtNQUNwQixJQUFJQyxPQUFPLEdBQUdwQixHQUFHLENBQUNTLE1BQU0sRUFBRVMsQ0FBQyxDQUFDO01BQzVCLElBQUksT0FBT0wsY0FBYyxLQUFLLFdBQVcsRUFBRTtRQUMxQyxJQUFJQyxTQUFTLENBQUNDLE1BQU0sSUFBSSxDQUFDLEVBQUU7VUFDMUIsTUFBTSxJQUFJbkIsVUFBVSxDQUFDLHVFQUF1RSxDQUFDO1FBQzlGO1FBQ0F3QixPQUFPLEdBQUd0QixJQUFJLENBQUNlLGNBQWMsRUFBRUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUNNLE9BQU8sRUFBRUgsV0FBVyxFQUFFUixNQUFNLENBQUMsQ0FBQztNQUM3RTtNQUNBLElBQUlZLGFBQWEsR0FBRyxLQUFLO01BQ3pCLElBQUlULEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDZFMsYUFBYSxHQUFHbkIsT0FBTyxDQUFDa0IsT0FBTyxDQUFDO01BQ2pDO01BQ0EsSUFBSUMsYUFBYSxFQUFFO1FBQ2xCLElBQUlDLFVBQVUsR0FBR25CLGlCQUFpQixDQUFDaUIsT0FBTyxDQUFDO1FBQzNDSixXQUFXLEdBQUdULGdCQUFnQixDQUFDQyxNQUFNLEVBQUVZLE9BQU8sRUFBRUUsVUFBVSxFQUFFTixXQUFXLEVBQUVKLEtBQUssR0FBRyxDQUFDLENBQUM7TUFDcEYsQ0FBQyxNQUFNO1FBQ04sSUFBSUksV0FBVyxJQUFJbkIsZ0JBQWdCLEVBQUU7VUFDcEMsTUFBTSxJQUFJRCxVQUFVLENBQUMsaUJBQWlCLENBQUM7UUFDeEM7UUFDQUcseUJBQXlCLENBQUNTLE1BQU0sRUFBRUosUUFBUSxDQUFDWSxXQUFXLENBQUMsRUFBRUksT0FBTyxDQUFDO1FBQ2pFSixXQUFXLElBQUksQ0FBQztNQUNqQjtJQUNEO0lBQ0FDLFdBQVcsSUFBSSxDQUFDO0VBQ2pCO0VBRUEsT0FBT0QsV0FBVztBQUNuQixDQUFDIn0=