adb4805f2f6618d66b70b7ebeb4c95ea
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _isPlainObject = _interopRequireDefault(require("./helpers/isPlainObject"));
var _typeOf = _interopRequireDefault(require("./helpers/typeOf"));
var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

/*
  code adapted from https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L202-L206
  so that it can be called outside of React's normal PropType flow
*/
var ReactPropTypeLocationNames = {
  prop: 'prop',
  context: 'context',
  childContext: 'child context'
};
function object(props, propName, componentName, location, propFullName) {
  var propValue = props[propName];
  if (propValue == null) {
    return null;
  }
  if ((0, _isPlainObject["default"])(propValue)) {
    return null;
  }
  var locationName = ReactPropTypeLocationNames[location] || location;
  return new TypeError("Invalid ".concat(locationName, " `").concat(propFullName, "` of type `").concat((0, _typeOf["default"])(propValue), "` supplied to `").concat(componentName, "`, expected `object`."));
}
object.isRequired = function objectRequired(props, propName, componentName, location, propFullName) {
  var propValue = props[propName];
  if (propValue == null) {
    var locationName = ReactPropTypeLocationNames[location] || location;
    return new TypeError("The ".concat(locationName, " `").concat(propFullName, "` is marked as required in `").concat(componentName, "`, but its value is `").concat(propValue, "`."));
  }
  for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
    rest[_key - 5] = arguments[_key];
  }
  return object.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));
};
var _default = function _default() {
  return (0, _wrapValidator["default"])(object, 'object');
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaXNQbGFpbk9iamVjdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3R5cGVPZiIsIl93cmFwVmFsaWRhdG9yIiwiUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMiLCJwcm9wIiwiY29udGV4dCIsImNoaWxkQ29udGV4dCIsIm9iamVjdCIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJwcm9wVmFsdWUiLCJsb2NhdGlvbk5hbWUiLCJUeXBlRXJyb3IiLCJjb25jYXQiLCJpc1JlcXVpcmVkIiwib2JqZWN0UmVxdWlyZWQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicmVzdCIsIkFycmF5IiwiX2tleSIsImFwcGx5IiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyIuLi9zcmMvb2JqZWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJy4vaGVscGVycy9pc1BsYWluT2JqZWN0JztcbmltcG9ydCB0eXBlT2YgZnJvbSAnLi9oZWxwZXJzL3R5cGVPZic7XG5pbXBvcnQgd3JhcFZhbGlkYXRvciBmcm9tICcuL2hlbHBlcnMvd3JhcFZhbGlkYXRvcic7XG5cbi8qXG4gIGNvZGUgYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE0MTU2ZTU2YjljZjE4YWM4Njk2MzE4NWM1YWY0YWJkZGYzZmY4MTEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy90eXBlcy9SZWFjdFByb3BUeXBlcy5qcyNMMjAyLUwyMDZcbiAgc28gdGhhdCBpdCBjYW4gYmUgY2FsbGVkIG91dHNpZGUgb2YgUmVhY3QncyBub3JtYWwgUHJvcFR5cGUgZmxvd1xuKi9cblxuY29uc3QgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG4gIHByb3A6ICdwcm9wJyxcbiAgY29udGV4dDogJ2NvbnRleHQnLFxuICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0Jyxcbn07XG5cbmZ1bmN0aW9uIG9iamVjdChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuICBpZiAocHJvcFZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChpc1BsYWluT2JqZWN0KHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0gfHwgbG9jYXRpb247XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKGBJbnZhbGlkICR7bG9jYXRpb25OYW1lfSBcXGAke3Byb3BGdWxsTmFtZX1cXGAgb2YgdHlwZSBcXGAke3R5cGVPZihwcm9wVmFsdWUpfVxcYCBzdXBwbGllZCB0byBcXGAke2NvbXBvbmVudE5hbWV9XFxgLCBleHBlY3RlZCBcXGBvYmplY3RcXGAuYCk7XG59XG5vYmplY3QuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uIG9iamVjdFJlcXVpcmVkKFxuICBwcm9wcyxcbiAgcHJvcE5hbWUsXG4gIGNvbXBvbmVudE5hbWUsXG4gIGxvY2F0aW9uLFxuICBwcm9wRnVsbE5hbWUsXG4gIC4uLnJlc3Rcbikge1xuICBjb25zdCB7IFtwcm9wTmFtZV06IHByb3BWYWx1ZSB9ID0gcHJvcHM7XG4gIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgIGNvbnN0IGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSB8fCBsb2NhdGlvbjtcbiAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgVGhlICR7bG9jYXRpb25OYW1lfSBcXGAke3Byb3BGdWxsTmFtZX1cXGAgaXMgbWFya2VkIGFzIHJlcXVpcmVkIGluIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAsIGJ1dCBpdHMgdmFsdWUgaXMgXFxgJHtwcm9wVmFsdWV9XFxgLmApO1xuICB9XG4gIHJldHVybiBvYmplY3QocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCAuLi5yZXN0KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHdyYXBWYWxpZGF0b3Iob2JqZWN0LCAnb2JqZWN0Jyk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLGNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGNBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTs7Ozs7OztBQUVBOzs7O0FBS0EsSUFBTUcsMEJBQTBCLEdBQUc7RUFDakNDLElBQUksRUFBRSxNQUQyQjtFQUVqQ0MsT0FBTyxFQUFFLFNBRndCO0VBR2pDQyxZQUFZLEVBQUU7QUFIbUIsQ0FBbkM7QUFNQSxTQUFTQyxNQUFUQSxDQUFnQkMsS0FBaEIsRUFBdUJDLFFBQXZCLEVBQWlDQyxhQUFqQyxFQUFnREMsUUFBaEQsRUFBMERDLFlBQTFELEVBQXdFO0VBQUEsSUFDbERDLFNBRGtELEdBQ3BDTCxLQURvQyxDQUM3REMsUUFENkQ7RUFFdEUsSUFBSUksU0FBUyxJQUFJLElBQWpCLEVBQXVCO0lBQ3JCLE9BQU8sSUFBUDtFQUNEO0VBRUQsSUFBSSxJQUFBZixjQUFBLGFBQWNlLFNBQWQsQ0FBSixFQUE4QjtJQUM1QixPQUFPLElBQVA7RUFDRDtFQUNELElBQU1DLFlBQVksR0FBR1gsMEJBQTBCLENBQUNRLFFBQUQsQ0FBMUIsSUFBd0NBLFFBQTdEO0VBQ0EsT0FBTyxJQUFJSSxTQUFKLFlBQUFDLE1BQUEsQ0FBeUJGLFlBQXpCLFFBQUFFLE1BQUEsQ0FBMkNKLFlBQTNDLGlCQUFBSSxNQUFBLENBQXVFLElBQUFmLE9BQUEsYUFBT1ksU0FBUCxDQUF2RSxxQkFBQUcsTUFBQSxDQUE0R04sYUFBNUcsMkJBQVA7QUFDRDtBQUNESCxNQUFNLENBQUNVLFVBQVAsR0FBb0IsU0FBU0MsY0FBVEEsQ0FDbEJWLEtBRGtCLEVBRWxCQyxRQUZrQixFQUdsQkMsYUFIa0IsRUFJbEJDLFFBSmtCLEVBS2xCQyxZQUxrQixFQU9sQjtFQUFBLElBQ29CQyxTQURwQixHQUNrQ0wsS0FEbEMsQ0FDU0MsUUFEVDtFQUVBLElBQUlJLFNBQVMsSUFBSSxJQUFqQixFQUF1QjtJQUNyQixJQUFNQyxZQUFZLEdBQUdYLDBCQUEwQixDQUFDUSxRQUFELENBQTFCLElBQXdDQSxRQUE3RDtJQUNBLE9BQU8sSUFBSUksU0FBSixRQUFBQyxNQUFBLENBQXFCRixZQUFyQixRQUFBRSxNQUFBLENBQXVDSixZQUF2QyxrQ0FBQUksTUFBQSxDQUFvRk4sYUFBcEYsMkJBQUFNLE1BQUEsQ0FBMkhILFNBQTNILFFBQVA7RUFDRDtFQUxELFNBQUFNLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBREdDLElBQ0gsT0FBQUMsS0FBQSxDQUFBSixJQUFBLE9BQUFBLElBQUEsV0FBQUssSUFBQSxNQUFBQSxJQUFBLEdBQUFMLElBQUEsRUFBQUssSUFBQTtJQURHRixJQUNILENBQUFFLElBQUEsUUFBQUosU0FBQSxDQUFBSSxJQUFBO0VBQUE7RUFNQSxPQUFPakIsTUFBTSxDQUFBa0IsS0FBTixVQUFPakIsS0FBUCxFQUFjQyxRQUFkLEVBQXdCQyxhQUF4QixFQUF1Q0MsUUFBdkMsRUFBaURDLFlBQWpELEVBQUFJLE1BQUEsQ0FBa0VNLElBQWxFLEVBQVA7QUFDRCxDQWREO2VBZ0JlLFNBQUFJLFNBQUE7RUFBQSxPQUFNLElBQUF4QixjQUFBLGFBQWNLLE1BQWQsRUFBc0IsUUFBdEIsQ0FBTjtBQUFBLEMifQ==