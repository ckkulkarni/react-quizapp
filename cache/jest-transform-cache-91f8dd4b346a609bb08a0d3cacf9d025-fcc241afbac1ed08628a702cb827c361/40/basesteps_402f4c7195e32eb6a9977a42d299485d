cf8ed4a2c15b5edf4d94c43ce65bba64
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
var _Home = _interopRequireDefault(require("./../../homeandsubmit/Home"));
require("@testing-library/jest-dom/extend-expect");
var _reactRouterDom = require("react-router-dom");
var _Question = _interopRequireDefault(require("../../questions/Question1"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/base.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User submits form with valid inputs", ({
    given,
    when,
    and,
    then
  }) => {
    given("I am on the Home Screen", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactRouterDom.Routes, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
            path: "/",
            element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Home.default, {})
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
            path: "/question",
            element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Question.default, {})
          })]
        })
      }));
      expect(screen).toBeTruthy();
      const submitButton = screen.getByRole("button", {
        name: "Submit"
      });
      expect(submitButton).toBeDisabled();
    });
    when('I enter a valid email "test@test.com"', () => {
      const emailInput = _react2.screen.getByTestId("form-mailid").querySelector("input");
      expect(emailInput).toBeInTheDocument();
      _react2.fireEvent.change(emailInput, {
        target: {
          value: "test@test.com"
        }
      });
    });
    and('I enter a valid name "John"', () => {
      const nameInput = _react2.screen.getByTestId("form-name").querySelector("input");
      expect(nameInput).toBeInTheDocument();
      _react2.fireEvent.change(nameInput, {
        target: {
          value: "John"
        }
      });
    });
    and('I enter a valid phone number "1234567890"', () => {
      const phoneInput = _react2.screen.getByTestId("form-phone").querySelector("input");
      expect(phoneInput).toBeInTheDocument();
      _react2.fireEvent.change(phoneInput, {
        target: {
          value: "1234567890"
        }
      });
    });
    and('I enter a valid age "25"', () => {
      const ageInput = _react2.screen.getByTestId("form-age").querySelector("input");
      expect(ageInput).toBeInTheDocument();
      _react2.fireEvent.change(ageInput, {
        target: {
          value: "25"
        }
      });
    });
    and('I select the language "ReactJS"', () => {
      const languageSelect = _react2.screen.getByRole("radio", {
        name: "ReactJS"
      });
      expect(languageSelect).not.toBeChecked();
      _react2.fireEvent.click(languageSelect);
      expect(languageSelect).toBeChecked();
    });
    and("I choose to track my score", () => {
      const scoreSelect = _react2.screen.getByRole("radio", {
        name: "Yes"
      });
      expect(scoreSelect).not.toBeChecked();
      _react2.fireEvent.click(scoreSelect);
      expect(scoreSelect).toBeChecked();
    });
    then("I submit the form", () => {
      const submitButton = _react2.screen.getByRole("button", {
        name: "Submit"
      });
      expect(submitButton).not.toBeDisabled();
      _react2.fireEvent.click(submitButton);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,