{"version":3,"names":["strictEquality","a","b","exports","areCoordsEqual","offsetA","offsetB","x","y","areArraysEqual","isEqual","length","i"],"sources":["../../src/utils/equality.ts"],"sourcesContent":["import type { XYCoord } from '../interfaces.js'\n\nexport type EqualityCheck<T> = (a: T, b: T) => boolean\nexport const strictEquality = <T>(a: T, b: T): boolean => a === b\n\n/**\n * Determine if two cartesian coordinate offsets are equal\n * @param offsetA\n * @param offsetB\n */\nexport function areCoordsEqual(\n\toffsetA: XYCoord | null | undefined,\n\toffsetB: XYCoord | null | undefined,\n): boolean {\n\tif (!offsetA && !offsetB) {\n\t\treturn true\n\t} else if (!offsetA || !offsetB) {\n\t\treturn false\n\t} else {\n\t\treturn offsetA.x === offsetB.x && offsetA.y === offsetB.y\n\t}\n}\n\n/**\n * Determines if two arrays of items are equal\n * @param a The first array of items\n * @param b The second array of items\n */\nexport function areArraysEqual<T>(\n\ta: T[],\n\tb: T[],\n\tisEqual: EqualityCheck<T> = strictEquality,\n): boolean {\n\tif (a.length !== b.length) {\n\t\treturn false\n\t}\n\tfor (let i = 0; i < a.length; ++i) {\n\t\tif (!isEqual(a[i] as T, b[i] as T)) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"],"mappings":";;;;;;;;AAGO,MAAMA,cAAc,GAAGA,CAAIC,CAAI,EAAEC,CAAI,KAAcD,CAAC,KAAKC,CAAC;AAEjE;;;;;AAAAC,OAAA,CAAAH,cAAA,GAAAA,cAAA;AAKO,SAASI,cAAcA,CAC7BC,OAAmC,EACnCC,OAAmC,EACzB;EACV,IAAI,CAACD,OAAO,IAAI,CAACC,OAAO,EAAE;IACzB,OAAO,IAAI;GACX,MAAM,IAAI,CAACD,OAAO,IAAI,CAACC,OAAO,EAAE;IAChC,OAAO,KAAK;GACZ,MAAM;IACN,OAAOD,OAAO,CAACE,CAAC,KAAKD,OAAO,CAACC,CAAC,IAAIF,OAAO,CAACG,CAAC,KAAKF,OAAO,CAACE,CAAC;;;AAI3D;;;;;AAKO,SAASC,cAAcA,CAC7BR,CAAM,EACNC,CAAM,EACNQ,OAAyB,GAAGV,cAAc,EAChC;EACV,IAAIC,CAAC,CAACU,MAAM,KAAKT,CAAC,CAACS,MAAM,EAAE;IAC1B,OAAO,KAAK;;EAEb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,CAAC,CAACU,MAAM,EAAE,EAAEC,CAAC,EAAE;IAClC,IAAI,CAACF,OAAO,CAACT,CAAC,CAACW,CAAC,CAAC,EAAOV,CAAC,CAACU,CAAC,CAAC,CAAM,EAAE;MACnC,OAAO,KAAK;;;EAGd,OAAO,IAAI"}