{"version":3,"names":["_invariant","require","_matchesType","_types","createHover","manager","hover","targetIdsArg","clientOffset","verifyTargetIdsIsArray","targetIds","slice","monitor","getMonitor","registry","getRegistry","draggedItemType","getItemType","removeNonMatchingTargetIds","checkInvariants","hoverAllTargets","type","HOVER","payload","invariant","Array","isArray","isDragging","didDrop","i","length","targetId","lastIndexOf","target","getTarget","targetType","getTargetType","matchesType","splice","forEach"],"sources":["../../../src/actions/dragDrop/hover.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\n\nimport type {\n\tAction,\n\tDragDropManager,\n\tDragDropMonitor,\n\tHandlerRegistry,\n\tHoverOptions,\n\tHoverPayload,\n\tIdentifier,\n} from '../../interfaces.js'\nimport { matchesType } from '../../utils/matchesType.js'\nimport { HOVER } from './types.js'\n\nexport function createHover(manager: DragDropManager) {\n\treturn function hover(\n\t\ttargetIdsArg: string[],\n\t\t{ clientOffset }: HoverOptions = {},\n\t): Action<HoverPayload> {\n\t\tverifyTargetIdsIsArray(targetIdsArg)\n\t\tconst targetIds = targetIdsArg.slice(0)\n\t\tconst monitor = manager.getMonitor()\n\t\tconst registry = manager.getRegistry()\n\t\tconst draggedItemType = monitor.getItemType()\n\t\tremoveNonMatchingTargetIds(targetIds, registry, draggedItemType)\n\t\tcheckInvariants(targetIds, monitor, registry)\n\t\thoverAllTargets(targetIds, monitor, registry)\n\n\t\treturn {\n\t\t\ttype: HOVER,\n\t\t\tpayload: {\n\t\t\t\ttargetIds,\n\t\t\t\tclientOffset: clientOffset || null,\n\t\t\t},\n\t\t}\n\t}\n}\n\nfunction verifyTargetIdsIsArray(targetIdsArg: string[]) {\n\tinvariant(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.')\n}\n\nfunction checkInvariants(\n\ttargetIds: string[],\n\tmonitor: DragDropMonitor,\n\tregistry: HandlerRegistry,\n) {\n\tinvariant(monitor.isDragging(), 'Cannot call hover while not dragging.')\n\tinvariant(!monitor.didDrop(), 'Cannot call hover after drop.')\n\tfor (let i = 0; i < targetIds.length; i++) {\n\t\tconst targetId = targetIds[i] as string\n\t\tinvariant(\n\t\t\ttargetIds.lastIndexOf(targetId) === i,\n\t\t\t'Expected targetIds to be unique in the passed array.',\n\t\t)\n\n\t\tconst target = registry.getTarget(targetId)\n\t\tinvariant(target, 'Expected targetIds to be registered.')\n\t}\n}\n\nfunction removeNonMatchingTargetIds(\n\ttargetIds: string[],\n\tregistry: HandlerRegistry,\n\tdraggedItemType: Identifier | null,\n) {\n\t// Remove those targetIds that don't match the targetType.  This\n\t// fixes shallow isOver which would only be non-shallow because of\n\t// non-matching targets.\n\tfor (let i = targetIds.length - 1; i >= 0; i--) {\n\t\tconst targetId = targetIds[i] as string\n\t\tconst targetType = registry.getTargetType(targetId)\n\t\tif (!matchesType(targetType, draggedItemType)) {\n\t\t\ttargetIds.splice(i, 1)\n\t\t}\n\t}\n}\n\nfunction hoverAllTargets(\n\ttargetIds: string[],\n\tmonitor: DragDropMonitor,\n\tregistry: HandlerRegistry,\n) {\n\t// Finally call hover on all matching targets.\n\ttargetIds.forEach(function (targetId) {\n\t\tconst target = registry.getTarget(targetId)\n\t\ttarget.hover(monitor, targetId)\n\t})\n}\n"],"mappings":";;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AAWA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AAEO,SAASG,WAAWA,CAACC,OAAwB,EAAE;EACrD,OAAO,SAASC,KAAKA,CACpBC,YAAsB,EACtB;IAAEC;EAAY,CAAgB,GAAG,EAAE,EACZ;IACvBC,sBAAsB,CAACF,YAAY,CAAC;IACpC,MAAMG,SAAS,GAAGH,YAAY,CAACI,KAAK,CAAC,CAAC,CAAC;IACvC,MAAMC,OAAO,GAAGP,OAAO,CAACQ,UAAU,EAAE;IACpC,MAAMC,QAAQ,GAAGT,OAAO,CAACU,WAAW,EAAE;IACtC,MAAMC,eAAe,GAAGJ,OAAO,CAACK,WAAW,EAAE;IAC7CC,0BAA0B,CAACR,SAAS,EAAEI,QAAQ,EAAEE,eAAe,CAAC;IAChEG,eAAe,CAACT,SAAS,EAAEE,OAAO,EAAEE,QAAQ,CAAC;IAC7CM,eAAe,CAACV,SAAS,EAAEE,OAAO,EAAEE,QAAQ,CAAC;IAE7C,OAAO;MACNO,IAAI,EAAEC,YAAK;MACXC,OAAO,EAAE;QACRb,SAAS;QACTF,YAAY,EAAEA,YAAY,IAAI;;KAE/B;GACD;;AAGF,SAASC,sBAAsBA,CAACF,YAAsB,EAAE;EACvD,IAAAiB,oBAAS,EAACC,KAAK,CAACC,OAAO,CAACnB,YAAY,CAAC,EAAE,oCAAoC,CAAC;;AAG7E,SAASY,eAAeA,CACvBT,SAAmB,EACnBE,OAAwB,EACxBE,QAAyB,EACxB;EACD,IAAAU,oBAAS,EAACZ,OAAO,CAACe,UAAU,EAAE,EAAE,uCAAuC,CAAC;EACxE,IAAAH,oBAAS,EAAC,CAACZ,OAAO,CAACgB,OAAO,EAAE,EAAE,+BAA+B,CAAC;EAC9D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,SAAS,CAACoB,MAAM,EAAED,CAAC,EAAE,EAAE;IAC1C,MAAME,QAAQ,GAAGrB,SAAS,CAACmB,CAAC,CAAC;IAC7B,IAAAL,oBAAS,EACRd,SAAS,CAACsB,WAAW,CAACD,QAAQ,CAAC,KAAKF,CAAC,EACrC,sDAAsD,CACtD;IAED,MAAMI,MAAM,GAAGnB,QAAQ,CAACoB,SAAS,CAACH,QAAQ,CAAC;IAC3C,IAAAP,oBAAS,EAACS,MAAM,EAAE,sCAAsC,CAAC;;;AAI3D,SAASf,0BAA0BA,CAClCR,SAAmB,EACnBI,QAAyB,EACzBE,eAAkC,EACjC;EACD;EACA;EACA;EACA,KAAK,IAAIa,CAAC,GAAGnB,SAAS,CAACoB,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC/C,MAAME,QAAQ,GAAGrB,SAAS,CAACmB,CAAC,CAAC;IAC7B,MAAMM,UAAU,GAAGrB,QAAQ,CAACsB,aAAa,CAACL,QAAQ,CAAC;IACnD,IAAI,CAAC,IAAAM,wBAAW,EAACF,UAAU,EAAEnB,eAAe,CAAC,EAAE;MAC9CN,SAAS,CAAC4B,MAAM,CAACT,CAAC,EAAE,CAAC,CAAC;;;;AAKzB,SAAST,eAAeA,CACvBV,SAAmB,EACnBE,OAAwB,EACxBE,QAAyB,EACxB;EACD;EACAJ,SAAS,CAAC6B,OAAO,CAAC,UAAUR,QAAQ,EAAE;IACrC,MAAME,MAAM,GAAGnB,QAAQ,CAACoB,SAAS,CAACH,QAAQ,CAAC;IAC3CE,MAAM,CAAC3B,KAAK,CAACM,OAAO,EAAEmB,QAAQ,CAAC;GAC/B,CAAC"}