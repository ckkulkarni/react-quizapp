03774d92b43da87a2d9dc12309752f8f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keydownBehavior = void 0;
var _utils = require("../../utils");
var _shared = require("../shared");

/**
 * This file should contain behavior for arrow keys as described here:
 * https://w3c.github.io/uievents-code/#key-controlpad-section
 */
const keydownBehavior = [{
  matches: (keyDef, element) => (keyDef.key === 'Home' || keyDef.key === 'End') && ((0, _utils.isElementType)(element, ['input', 'textarea']) || (0, _utils.isContentEditable)(element)),
  handle: (keyDef, element) => {
    // This could probably been improved by collapsing a selection range
    if (keyDef.key === 'Home') {
      (0, _utils.setSelectionRange)(element, 0, 0);
    } else {
      var _getValue$length, _getValue;
      const newPos = (_getValue$length = (_getValue = (0, _utils.getValue)(element)) == null ? void 0 : _getValue.length) != null ? _getValue$length : /* istanbul ignore next */
      0;
      (0, _utils.setSelectionRange)(element, newPos, newPos);
    }
  }
}, {
  matches: (keyDef, element) => (keyDef.key === 'PageUp' || keyDef.key === 'PageDown') && (0, _utils.isElementType)(element, ['input']),
  handle: (keyDef, element) => {
    // This could probably been improved by collapsing a selection range
    if (keyDef.key === 'PageUp') {
      (0, _utils.setSelectionRange)(element, 0, 0);
    } else {
      var _getValue$length2, _getValue2;
      const newPos = (_getValue$length2 = (_getValue2 = (0, _utils.getValue)(element)) == null ? void 0 : _getValue2.length) != null ? _getValue$length2 : /* istanbul ignore next */
      0;
      (0, _utils.setSelectionRange)(element, newPos, newPos);
    }
  }
}, {
  matches: (keyDef, element) => keyDef.key === 'Delete' && (0, _utils.isEditable)(element) && !(0, _utils.isCursorAtEnd)(element),
  handle: (keDef, element, options, state) => {
    const {
      newValue,
      newSelectionStart
    } = (0, _utils.calculateNewValue)('', element, state.carryValue, undefined, 'forward');
    (0, _shared.fireInputEvent)(element, {
      newValue,
      newSelectionStart,
      eventOverrides: {
        inputType: 'deleteContentForward'
      }
    });
    (0, _shared.carryValue)(element, state, newValue);
  }
}];
exports.keydownBehavior = keydownBehavior;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImtleWRvd25CZWhhdmlvciIsIl91dGlscyIsInJlcXVpcmUiLCJfc2hhcmVkIiwibWF0Y2hlcyIsImtleURlZiIsImVsZW1lbnQiLCJrZXkiLCJpc0VsZW1lbnRUeXBlIiwiaXNDb250ZW50RWRpdGFibGUiLCJoYW5kbGUiLCJzZXRTZWxlY3Rpb25SYW5nZSIsIl9nZXRWYWx1ZSRsZW5ndGgiLCJfZ2V0VmFsdWUiLCJuZXdQb3MiLCJnZXRWYWx1ZSIsImxlbmd0aCIsIl9nZXRWYWx1ZSRsZW5ndGgyIiwiX2dldFZhbHVlMiIsImlzRWRpdGFibGUiLCJpc0N1cnNvckF0RW5kIiwia2VEZWYiLCJvcHRpb25zIiwic3RhdGUiLCJuZXdWYWx1ZSIsIm5ld1NlbGVjdGlvblN0YXJ0IiwiY2FsY3VsYXRlTmV3VmFsdWUiLCJjYXJyeVZhbHVlIiwidW5kZWZpbmVkIiwiZmlyZUlucHV0RXZlbnQiLCJldmVudE92ZXJyaWRlcyIsImlucHV0VHlwZSJdLCJzb3VyY2VzIjpbImNvbnRyb2wuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmtleWRvd25CZWhhdmlvciA9IHZvaWQgMDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcblxudmFyIF9zaGFyZWQgPSByZXF1aXJlKFwiLi4vc2hhcmVkXCIpO1xuXG4vKipcbiAqIFRoaXMgZmlsZSBzaG91bGQgY29udGFpbiBiZWhhdmlvciBmb3IgYXJyb3cga2V5cyBhcyBkZXNjcmliZWQgaGVyZTpcbiAqIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby91aWV2ZW50cy1jb2RlLyNrZXktY29udHJvbHBhZC1zZWN0aW9uXG4gKi9cbmNvbnN0IGtleWRvd25CZWhhdmlvciA9IFt7XG4gIG1hdGNoZXM6IChrZXlEZWYsIGVsZW1lbnQpID0+IChrZXlEZWYua2V5ID09PSAnSG9tZScgfHwga2V5RGVmLmtleSA9PT0gJ0VuZCcpICYmICgoMCwgX3V0aWxzLmlzRWxlbWVudFR5cGUpKGVsZW1lbnQsIFsnaW5wdXQnLCAndGV4dGFyZWEnXSkgfHwgKDAsIF91dGlscy5pc0NvbnRlbnRFZGl0YWJsZSkoZWxlbWVudCkpLFxuICBoYW5kbGU6IChrZXlEZWYsIGVsZW1lbnQpID0+IHtcbiAgICAvLyBUaGlzIGNvdWxkIHByb2JhYmx5IGJlZW4gaW1wcm92ZWQgYnkgY29sbGFwc2luZyBhIHNlbGVjdGlvbiByYW5nZVxuICAgIGlmIChrZXlEZWYua2V5ID09PSAnSG9tZScpIHtcbiAgICAgICgwLCBfdXRpbHMuc2V0U2VsZWN0aW9uUmFuZ2UpKGVsZW1lbnQsIDAsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2dldFZhbHVlJGxlbmd0aCwgX2dldFZhbHVlO1xuXG4gICAgICBjb25zdCBuZXdQb3MgPSAoX2dldFZhbHVlJGxlbmd0aCA9IChfZ2V0VmFsdWUgPSAoMCwgX3V0aWxzLmdldFZhbHVlKShlbGVtZW50KSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9nZXRWYWx1ZS5sZW5ndGgpICE9IG51bGwgPyBfZ2V0VmFsdWUkbGVuZ3RoIDpcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAwO1xuICAgICAgKDAsIF91dGlscy5zZXRTZWxlY3Rpb25SYW5nZSkoZWxlbWVudCwgbmV3UG9zLCBuZXdQb3MpO1xuICAgIH1cbiAgfVxufSwge1xuICBtYXRjaGVzOiAoa2V5RGVmLCBlbGVtZW50KSA9PiAoa2V5RGVmLmtleSA9PT0gJ1BhZ2VVcCcgfHwga2V5RGVmLmtleSA9PT0gJ1BhZ2VEb3duJykgJiYgKDAsIF91dGlscy5pc0VsZW1lbnRUeXBlKShlbGVtZW50LCBbJ2lucHV0J10pLFxuICBoYW5kbGU6IChrZXlEZWYsIGVsZW1lbnQpID0+IHtcbiAgICAvLyBUaGlzIGNvdWxkIHByb2JhYmx5IGJlZW4gaW1wcm92ZWQgYnkgY29sbGFwc2luZyBhIHNlbGVjdGlvbiByYW5nZVxuICAgIGlmIChrZXlEZWYua2V5ID09PSAnUGFnZVVwJykge1xuICAgICAgKDAsIF91dGlscy5zZXRTZWxlY3Rpb25SYW5nZSkoZWxlbWVudCwgMCwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZ2V0VmFsdWUkbGVuZ3RoMiwgX2dldFZhbHVlMjtcblxuICAgICAgY29uc3QgbmV3UG9zID0gKF9nZXRWYWx1ZSRsZW5ndGgyID0gKF9nZXRWYWx1ZTIgPSAoMCwgX3V0aWxzLmdldFZhbHVlKShlbGVtZW50KSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9nZXRWYWx1ZTIubGVuZ3RoKSAhPSBudWxsID8gX2dldFZhbHVlJGxlbmd0aDIgOlxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIDA7XG4gICAgICAoMCwgX3V0aWxzLnNldFNlbGVjdGlvblJhbmdlKShlbGVtZW50LCBuZXdQb3MsIG5ld1Bvcyk7XG4gICAgfVxuICB9XG59LCB7XG4gIG1hdGNoZXM6IChrZXlEZWYsIGVsZW1lbnQpID0+IGtleURlZi5rZXkgPT09ICdEZWxldGUnICYmICgwLCBfdXRpbHMuaXNFZGl0YWJsZSkoZWxlbWVudCkgJiYgISgwLCBfdXRpbHMuaXNDdXJzb3JBdEVuZCkoZWxlbWVudCksXG4gIGhhbmRsZTogKGtlRGVmLCBlbGVtZW50LCBvcHRpb25zLCBzdGF0ZSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgbmV3U2VsZWN0aW9uU3RhcnRcbiAgICB9ID0gKDAsIF91dGlscy5jYWxjdWxhdGVOZXdWYWx1ZSkoJycsIGVsZW1lbnQsIHN0YXRlLmNhcnJ5VmFsdWUsIHVuZGVmaW5lZCwgJ2ZvcndhcmQnKTtcbiAgICAoMCwgX3NoYXJlZC5maXJlSW5wdXRFdmVudCkoZWxlbWVudCwge1xuICAgICAgbmV3VmFsdWUsXG4gICAgICBuZXdTZWxlY3Rpb25TdGFydCxcbiAgICAgIGV2ZW50T3ZlcnJpZGVzOiB7XG4gICAgICAgIGlucHV0VHlwZTogJ2RlbGV0ZUNvbnRlbnRGb3J3YXJkJ1xuICAgICAgfVxuICAgIH0pO1xuICAgICgwLCBfc2hhcmVkLmNhcnJ5VmFsdWUpKGVsZW1lbnQsIHN0YXRlLCBuZXdWYWx1ZSk7XG4gIH1cbn1dO1xuZXhwb3J0cy5rZXlkb3duQmVoYXZpb3IgPSBrZXlkb3duQmVoYXZpb3I7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsZUFBZSxHQUFHLEtBQUssQ0FBQztBQUVoQyxJQUFJQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFFbkMsSUFBSUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsV0FBVyxDQUFDOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1GLGVBQWUsR0FBRyxDQUFDO0VBQ3ZCSSxPQUFPLEVBQUVBLENBQUNDLE1BQU0sRUFBRUMsT0FBTyxLQUFLLENBQUNELE1BQU0sQ0FBQ0UsR0FBRyxLQUFLLE1BQU0sSUFBSUYsTUFBTSxDQUFDRSxHQUFHLEtBQUssS0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFTixNQUFNLENBQUNPLGFBQWEsRUFBRUYsT0FBTyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUVMLE1BQU0sQ0FBQ1EsaUJBQWlCLEVBQUVILE9BQU8sQ0FBQyxDQUFDO0VBQ3RMSSxNQUFNLEVBQUVBLENBQUNMLE1BQU0sRUFBRUMsT0FBTyxLQUFLO0lBQzNCO0lBQ0EsSUFBSUQsTUFBTSxDQUFDRSxHQUFHLEtBQUssTUFBTSxFQUFFO01BQ3pCLENBQUMsQ0FBQyxFQUFFTixNQUFNLENBQUNVLGlCQUFpQixFQUFFTCxPQUFPLEVBQUUsQ0FBQyxFQUFFLENB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