25bfcd37347da155745a7751a2d42237
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateSourceContract = validateSourceContract;
exports.validateTargetContract = validateTargetContract;
exports.validateType = validateType;
var _invariant = require("@react-dnd/invariant");
function validateSourceContract(source) {
  (0, _invariant.invariant)(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');
  (0, _invariant.invariant)(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');
  (0, _invariant.invariant)(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');
}
function validateTargetContract(target) {
  (0, _invariant.invariant)(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');
  (0, _invariant.invariant)(typeof target.hover === 'function', 'Expected hover to be a function.');
  (0, _invariant.invariant)(typeof target.drop === 'function', 'Expected beginDrag to be a function.');
}
function validateType(type, allowArray) {
  if (allowArray && Array.isArray(type)) {
    type.forEach(t => validateType(t, false));
    return;
  }
  (0, _invariant.invariant)(typeof type === 'string' || typeof type === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW52YXJpYW50IiwicmVxdWlyZSIsInZhbGlkYXRlU291cmNlQ29udHJhY3QiLCJzb3VyY2UiLCJpbnZhcmlhbnQiLCJjYW5EcmFnIiwiYmVnaW5EcmFnIiwiZW5kRHJhZyIsInZhbGlkYXRlVGFyZ2V0Q29udHJhY3QiLCJ0YXJnZXQiLCJjYW5Ecm9wIiwiaG92ZXIiLCJkcm9wIiwidmFsaWRhdGVUeXBlIiwidHlwZSIsImFsbG93QXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwidCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb250cmFjdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnQHJlYWN0LWRuZC9pbnZhcmlhbnQnXG5cbmltcG9ydCB0eXBlIHsgRHJhZ1NvdXJjZSwgRHJvcFRhcmdldCwgSWRlbnRpZmllciB9IGZyb20gJy4vaW50ZXJmYWNlcy5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU291cmNlQ29udHJhY3Qoc291cmNlOiBEcmFnU291cmNlKTogdm9pZCB7XG5cdGludmFyaWFudChcblx0XHR0eXBlb2Ygc291cmNlLmNhbkRyYWcgPT09ICdmdW5jdGlvbicsXG5cdFx0J0V4cGVjdGVkIGNhbkRyYWcgdG8gYmUgYSBmdW5jdGlvbi4nLFxuXHQpXG5cdGludmFyaWFudChcblx0XHR0eXBlb2Ygc291cmNlLmJlZ2luRHJhZyA9PT0gJ2Z1bmN0aW9uJyxcblx0XHQnRXhwZWN0ZWQgYmVnaW5EcmFnIHRvIGJlIGEgZnVuY3Rpb24uJyxcblx0KVxuXHRpbnZhcmlhbnQoXG5cdFx0dHlwZW9mIHNvdXJjZS5lbmREcmFnID09PSAnZnVuY3Rpb24nLFxuXHRcdCdFeHBlY3RlZCBlbmREcmFnIHRvIGJlIGEgZnVuY3Rpb24uJyxcblx0KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVUYXJnZXRDb250cmFjdCh0YXJnZXQ6IERyb3BUYXJnZXQpOiB2b2lkIHtcblx0aW52YXJpYW50KFxuXHRcdHR5cGVvZiB0YXJnZXQuY2FuRHJvcCA9PT0gJ2Z1bmN0aW9uJyxcblx0XHQnRXhwZWN0ZWQgY2FuRHJvcCB0byBiZSBhIGZ1bmN0aW9uLicsXG5cdClcblx0aW52YXJpYW50KFxuXHRcdHR5cGVvZiB0YXJnZXQuaG92ZXIgPT09ICdmdW5jdGlvbicsXG5cdFx0J0V4cGVjdGVkIGhvdmVyIHRvIGJlIGEgZnVuY3Rpb24uJyxcblx0KVxuXHRpbnZhcmlhbnQoXG5cdFx0dHlwZW9mIHRhcmdldC5kcm9wID09PSAnZnVuY3Rpb24nLFxuXHRcdCdFeHBlY3RlZCBiZWdpbkRyYWcgdG8gYmUgYSBmdW5jdGlvbi4nLFxuXHQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVR5cGUoXG5cdHR5cGU6IElkZW50aWZpZXIgfCBJZGVudGlmaWVyW10sXG5cdGFsbG93QXJyYXk/OiBib29sZWFuLFxuKTogdm9pZCB7XG5cdGlmIChhbGxvd0FycmF5ICYmIEFycmF5LmlzQXJyYXkodHlwZSkpIHtcblx0XHR0eXBlLmZvckVhY2goKHQpID0+IHZhbGlkYXRlVHlwZSh0LCBmYWxzZSkpXG5cdFx0cmV0dXJuXG5cdH1cblxuXHRpbnZhcmlhbnQoXG5cdFx0dHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnc3ltYm9sJyxcblx0XHRhbGxvd0FycmF5XG5cdFx0XHQ/ICdUeXBlIGNhbiBvbmx5IGJlIGEgc3RyaW5nLCBhIHN5bWJvbCwgb3IgYW4gYXJyYXkgb2YgZWl0aGVyLidcblx0XHRcdDogJ1R5cGUgY2FuIG9ubHkgYmUgYSBzdHJpbmcgb3IgYSBzeW1ib2wuJyxcblx0KVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMsT0FBQTtBQUlPLFNBQVNDLHNCQUFzQkEsQ0FBQ0MsTUFBa0IsRUFBUTtFQUNoRSxJQUFBQyxvQkFBUyxFQUNSLE9BQU9ELE1BQU0sQ0FBQ0UsT0FBTyxLQUFLLFVBQVUsRUFDcEMsb0NBQW9DLENBQ3BDO0VBQ0QsSUFBQUQsb0JBQVMsRUFDUixPQUFPRCxNQUFNLENBQUNHLFNBQVMsS0FBSyxVQUFVLEVBQ3RDLHNDQUFzQyxDQUN0QztFQUNELElBQUFGLG9CQUFTLEVBQ1IsT0FBT0QsTUFBTSxDQUFDSSxPQUFPLEtBQUssVUFBVSxFQUNwQyxvQ0FBb0MsQ0FDcEM7O0FBR0ssU0FBU0Msc0JBQXNCQSxDQUFDQyxNQUFrQixFQUFRO0VBQ2hFLElBQUFMLG9CQUFTLEVBQ1IsT0FBT0ssTUFBTSxDQUFDQyxPQUFPLEtBQUssVUFBVSxFQUNwQyxvQ0FBb0MsQ0FDcEM7RUFDRCxJQUFBTixvQkFBUyxFQUNSLE9BQU9LLE1BQU0sQ0FBQ0UsS0FBSyxLQUFLLFVBQVUsRUFDbEMsa0NBQWtDLENBQ2xDO0VBQ0QsSUFBQVAsb0JBQVMsRUFDUixPQUFPSyxNQUFNLENBQUNHLElBQUksS0FBSyxVQUFVLEVBQ2pDLHNDQUFzQyxDQUN0Qzs7QUFHSyxTQUFTQyxZQUFZQSxDQUMzQkMsSUFBK0IsRUFDL0JDLFVBQW9CLEVBQ2I7RUFDUCxJQUFJQSxVQUFVLElBQUlDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDSCxJQUFJLENBQUMsRUFBRTtJQUN0Q0EsSUFBSSxDQUFDSSxPQUFPLENBQUVDLENBQUMsSUFBS04sWUFBWSxDQUFDTSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0M7O0VBR0QsSUFBQWYsb0JBQVMsRUFDUixPQUFPVSxJQUFJLEtBQUssUUFBUSxJQUFJLE9BQU9BLElBQUksS0FBSyxRQUFRLEVBQ3BEQyxVQUFVLEdBQ1AsNkRBQTZELEdBQzdELHdDQUF3QyxDQUMzQyJ9