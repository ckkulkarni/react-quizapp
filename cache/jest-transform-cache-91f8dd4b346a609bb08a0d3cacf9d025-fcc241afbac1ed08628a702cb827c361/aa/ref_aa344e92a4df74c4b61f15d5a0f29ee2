72f2df6e2fae8697e3b90582d28e974a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = require("react");
var _isPlainObject = _interopRequireDefault(require("./helpers/isPlainObject"));
var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
var isPrototypeOf = Object.prototype.isPrototypeOf;
function isNewRef(prop) {
  if (!(0, _isPlainObject["default"])(prop)) {
    return false;
  }
  var ownProperties = Object.keys(prop);
  return ownProperties.length === 1 && ownProperties[0] === 'current';
}
function isCallbackRef(prop) {
  return typeof prop === 'function' && !isPrototypeOf.call(_react.Component, prop) && (!_react.PureComponent || !isPrototypeOf.call(_react.PureComponent, prop));
}
function requiredRef(props, propName, componentName) {
  var propValue = props[propName];
  if (isCallbackRef(propValue) || isNewRef(propValue)) {
    return null;
  }
  return new TypeError("".concat(propName, " in ").concat(componentName, " must be a ref"));
}
function ref(props, propName, componentName) {
  var propValue = props[propName];
  if (propValue == null) {
    return null;
  }
  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }
  return requiredRef.apply(void 0, [props, propName, componentName].concat(rest));
}
ref.isRequired = requiredRef;
var _default = function _default() {
  return (0, _wrapValidator["default"])(ref, 'ref');
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2lzUGxhaW5PYmplY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3dyYXBWYWxpZGF0b3IiLCJpc1Byb3RvdHlwZU9mIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaXNOZXdSZWYiLCJwcm9wIiwib3duUHJvcGVydGllcyIsImtleXMiLCJsZW5ndGgiLCJpc0NhbGxiYWNrUmVmIiwiY2FsbCIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJyZXF1aXJlZFJlZiIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcFZhbHVlIiwiVHlwZUVycm9yIiwiY29uY2F0IiwicmVmIiwiX2xlbiIsImFyZ3VtZW50cyIsInJlc3QiLCJBcnJheSIsIl9rZXkiLCJhcHBseSIsImlzUmVxdWlyZWQiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9yZWYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi9oZWxwZXJzL2lzUGxhaW5PYmplY3QnO1xuaW1wb3J0IHdyYXBWYWxpZGF0b3IgZnJvbSAnLi9oZWxwZXJzL3dyYXBWYWxpZGF0b3InO1xuXG5jb25zdCB7IGlzUHJvdG90eXBlT2YgfSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGlzTmV3UmVmKHByb3ApIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHByb3ApKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG93blByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhwcm9wKTtcbiAgcmV0dXJuIG93blByb3BlcnRpZXMubGVuZ3RoID09PSAxICYmIG93blByb3BlcnRpZXNbMF0gPT09ICdjdXJyZW50Jztcbn1cblxuZnVuY3Rpb24gaXNDYWxsYmFja1JlZihwcm9wKSB7XG4gIHJldHVybiB0eXBlb2YgcHJvcCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmICFpc1Byb3RvdHlwZU9mLmNhbGwoQ29tcG9uZW50LCBwcm9wKVxuICAgICYmICghUHVyZUNvbXBvbmVudCB8fCAhaXNQcm90b3R5cGVPZi5jYWxsKFB1cmVDb21wb25lbnQsIHByb3ApKTtcbn1cblxuZnVuY3Rpb24gcmVxdWlyZWRSZWYocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcblxuICBpZiAoaXNDYWxsYmFja1JlZihwcm9wVmFsdWUpIHx8IGlzTmV3UmVmKHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBuZXcgVHlwZUVycm9yKGAke3Byb3BOYW1lfSBpbiAke2NvbXBvbmVudE5hbWV9IG11c3QgYmUgYSByZWZgKTtcbn1cblxuZnVuY3Rpb24gcmVmKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCkge1xuICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG5cbiAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcmVxdWlyZWRSZWYocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KTtcbn1cblxucmVmLmlzUmVxdWlyZWQgPSByZXF1aXJlZFJlZjtcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4gd3JhcFZhbGlkYXRvcihyZWYsICdyZWYnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsY0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsY0FBQSxHQUFBRCxzQkFBQSxDQUFBRixPQUFBOzs7Ozs7SUFFUUksYSxHQUFrQkMsTUFBTSxDQUFDQyxTLENBQXpCRixhO0FBRVIsU0FBU0csUUFBVEEsQ0FBa0JDLElBQWxCLEVBQXdCO0VBQ3RCLElBQUksQ0FBQyxJQUFBUCxjQUFBLGFBQWNPLElBQWQsQ0FBTCxFQUEwQjtJQUN4QixPQUFPLEtBQVA7RUFDRDtFQUNELElBQU1DLGFBQWEsR0FBR0osTUFBTSxDQUFDSyxJQUFQLENBQVlGLElBQVosQ0FBdEI7RUFDQSxPQUFPQyxhQUFhLENBQUNFLE1BQWQsS0FBeUIsQ0FBekIsSUFBOEJGLGFBQWEsQ0FBQyxDQUFELENBQWIsS0FBcUIsU0FBMUQ7QUFDRDtBQUVELFNBQVNHLGFBQVRBLENBQXVCSixJQUF2QixFQUE2QjtFQUMzQixPQUFPLE9BQU9BLElBQVAsS0FBZ0IsVUFBaEIsSUFDRixDQUFDSixhQUFhLENBQUNTLElBQWQsQ0FBbUJkLE1BQUEsQ0FBQWUsU0FBbkIsRUFBOEJOLElBQTlCLENBREMsS0FFRCxDQUFDVCxNQUFBLENBQUFnQixhQUFELElBQWtCLENBQUNYLGFBQWEsQ0FBQ1MsSUFBZCxDQUFtQmQsTUFBQSxDQUFBZ0IsYUFBbkIsRUFBa0NQLElBQWxDLENBRmxCLENBQVA7QUFHRDtBQUVELFNBQVNRLFdBQVRBLENBQXFCQyxLQUFyQixFQUE0QkMsUUFBNUIsRUFBc0NDLGFBQXRDLEVBQXFEO0VBQ25ELElBQU1DLFNBQVMsR0FBR0gsS0FBSyxDQUFDQyxRQUFELENBQXZCO0VBRUEsSUFBSU4sYUFBYSxDQUFDUSxTQUFELENBQWIsSUFBNEJiLFFBQVEsQ0FBQ2EsU0FBRCxDQUF4QyxFQUFxRDtJQUNuRCxPQUFPLElBQVA7RUFDRDtFQUVELE9BQU8sSUFBSUMsU0FBSixJQUFBQyxNQUFBLENBQWlCSixRQUFqQixVQUFBSSxNQUFBLENBQWdDSCxhQUFoQyxvQkFBUDtBQUNEO0FBRUQsU0FBU0ksR0FBVEEsQ0FBYU4sS0FBYixFQUFvQkMsUUFBcEIsRUFBOEJDLGFBQTlCLEVBQXNEO0VBQ3BELElBQU1DLFNBQVMsR0FBR0gsS0FBSyxDQUFDQyxRQUFELENBQXZCO0VBRUEsSUFBSUUsU0FBUyxJQUFJLElBQWpCLEVBQXVCO0lBQ3JCLE9BQU8sSUFBUDtFQUNEO0VBTG1ELFNBQUFJLElBQUEsR0FBQUMsU0FBQSxDQUFBZCxNQUFBLEVBQU5lLElBQU0sT0FBQUMsS0FBQSxDQUFBSCxJQUFBLE9BQUFBLElBQUEsV0FBQUksSUFBQSxNQUFBQSxJQUFBLEdBQUFKLElBQUEsRUFBQUksSUFBQTtJQUFORixJQUFNLENBQUFFLElBQUEsUUFBQUgsU0FBQSxDQUFBRyxJQUFBO0VBQUE7RUFPcEQsT0FBT1osV0FBVyxDQUFBYSxLQUFYLFVBQVlaLEtBQVosRUFBbUJDLFFBQW5CLEVBQTZCQyxhQUE3QixFQUFBRyxNQUFBLENBQStDSSxJQUEvQyxFQUFQO0FBQ0Q7QUFFREgsR0FBRyxDQUFDTyxVQUFKLEdBQWlCZCxXQUFqQjtlQUVlLFNBQUFlLFNBQUE7RUFBQSxPQUFNLElBQUE1QixjQUFBLGFBQWNvQixHQUFkLEVBQW1CLEtBQW5CLENBQU47QUFBQSxDIn0=