adb4778271ce79c699e99bc7003ee806
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
/** Types of elements found in htmlparser2's DOM */
var ElementType;
(function (ElementType) {
  /** Type for the root element of a document */
  ElementType["Root"] = "root";
  /** Type for Text */
  ElementType["Text"] = "text";
  /** Type for <? ... ?> */
  ElementType["Directive"] = "directive";
  /** Type for <!-- ... --> */
  ElementType["Comment"] = "comment";
  /** Type for <script> tags */
  ElementType["Script"] = "script";
  /** Type for <style> tags */
  ElementType["Style"] = "style";
  /** Type for Any tag */
  ElementType["Tag"] = "tag";
  /** Type for <![CDATA[ ... ]]> */
  ElementType["CDATA"] = "cdata";
  /** Type for <!doctype ...> */
  ElementType["Doctype"] = "doctype";
})(ElementType = exports.ElementType || (exports.ElementType = {}));
/**
 * Tests whether an element is a tag or not.
 *
 * @param elem Element to test
 */
function isTag(elem) {
  return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
}
exports.isTag = isTag;
// Exports for backwards compatibility
/** Type for the root element of a document */
exports.Root = ElementType.Root;
/** Type for Text */
exports.Text = ElementType.Text;
/** Type for <? ... ?> */
exports.Directive = ElementType.Directive;
/** Type for <!-- ... --> */
exports.Comment = ElementType.Comment;
/** Type for <script> tags */
exports.Script = ElementType.Script;
/** Type for <style> tags */
exports.Style = ElementType.Style;
/** Type for Any tag */
exports.Tag = ElementType.Tag;
/** Type for <![CDATA[ ... ]]> */
exports.CDATA = ElementType.CDATA;
/** Type for <!doctype ...> */
exports.Doctype = ElementType.Doctype;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRvY3R5cGUiLCJDREFUQSIsIlRhZyIsIlN0eWxlIiwiU2NyaXB0IiwiQ29tbWVudCIsIkRpcmVjdGl2ZSIsIlRleHQiLCJSb290IiwiaXNUYWciLCJFbGVtZW50VHlwZSIsImVsZW0iLCJ0eXBlIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRvY3R5cGUgPSBleHBvcnRzLkNEQVRBID0gZXhwb3J0cy5UYWcgPSBleHBvcnRzLlN0eWxlID0gZXhwb3J0cy5TY3JpcHQgPSBleHBvcnRzLkNvbW1lbnQgPSBleHBvcnRzLkRpcmVjdGl2ZSA9IGV4cG9ydHMuVGV4dCA9IGV4cG9ydHMuUm9vdCA9IGV4cG9ydHMuaXNUYWcgPSBleHBvcnRzLkVsZW1lbnRUeXBlID0gdm9pZCAwO1xuLyoqIFR5cGVzIG9mIGVsZW1lbnRzIGZvdW5kIGluIGh0bWxwYXJzZXIyJ3MgRE9NICovXG52YXIgRWxlbWVudFR5cGU7XG4oZnVuY3Rpb24gKEVsZW1lbnRUeXBlKSB7XG4gICAgLyoqIFR5cGUgZm9yIHRoZSByb290IGVsZW1lbnQgb2YgYSBkb2N1bWVudCAqL1xuICAgIEVsZW1lbnRUeXBlW1wiUm9vdFwiXSA9IFwicm9vdFwiO1xuICAgIC8qKiBUeXBlIGZvciBUZXh0ICovXG4gICAgRWxlbWVudFR5cGVbXCJUZXh0XCJdID0gXCJ0ZXh0XCI7XG4gICAgLyoqIFR5cGUgZm9yIDw/IC4uLiA/PiAqL1xuICAgIEVsZW1lbnRUeXBlW1wiRGlyZWN0aXZlXCJdID0gXCJkaXJlY3RpdmVcIjtcbiAgICAvKiogVHlwZSBmb3IgPCEtLSAuLi4gLS0+ICovXG4gICAgRWxlbWVudFR5cGVbXCJDb21tZW50XCJdID0gXCJjb21tZW50XCI7XG4gICAgLyoqIFR5cGUgZm9yIDxzY3JpcHQ+IHRhZ3MgKi9cbiAgICBFbGVtZW50VHlwZVtcIlNjcmlwdFwiXSA9IFwic2NyaXB0XCI7XG4gICAgLyoqIFR5cGUgZm9yIDxzdHlsZT4gdGFncyAqL1xuICAgIEVsZW1lbnRUeXBlW1wiU3R5bGVcIl0gPSBcInN0eWxlXCI7XG4gICAgLyoqIFR5cGUgZm9yIEFueSB0YWcgKi9cbiAgICBFbGVtZW50VHlwZVtcIlRhZ1wiXSA9IFwidGFnXCI7XG4gICAgLyoqIFR5cGUgZm9yIDwhW0NEQVRBWyAuLi4gXV0+ICovXG4gICAgRWxlbWVudFR5cGVbXCJDREFUQVwiXSA9IFwiY2RhdGFcIjtcbiAgICAvKiogVHlwZSBmb3IgPCFkb2N0eXBlIC4uLj4gKi9cbiAgICBFbGVtZW50VHlwZVtcIkRvY3R5cGVcIl0gPSBcImRvY3R5cGVcIjtcbn0pKEVsZW1lbnRUeXBlID0gZXhwb3J0cy5FbGVtZW50VHlwZSB8fCAoZXhwb3J0cy5FbGVtZW50VHlwZSA9IHt9KSk7XG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgYW4gZWxlbWVudCBpcyBhIHRhZyBvciBub3QuXG4gKlxuICogQHBhcmFtIGVsZW0gRWxlbWVudCB0byB0ZXN0XG4gKi9cbmZ1bmN0aW9uIGlzVGFnKGVsZW0pIHtcbiAgICByZXR1cm4gKGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuVGFnIHx8XG4gICAgICAgIGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuU2NyaXB0IHx8XG4gICAgICAgIGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuU3R5bGUpO1xufVxuZXhwb3J0cy5pc1RhZyA9IGlzVGFnO1xuLy8gRXhwb3J0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbi8qKiBUeXBlIGZvciB0aGUgcm9vdCBlbGVtZW50IG9mIGEgZG9jdW1lbnQgKi9cbmV4cG9ydHMuUm9vdCA9IEVsZW1lbnRUeXBlLlJvb3Q7XG4vKiogVHlwZSBmb3IgVGV4dCAqL1xuZXhwb3J0cy5UZXh0ID0gRWxlbWVudFR5cGUuVGV4dDtcbi8qKiBUeXBlIGZvciA8PyAuLi4gPz4gKi9cbmV4cG9ydHMuRGlyZWN0aXZlID0gRWxlbWVudFR5cGUuRGlyZWN0aXZlO1xuLyoqIFR5cGUgZm9yIDwhLS0gLi4uIC0tPiAqL1xuZXhwb3J0cy5Db21tZW50ID0gRWxlbWVudFR5cGUuQ29tbWVudDtcbi8qKiBUeXBlIGZvciA8c2NyaXB0PiB0YWdzICovXG5leHBvcnRzLlNjcmlwdCA9IEVsZW1lbnRUeXBlLlNjcmlwdDtcbi8qKiBUeXBlIGZvciA8c3R5bGU+IHRhZ3MgKi9cbmV4cG9ydHMuU3R5bGUgPSBFbGVtZW50VHlwZS5TdHlsZTtcbi8qKiBUeXBlIGZvciBBbnkgdGFnICovXG5leHBvcnRzLlRhZyA9IEVsZW1lbnRUeXBlLlRhZztcbi8qKiBUeXBlIGZvciA8IVtDREFUQVsgLi4uIF1dPiAqL1xuZXhwb3J0cy5DREFUQSA9IEVsZW1lbnRUeXBlLkNEQVRBO1xuLyoqIFR5cGUgZm9yIDwhZG9jdHlwZSAuLi4+ICovXG5leHBvcnRzLkRvY3R5cGUgPSBFbGVtZW50VHlwZS5Eb2N0eXBlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFDN0RELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHRixPQUFPLENBQUNHLEtBQUssR0FBR0gsT0FBTyxDQUFDSSxHQUFHLEdBQUdKLE9BQU8sQ0FBQ0ssS0FBSyxHQUFHTCxPQUFPLENBQUNNLE1BQU0sR0FBR04sT0FBTyxDQUFDTyxPQUFPLEdBQUdQLE9BQU8sQ0FBQ1EsU0FBUyxHQUFHUixPQUFPLENBQUNTLElBQUksR0FBR1QsT0FBTyxDQUFDVSxJQUFJLEdBQUdWLE9BQU8sQ0FBQ1csS0FBSyxHQUFHWCxPQUFPLENBQUNZLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDak07QUFDQSxJQUFJQSxXQUFXO0FBQ2YsQ0FBQyxVQUFVQSxXQUFXLEVBQUU7RUFDcEI7RUFDQUEsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU07RUFDNUI7RUFDQUEsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU07RUFDNUI7RUFDQUEsV0FBVyxDQUFDLFdBQVcsQ0FBQyxHQUFHLFdBQVc7RUFDdEM7RUFDQUEsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLFNBQVM7RUFDbEM7RUFDQUEsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVE7RUFDaEM7RUFDQUEsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU87RUFDOUI7RUFDQUEsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUs7RUFDMUI7RUFDQUEsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU87RUFDOUI7RUFDQUEsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLFNBQVM7QUFDdEMsQ0FBQyxFQUFFQSxXQUFXLEdBQUdaLE9BQU8sQ0FBQ1ksV0FBVyxLQUFLWixPQUFPLENBQUNZLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRCxLQUFLQSxDQUFDRSxJQUFJLEVBQUU7RUFDakIsT0FBUUEsSUFBSSxDQUFDQyxJQUFJLEtBQUtGLFdBQVcsQ0FBQ1IsR0FBRyxJQUNqQ1MsSUFBSSxDQUFDQyxJQUFJLEtBQUtGLFdBQVcsQ0FBQ04sTUFBTSxJQUNoQ08sSUFBSSxDQUFDQyxJQUFJLEtBQUtGLFdBQVcsQ0FBQ1AsS0FBSztBQUN2QztBQUNBTCxPQUFPLENBQUNXLEtBQUssR0FBR0EsS0FBSztBQUNyQjtBQUNBO0FBQ0FYLE9BQU8sQ0FBQ1UsSUFBSSxHQUFHRSxXQUFXLENBQUNGLElBQUk7QUFDL0I7QUFDQVYsT0FBTyxDQUFDUyxJQUFJLEdBQUdHLFdBQVcsQ0FBQ0gsSUFBSTtBQUMvQjtBQUNBVCxPQUFPLENBQUNRLFNBQVMsR0FBR0ksV0FBVyxDQUFDSixTQUFTO0FBQ3pDO0FBQ0FSLE9BQU8sQ0FBQ08sT0FBTyxHQUFHSyxXQUFXLENBQUNMLE9BQU87QUFDckM7QUFDQVAsT0FBTyxDQUFDTSxNQUFNLEdBQUdNLFdBQVcsQ0FBQ04sTUFBTTtBQUNuQztBQUNBTixPQUFPLENBQUNLLEtBQUssR0FBR08sV0FBVyxDQUFDUCxLQUFLO0FBQ2pDO0FBQ0FMLE9BQU8sQ0FBQ0ksR0FBRyxHQUFHUSxXQUFXLENBQUNSLEdBQUc7QUFDN0I7QUFDQUosT0FBTyxDQUFDRyxLQUFLLEdBQUdTLFdBQVcsQ0FBQ1QsS0FBSztBQUNqQztBQUNBSCxPQUFPLENBQUNFLE9BQU8sR0FBR1UsV0FBVyxDQUFDVixPQUFPIn0=