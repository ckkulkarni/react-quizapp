388ac552bd3444c78aaa738a511e560c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropTargetMonitorImpl = void 0;
var _invariant = require("@react-dnd/invariant");
let isCallingCanDrop = false;
class DropTargetMonitorImpl {
  receiveHandlerId(targetId) {
    this.targetId = targetId;
  }
  getHandlerId() {
    return this.targetId;
  }
  subscribeToStateChange(listener, options) {
    return this.internalMonitor.subscribeToStateChange(listener, options);
  }
  canDrop() {
    // Cut out early if the target id has not been set. This should prevent errors
    // where the user has an older version of dnd-core like in
    // https://github.com/react-dnd/react-dnd/issues/1310
    if (!this.targetId) {
      return false;
    }
    (0, _invariant.invariant)(!isCallingCanDrop, 'You may not call monitor.canDrop() inside your canDrop() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor');
    try {
      isCallingCanDrop = true;
      return this.internalMonitor.canDropOnTarget(this.targetId);
    } finally {
      isCallingCanDrop = false;
    }
  }
  isOver(options) {
    if (!this.targetId) {
      return false;
    }
    return this.internalMonitor.isOverTarget(this.targetId, options);
  }
  getItemType() {
    return this.internalMonitor.getItemType();
  }
  getItem() {
    return this.internalMonitor.getItem();
  }
  getDropResult() {
    return this.internalMonitor.getDropResult();
  }
  didDrop() {
    return this.internalMonitor.didDrop();
  }
  getInitialClientOffset() {
    return this.internalMonitor.getInitialClientOffset();
  }
  getInitialSourceClientOffset() {
    return this.internalMonitor.getInitialSourceClientOffset();
  }
  getSourceClientOffset() {
    return this.internalMonitor.getSourceClientOffset();
  }
  getClientOffset() {
    return this.internalMonitor.getClientOffset();
  }
  getDifferenceFromInitialOffset() {
    return this.internalMonitor.getDifferenceFromInitialOffset();
  }
  constructor(manager) {
    this.targetId = null;
    this.internalMonitor = manager.getMonitor();
  }
}
exports.DropTargetMonitorImpl = DropTargetMonitorImpl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW52YXJpYW50IiwicmVxdWlyZSIsImlzQ2FsbGluZ0NhbkRyb3AiLCJEcm9wVGFyZ2V0TW9uaXRvckltcGwiLCJyZWNlaXZlSGFuZGxlcklkIiwidGFyZ2V0SWQiLCJnZXRIYW5kbGVySWQiLCJzdWJzY3JpYmVUb1N0YXRlQ2hhbmdlIiwibGlzdGVuZXIiLCJvcHRpb25zIiwiaW50ZXJuYWxNb25pdG9yIiwiY2FuRHJvcCIsImludmFyaWFudCIsImNhbkRyb3BPblRhcmdldCIsImlzT3ZlciIsImlzT3ZlclRhcmdldCIsImdldEl0ZW1UeXBlIiwiZ2V0SXRlbSIsImdldERyb3BSZXN1bHQiLCJkaWREcm9wIiwiZ2V0SW5pdGlhbENsaWVudE9mZnNldCIsImdldEluaXRpYWxTb3VyY2VDbGllbnRPZmZzZXQiLCJnZXRTb3VyY2VDbGllbnRPZmZzZXQiLCJnZXRDbGllbnRPZmZzZXQiLCJnZXREaWZmZXJlbmNlRnJvbUluaXRpYWxPZmZzZXQiLCJjb25zdHJ1Y3RvciIsIm1hbmFnZXIiLCJnZXRNb25pdG9yIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbHMvRHJvcFRhcmdldE1vbml0b3JJbXBsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0ByZWFjdC1kbmQvaW52YXJpYW50J1xuaW1wb3J0IHR5cGUge1xuXHREcmFnRHJvcE1hbmFnZXIsXG5cdERyYWdEcm9wTW9uaXRvcixcblx0SWRlbnRpZmllcixcblx0TGlzdGVuZXIsXG5cdFVuc3Vic2NyaWJlLFxuXHRYWUNvb3JkLFxufSBmcm9tICdkbmQtY29yZSdcblxuaW1wb3J0IHR5cGUgeyBEcm9wVGFyZ2V0TW9uaXRvciB9IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJ1xuXG5sZXQgaXNDYWxsaW5nQ2FuRHJvcCA9IGZhbHNlXG5cbmV4cG9ydCBjbGFzcyBEcm9wVGFyZ2V0TW9uaXRvckltcGwgaW1wbGVtZW50cyBEcm9wVGFyZ2V0TW9uaXRvciB7XG5cdHByaXZhdGUgaW50ZXJuYWxNb25pdG9yOiBEcmFnRHJvcE1vbml0b3Jcblx0cHJpdmF0ZSB0YXJnZXRJZDogSWRlbnRpZmllciB8IG51bGwgPSBudWxsXG5cblx0cHVibGljIGNvbnN0cnVjdG9yKG1hbmFnZXI6IERyYWdEcm9wTWFuYWdlcikge1xuXHRcdHRoaXMuaW50ZXJuYWxNb25pdG9yID0gbWFuYWdlci5nZXRNb25pdG9yKClcblx0fVxuXG5cdHB1YmxpYyByZWNlaXZlSGFuZGxlcklkKHRhcmdldElkOiBJZGVudGlmaWVyIHwgbnVsbCk6IHZvaWQge1xuXHRcdHRoaXMudGFyZ2V0SWQgPSB0YXJnZXRJZFxuXHR9XG5cblx0cHVibGljIGdldEhhbmRsZXJJZCgpOiBJZGVudGlmaWVyIHwgbnVsbCB7XG5cdFx0cmV0dXJuIHRoaXMudGFyZ2V0SWRcblx0fVxuXG5cdHB1YmxpYyBzdWJzY3JpYmVUb1N0YXRlQ2hhbmdlKFxuXHRcdGxpc3RlbmVyOiBMaXN0ZW5lcixcblx0XHRvcHRpb25zPzogeyBoYW5kbGVySWRzPzogSWRlbnRpZmllcltdIH0sXG5cdCk6IFVuc3Vic2NyaWJlIHtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3Iuc3Vic2NyaWJlVG9TdGF0ZUNoYW5nZShsaXN0ZW5lciwgb3B0aW9ucylcblx0fVxuXG5cdHB1YmxpYyBjYW5Ecm9wKCk6IGJvb2xlYW4ge1xuXHRcdC8vIEN1dCBvdXQgZWFybHkgaWYgdGhlIHRhcmdldCBpZCBoYXMgbm90IGJlZW4gc2V0LiBUaGlzIHNob3VsZCBwcmV2ZW50IGVycm9yc1xuXHRcdC8vIHdoZXJlIHRoZSB1c2VyIGhhcyBhbiBvbGRlciB2ZXJzaW9uIG9mIGRuZC1jb3JlIGxpa2UgaW5cblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtZG5kL3JlYWN0LWRuZC9pc3N1ZXMvMTMxMFxuXHRcdGlmICghdGhpcy50YXJnZXRJZCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0fVxuXHRcdGludmFyaWFudChcblx0XHRcdCFpc0NhbGxpbmdDYW5Ecm9wLFxuXHRcdFx0J1lvdSBtYXkgbm90IGNhbGwgbW9uaXRvci5jYW5Ecm9wKCkgaW5zaWRlIHlvdXIgY2FuRHJvcCgpIGltcGxlbWVudGF0aW9uLiAnICtcblx0XHRcdFx0J1JlYWQgbW9yZTogaHR0cDovL3JlYWN0LWRuZC5naXRodWIuaW8vcmVhY3QtZG5kL2RvY3MvYXBpL2Ryb3AtdGFyZ2V0LW1vbml0b3InLFxuXHRcdClcblxuXHRcdHRyeSB7XG5cdFx0XHRpc0NhbGxpbmdDYW5Ecm9wID0gdHJ1ZVxuXHRcdFx0cmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmNhbkRyb3BPblRhcmdldCh0aGlzLnRhcmdldElkKVxuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRpc0NhbGxpbmdDYW5Ecm9wID0gZmFsc2Vcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgaXNPdmVyKG9wdGlvbnM/OiB7IHNoYWxsb3c/OiBib29sZWFuIH0pOiBib29sZWFuIHtcblx0XHRpZiAoIXRoaXMudGFyZ2V0SWQpIHtcblx0XHRcdHJldHVybiBmYWxzZVxuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuaXNPdmVyVGFyZ2V0KHRoaXMudGFyZ2V0SWQsIG9wdGlvbnMpXG5cdH1cblxuXHRwdWJsaWMgZ2V0SXRlbVR5cGUoKTogSWRlbnRpZmllciB8IG51bGwge1xuXHRcdHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRJdGVtVHlwZSgpXG5cdH1cblxuXHRwdWJsaWMgZ2V0SXRlbSgpOiBhbnkge1xuXHRcdHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRJdGVtKClcblx0fVxuXG5cdHB1YmxpYyBnZXREcm9wUmVzdWx0KCk6IGFueSB7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmdldERyb3BSZXN1bHQoKVxuXHR9XG5cblx0cHVibGljIGRpZERyb3AoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmRpZERyb3AoKVxuXHR9XG5cblx0cHVibGljIGdldEluaXRpYWxDbGllbnRPZmZzZXQoKTogWFlDb29yZCB8IG51bGwge1xuXHRcdHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRJbml0aWFsQ2xpZW50T2Zmc2V0KClcblx0fVxuXG5cdHB1YmxpYyBnZXRJbml0aWFsU291cmNlQ2xpZW50T2Zmc2V0KCk6IFhZQ29vcmQgfCBudWxsIHtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuZ2V0SW5pdGlhbFNvdXJjZUNsaWVudE9mZnNldCgpXG5cdH1cblxuXHRwdWJsaWMgZ2V0U291cmNlQ2xpZW50T2Zmc2V0KCk6IFhZQ29vcmQgfCBudWxsIHtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuZ2V0U291cmNlQ2xpZW50T2Zmc2V0KClcblx0fVxuXG5cdHB1YmxpYyBnZXRDbGllbnRPZmZzZXQoKTogWFlDb29yZCB8IG51bGwge1xuXHRcdHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRDbGllbnRPZmZzZXQoKVxuXHR9XG5cblx0cHVibGljIGdldERpZmZlcmVuY2VGcm9tSW5pdGlhbE9mZnNldCgpOiBYWUNvb3JkIHwgbnVsbCB7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmdldERpZmZlcmVuY2VGcm9tSW5pdGlhbE9mZnNldCgpXG5cdH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsVUFBQSxHQUFBQyxPQUFBO0FBWUEsSUFBSUMsZ0JBQWdCLEdBQUcsS0FBSztBQUVyQixNQUFNQyxxQkFBcUI7RUFRakNDLGdCQUF1QkEsQ0FBQ0MsUUFBMkIsRUFBUTtJQUMxRCxJQUFJLENBQUNBLFFBQVEsR0FBR0EsUUFBUTs7RUFHekJDLFlBQW1CQSxDQUFBLEVBQXNCO0lBQ3hDLE9BQU8sSUFBSSxDQUFDRCxRQUFROztFQUdyQkUsc0JBQTZCQSxDQUM1QkMsUUFBa0IsRUFDbEJDLE9BQXVDLEVBQ3pCO0lBQ2QsT0FBTyxJQUFJLENBQUNDLGVBQWUsQ0FBQ0gsc0JBQXNCLENBQUNDLFFBQVEsRUFBRUMsT0FBTyxDQUFDOztFQUd0RUUsT0FBY0EsQ0FBQSxFQUFZO0lBQ3pCO0lBQ0E7SUFDQTtJQUNBLElBQUksQ0FBQyxJQUFJLENBQUNOLFFBQVEsRUFBRTtNQUNuQixPQUFPLEtBQUs7O0lBRWIsSUFBQU8sb0JBQVMsRUFDUixDQUFDVixnQkFBZ0IsRUFDakIsMkVBQTJFLEdBQzFFLDhFQUE4RSxDQUMvRTtJQUVELElBQUk7TUFDSEEsZ0JBQWdCLEdBQUcsSUFBSTtNQUN2QixPQUFPLElBQUksQ0FBQ1EsZUFBZSxDQUFDRyxlQUFlLENBQUMsSUFBSSxDQUFDUixRQUFRLENBQUM7S0FDMUQsU0FBUztNQUNUSCxnQkFBZ0IsR0FBRyxLQUFLOzs7RUFJMUJZLE1BQWFBLENBQUNMLE9BQStCLEVBQVc7SUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQ0osUUFBUSxFQUFFO01BQ25CLE9BQU8sS0FBSzs7SUFFYixPQUFPLElBQUksQ0FBQ0ssZUFBZSxDQUFDSyxZQUFZLENBQUMsSUFBSSxDQUFDVixRQUFRLEVBQUVJLE9BQU8sQ0FBQzs7RUFHakVPLFdBQWtCQSxDQUFBLEVBQXNCO0lBQ3ZDLE9BQU8sSUFBSSxDQUFDTixlQUFlLENBQUNNLFdBQVcsRUFBRTs7RUFHMUNDLE9BQWNBLENBQUEsRUFBUTtJQUNyQixPQUFPLElBQUksQ0FBQ1AsZUFBZSxDQUFDTyxPQUFPLEVBQUU7O0VBR3RDQyxhQUFvQkEsQ0FBQSxFQUFRO0lBQzNCLE9BQU8sSUFBSSxDQUFDUixlQUFlLENBQUNRLGFBQWEsRUFBRTs7RUFHNUNDLE9BQWNBLENBQUEsRUFBWTtJQUN6QixPQUFPLElBQUksQ0FBQ1QsZUFBZSxDQUFDUyxPQUFPLEVBQUU7O0VBR3RDQyxzQkFBNkJBLENBQUEsRUFBbUI7SUFDL0MsT0FBTyxJQUFJLENBQUNWLGVBQWUsQ0FBQ1Usc0JBQXNCLEVBQUU7O0VBR3JEQyw0QkFBbUNBLENBQUEsRUFBbUI7SUFDckQsT0FBTyxJQUFJLENBQUNYLGVBQWUsQ0FBQ1csNEJBQTRCLEVBQUU7O0VBRzNEQyxxQkFBNEJBLENBQUEsRUFBbUI7SUFDOUMsT0FBTyxJQUFJLENBQUNaLGVBQWUsQ0FBQ1kscUJBQXFCLEVBQUU7O0VBR3BEQyxlQUFzQkEsQ0FBQSxFQUFtQjtJQUN4QyxPQUFPLElBQUksQ0FBQ2IsZUFBZSxDQUFDYSxlQUFlLEVBQUU7O0VBRzlDQyw4QkFBcUNBLENBQUEsRUFBbUI7SUFDdkQsT0FBTyxJQUFJLENBQUNkLGVBQWUsQ0FBQ2MsOEJBQThCLEVBQUU7O0VBaEY3REMsWUFBbUJDLE9BQXdCLEVBQUU7SUFGN0MsS0FBUXJCLFFBQVEsR0FBc0IsSUFBSTtJQUd6QyxJQUFJLENBQUNLLGVBQWUsR0FBR2dCLE9BQU8sQ0FBQ0MsVUFBVSxFQUFFOzs7QUFpRjVDQyxPQUFBLENBQUF6QixxQkFBQSxHQUFBQSxxQkFBQSJ9