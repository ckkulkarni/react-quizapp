338812a2de111a338ea423de9d28c533
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _Home = _interopRequireDefault(require("./../../homeandsubmit/Home"));
var _enzymeAdapterReact = _interopRequireDefault(require("@cfaester/enzyme-adapter-react-18"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _reactDnd = require("react-dnd");
var _reactDndHtml5Backend = require("react-dnd-html5-backend");
var _reactRouterDom = require("react-router-dom");
var _Question = _interopRequireDefault(require("../../questions/Question1"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/base.feature");
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User submits form with valid inputs", ({
    given,
    when,
    and,
    then
  }) => {
    let wrapper;
    beforeEach(() => {
      wrapper = (0, enzyme.mount)( /*#__PURE__*/_react.default.createElement(_reactDnd.DndProvider, {
        backend: _reactDndHtml5Backend.HTML5Backend
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: ["/"]
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/",
        element: /*#__PURE__*/_react.default.createElement(_Home.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/question",
        element: /*#__PURE__*/_react.default.createElement(_Question.default, null)
      })))));
    });
    given("I am on the Home Screen", () => {
      const wrapper = (0, enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_Home.default, null));
      expect(wrapper).toMatchSnapshot();
    });
    when('I enter a valid email "test@test.com"', () => {
      expect(wrapper.find("TextInput").at(0)).toBeTruthy();
    });
    and('I enter a valid name "John"', () => {
      expect(wrapper.find("TextInput").at(1)).toBeTruthy();
    });
    and('I enter a valid phone number "1234567890"', () => {
      expect(wrapper.find("TextInput").at(2)).toBeTruthy();
    });
    and("I submit the form", () => {
      const setSubmit = jest.fn();
      wrapper.find("TextInput").at(0).simulate("changeText", "chandrakanth");
      wrapper.find("TextInput").at(1).simulate("changeText", "chandra@kanth.com");
      wrapper.find("TextInput").at(2).simulate("changeText", "1234567890");
      wrapper.find("Button").at(0).props().onPress();
      expect(wrapper.find("Button").at(0).prop("disabled")).toBe(false);
    });
    then("I should see the start quiz button", () => {
      wrapper.find("Button").at(0).props().onPress();
      const startQuizButton = wrapper.find("Button").at(1);
      expect(startQuizButton.prop("disabled")).toBe(false);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,