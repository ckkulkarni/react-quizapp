77cad5ed5ecd741af765f52db87ad0cc
"use strict";

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function () {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compileToken = exports.compileUnsafe = exports.compile = void 0;
var css_what_1 = require("css-what");
var boolbase_1 = __importDefault(require("boolbase"));
var sort_js_1 = __importStar(require("./sort.js"));
var general_js_1 = require("./general.js");
var subselects_js_1 = require("./pseudo-selectors/subselects.js");
/**
 * Compiles a selector to an executable function.
 *
 * @param selector Selector to compile.
 * @param options Compilation options.
 * @param context Optional context for the selector.
 */
function compile(selector, options, context) {
  var next = compileUnsafe(selector, options, context);
  return (0, subselects_js_1.ensureIsTag)(next, options.adapter);
}
exports.compile = compile;
function compileUnsafe(selector, options, context) {
  var token = typeof selector === "string" ? (0, css_what_1.parse)(selector) : selector;
  return compileToken(token, options, context);
}
exports.compileUnsafe = compileUnsafe;
function includesScopePseudo(t) {
  return t.type === css_what_1.SelectorType.Pseudo && (t.name === "scope" || Array.isArray(t.data) && t.data.some(function (data) {
    return data.some(includesScopePseudo);
  }));
}
var DESCENDANT_TOKEN = {
  type: css_what_1.SelectorType.Descendant
};
var FLEXIBLE_DESCENDANT_TOKEN = {
  type: "_flexibleDescendant"
};
var SCOPE_TOKEN = {
  type: css_what_1.SelectorType.Pseudo,
  name: "scope",
  data: null
};
/*
 * CSS 4 Spec (Draft): 3.4.1. Absolutizing a Relative Selector
 * http://www.w3.org/TR/selectors4/#absolutizing
 */
function absolutize(token, _a, context) {
  var adapter = _a.adapter;
  // TODO Use better check if the context is a document
  var hasContext = !!(context === null || context === void 0 ? void 0 : context.every(function (e) {
    var parent = adapter.isTag(e) && adapter.getParent(e);
    return e === subselects_js_1.PLACEHOLDER_ELEMENT || parent && adapter.isTag(parent);
  }));
  for (var _i = 0, token_1 = token; _i < token_1.length; _i++) {
    var t = token_1[_i];
    if (t.length > 0 && (0, sort_js_1.isTraversal)(t[0]) && t[0].type !== css_what_1.SelectorType.Descendant) {
      // Don't continue in else branch
    } else if (hasContext && !t.some(includesScopePseudo)) {
      t.unshift(DESCENDANT_TOKEN);
    } else {
      continue;
    }
    t.unshift(SCOPE_TOKEN);
  }
}
function compileToken(token, options, context) {
  var _a;
  token.forEach(sort_js_1.default);
  context = (_a = options.context) !== null && _a !== void 0 ? _a : context;
  var isArrayContext = Array.isArray(context);
  var finalContext = context && (Array.isArray(context) ? context : [context]);
  // Check if the selector is relative
  if (options.relativeSelector !== false) {
    absolutize(token, options, finalContext);
  } else if (token.some(function (t) {
    return t.length > 0 && (0, sort_js_1.isTraversal)(t[0]);
  })) {
    throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");
  }
  var shouldTestNextSiblings = false;
  var query = token.map(function (rules) {
    if (rules.length >= 2) {
      var first = rules[0],
        second = rules[1];
      if (first.type !== css_what_1.SelectorType.Pseudo || first.name !== "scope") {
        // Ignore
      } else if (isArrayContext && second.type === css_what_1.SelectorType.Descendant) {
        rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
      } else if (second.type === css_what_1.SelectorType.Adjacent || second.type === css_what_1.SelectorType.Sibling) {
        shouldTestNextSiblings = true;
      }
    }
    return compileRules(rules, options, finalContext);
  }).reduce(reduceRules, boolbase_1.default.falseFunc);
  query.shouldTestNextSiblings = shouldTestNextSiblings;
  return query;
}
exports.compileToken = compileToken;
function compileRules(rules, options, context) {
  var _a;
  return rules.reduce(function (previous, rule) {
    return previous === boolbase_1.default.falseFunc ? boolbase_1.default.falseFunc : (0, general_js_1.compileGeneralSelector)(previous, rule, options, context, compileToken);
  }, (_a = options.rootFunc) !== null && _a !== void 0 ? _a : boolbase_1.default.trueFunc);
}
function reduceRules(a, b) {
  if (b === boolbase_1.default.falseFunc || a === boolbase_1.default.trueFunc) {
    return a;
  }
  if (a === boolbase_1.default.falseFunc || b === boolbase_1.default.trueFunc) {
    return b;
  }
  return function combine(elem) {
    return a(elem) || b(elem);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3Nfd2hhdF8xIiwicmVxdWlyZSIsImJvb2xiYXNlXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJzb3J0X2pzXzEiLCJfX2ltcG9ydFN0YXIiLCJnZW5lcmFsX2pzXzEiLCJzdWJzZWxlY3RzX2pzXzEiLCJjb21waWxlIiwic2VsZWN0b3IiLCJvcHRpb25zIiwiY29udGV4dCIsIm5leHQiLCJjb21waWxlVW5zYWZlIiwiZW5zdXJlSXNUYWciLCJhZGFwdGVyIiwiZXhwb3J0cyIsInRva2VuIiwicGFyc2UiLCJjb21waWxlVG9rZW4iLCJpbmNsdWRlc1Njb3BlUHNldWRvIiwidCIsInR5cGUiLCJTZWxlY3RvclR5cGUiLCJQc2V1ZG8iLCJuYW1lIiwiQXJyYXkiLCJpc0FycmF5IiwiZGF0YSIsInNvbWUiLCJERVNDRU5EQU5UX1RPS0VOIiwiRGVzY2VuZGFudCIsIkZMRVhJQkxFX0RFU0NFTkRBTlRfVE9LRU4iLCJTQ09QRV9UT0tFTiIsImFic29sdXRpemUiLCJfYSIsImhhc0NvbnRleHQiLCJldmVyeSIsImUiLCJwYXJlbnQiLCJpc1RhZyIsImdldFBhcmVudCIsIlBMQUNFSE9MREVSX0VMRU1FTlQiLCJfaSIsInRva2VuXzEiLCJsZW5ndGgiLCJpc1RyYXZlcnNhbCIsInVuc2hpZnQiLCJmb3JFYWNoIiwiZGVmYXVsdCIsImlzQXJyYXlDb250ZXh0IiwiZmluYWxDb250ZXh0IiwicmVsYXRpdmVTZWxlY3RvciIsIkVycm9yIiwic2hvdWxkVGVzdE5leHRTaWJsaW5ncyIsInF1ZXJ5IiwibWFwIiwicnVsZXMiLCJmaXJzdCIsInNlY29uZCIsIkFkamFjZW50IiwiU2libGluZyIsImNvbXBpbGVSdWxlcyIsInJlZHVjZSIsInJlZHVjZVJ1bGVzIiwiZmFsc2VGdW5jIiwicHJldmlvdXMiLCJydWxlIiwiY29tcGlsZUdlbmVyYWxTZWxlY3RvciIsInJvb3RGdW5jIiwidHJ1ZUZ1bmMiLCJhIiwiYiIsImNvbWJpbmUiLCJlbGVtIl0sInNvdXJjZXMiOlsiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2ZiNTUvY3NzLXNlbGVjdC8wZjA3MjVhOWRmZWRkZDJmZGI1NGVkYTk2NTZjZGJhYjViYmY2YmU2L3NyYy9jb21waWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFDLGVBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLFNBQUEsR0FBQUMsWUFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQUssWUFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sZUFBQSxHQUFBTixPQUFBO0FBVUE7Ozs7Ozs7QUFPQSxTQUFnQk8sT0FBT0EsQ0FDbkJDLFFBQStCLEVBQy9CQyxPQUEyQyxFQUMzQ0MsT0FBdUI7RUFFdkIsSUFBTUMsSUFBSSxHQUFHQyxhQUFhLENBQUNKLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxPQUFPLENBQUM7RUFDdEQsT0FBTyxJQUFBSixlQUFBLENBQUFPLFdBQVcsRUFBQ0YsSUFBSSxFQUFFRixPQUFPLENBQUNLLE9BQU8sQ0FBQztBQUM3QztBQVBBQyxPQUFBLENBQUFSLE9BQUEsR0FBQUEsT0FBQTtBQVNBLFNBQWdCSyxhQUFhQSxDQUN6QkosUUFBK0IsRUFDL0JDLE9BQTJDLEVBQzNDQyxPQUF1QjtFQUV2QixJQUFNTSxLQUFLLEdBQUcsT0FBT1IsUUFBUSxLQUFLLFFBQVEsR0FBRyxJQUFBVCxVQUFBLENBQUFrQixLQUFLLEVBQUNULFFBQVEsQ0FBQyxHQUFHQSxRQUFRO0VBQ3ZFLE9BQU9VLFlBQVksQ0FBb0JGLEtBQUssRUFBRVAsT0FBTyxFQUFFQyxPQUFPLENBQUM7QUFDbkU7QUFQQUssT0FBQSxDQUFBSCxhQUFBLEdBQUFBLGFBQUE7QUFTQSxTQUFTTyxtQkFBbUJBLENBQUNDLENBQW1CO0VBQzVDLE9BQ0lBLENBQUMsQ0FBQ0MsSUFBSSxLQUFLdEIsVUFB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