9406611608337efb6d9b1528d617fe18
'use strict';

var inspect = require('object-inspect');
var GetIntrinsic = require('get-intrinsic');
var $TypeError = GetIntrinsic('%TypeError%');
var Call = require('./Call');
var Get = require('./Get');
var GetIterator = require('./GetIterator');
var IsCallable = require('./IsCallable');
var IteratorClose = require('./IteratorClose');
var IteratorStep = require('./IteratorStep');
var IteratorValue = require('./IteratorValue');
var Type = require('./Type');

// https://262.ecma-international.org/10.0//#sec-add-entries-from-iterable

module.exports = function AddEntriesFromIterable(target, iterable, adder) {
  if (!IsCallable(adder)) {
    throw new $TypeError('Assertion failed: `adder` is not callable');
  }
  if (iterable == null) {
    throw new $TypeError('Assertion failed: `iterable` is present, and not nullish');
  }
  var iteratorRecord = GetIterator(iterable);
  while (true) {
    // eslint-disable-line no-constant-condition
    var next = IteratorStep(iteratorRecord);
    if (!next) {
      return target;
    }
    var nextItem = IteratorValue(next);
    if (Type(nextItem) !== 'Object') {
      var error = new $TypeError('iterator next must return an Object, got ' + inspect(nextItem));
      return IteratorClose(iteratorRecord, function () {
        throw error;
      } // eslint-disable-line no-loop-func
      );
    }

    try {
      var k = Get(nextItem, '0');
      var v = Get(nextItem, '1');
      Call(adder, target, [k, v]);
    } catch (e) {
      return IteratorClose(iteratorRecord, function () {
        throw e;
      });
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnNwZWN0IiwicmVxdWlyZSIsIkdldEludHJpbnNpYyIsIiRUeXBlRXJyb3IiLCJDYWxsIiwiR2V0IiwiR2V0SXRlcmF0b3IiLCJJc0NhbGxhYmxlIiwiSXRlcmF0b3JDbG9zZSIsIkl0ZXJhdG9yU3RlcCIsIkl0ZXJhdG9yVmFsdWUiLCJUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFkZEVudHJpZXNGcm9tSXRlcmFibGUiLCJ0YXJnZXQiLCJpdGVyYWJsZSIsImFkZGVyIiwiaXRlcmF0b3JSZWNvcmQiLCJuZXh0IiwibmV4dEl0ZW0iLCJlcnJvciIsImsiLCJ2IiwiZSJdLCJzb3VyY2VzIjpbIkFkZEVudHJpZXNGcm9tSXRlcmFibGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgQ2FsbCA9IHJlcXVpcmUoJy4vQ2FsbCcpO1xudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgR2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuL0dldEl0ZXJhdG9yJyk7XG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4vSXNDYWxsYWJsZScpO1xudmFyIEl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuL0l0ZXJhdG9yQ2xvc2UnKTtcbnZhciBJdGVyYXRvclN0ZXAgPSByZXF1aXJlKCcuL0l0ZXJhdG9yU3RlcCcpO1xudmFyIEl0ZXJhdG9yVmFsdWUgPSByZXF1aXJlKCcuL0l0ZXJhdG9yVmFsdWUnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTAuMC8vI3NlYy1hZGQtZW50cmllcy1mcm9tLWl0ZXJhYmxlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQWRkRW50cmllc0Zyb21JdGVyYWJsZSh0YXJnZXQsIGl0ZXJhYmxlLCBhZGRlcikge1xuXHRpZiAoIUlzQ2FsbGFibGUoYWRkZXIpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBhZGRlcmAgaXMgbm90IGNhbGxhYmxlJyk7XG5cdH1cblx0aWYgKGl0ZXJhYmxlID09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYGl0ZXJhYmxlYCBpcyBwcmVzZW50LCBhbmQgbm90IG51bGxpc2gnKTtcblx0fVxuXHR2YXIgaXRlcmF0b3JSZWNvcmQgPSBHZXRJdGVyYXRvcihpdGVyYWJsZSk7XG5cdHdoaWxlICh0cnVlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG5cdFx0dmFyIG5leHQgPSBJdGVyYXRvclN0ZXAoaXRlcmF0b3JSZWNvcmQpO1xuXHRcdGlmICghbmV4dCkge1xuXHRcdFx0cmV0dXJuIHRhcmdldDtcblx0XHR9XG5cdFx0dmFyIG5leHRJdGVtID0gSXRlcmF0b3JWYWx1ZShuZXh0KTtcblx0XHRpZiAoVHlwZShuZXh0SXRlbSkgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR2YXIgZXJyb3IgPSBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgbmV4dCBtdXN0IHJldHVybiBhbiBPYmplY3QsIGdvdCAnICsgaW5zcGVjdChuZXh0SXRlbSkpO1xuXHRcdFx0cmV0dXJuIEl0ZXJhdG9yQ2xvc2UoXG5cdFx0XHRcdGl0ZXJhdG9yUmVjb3JkLFxuXHRcdFx0XHRmdW5jdGlvbiAoKSB7IHRocm93IGVycm9yOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9vcC1mdW5jXG5cdFx0XHQpO1xuXHRcdH1cblx0XHR0cnkge1xuXHRcdFx0dmFyIGsgPSBHZXQobmV4dEl0ZW0sICcwJyk7XG5cdFx0XHR2YXIgdiA9IEdldChuZXh0SXRlbSwgJzEnKTtcblx0XHRcdENhbGwoYWRkZXIsIHRhcmdldCwgW2ssIHZdKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gSXRlcmF0b3JDbG9zZShcblx0XHRcdFx0aXRlcmF0b3JSZWNvcmQsXG5cdFx0XHRcdGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfVxuXHRcdFx0KTtcblx0XHR9XG5cdH1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7QUFFdkMsSUFBSUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRTNDLElBQUlFLFVBQVUsR0FBR0QsWUFBWSxDQUFDLGFBQWEsQ0FBQztBQUU1QyxJQUFJRSxJQUFJLEdBQUdILE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDNUIsSUFBSUksR0FBRyxHQUFHSixPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzFCLElBQUlLLFdBQVcsR0FBR0wsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUMxQyxJQUFJTSxVQUFVLEdBQUdOLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDeEMsSUFBSU8sYUFBYSxHQUFHUCxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFDOUMsSUFBSVEsWUFBWSxHQUFHUixPQUFPLENBQUMsZ0JBQWdCLENBQUM7QUFDNUMsSUFBSVMsYUFBYSxHQUFHVCxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFDOUMsSUFBSVUsSUFBSSxHQUFHVixPQUFPLENBQUMsUUFBUSxDQUFDOztBQUU1Qjs7QUFFQVcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0Msc0JBQXNCQSxDQUFDQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFO0VBQ3pFLElBQUksQ0FBQ1YsVUFBVSxDQUFDVSxLQUFLLENBQUMsRUFBRTtJQUN2QixNQUFNLElBQUlkLFVBQVUsQ0FBQywyQ0FBMkMsQ0FBQztFQUNsRTtFQUNBLElBQUlhLFFBQVEsSUFBSSxJQUFJLEVBQUU7SUFDckIsTUFBTSxJQUFJYixVQUFVLENBQUMsMERBQTBELENBQUM7RUFDakY7RUFDQSxJQUFJZSxjQUFjLEdBQUdaLFdBQVcsQ0FBQ1UsUUFBUSxDQUFDO0VBQzFDLE9BQU8sSUFBSSxFQUFFO0lBQUU7SUFDZCxJQUFJRyxJQUFJLEdBQUdWLFlBQVksQ0FBQ1MsY0FBYyxDQUFDO0lBQ3ZDLElBQUksQ0FBQ0MsSUFBSSxFQUFFO01BQ1YsT0FBT0osTUFBTTtJQUNkO0lBQ0EsSUFBSUssUUFBUSxHQUFHVixhQUFhLENBQUNTLElBQUksQ0FBQztJQUNsQyxJQUFJUixJQUFJLENBQUNTLFFBQVEsQ0FBQyxLQUFLLFFBQVEsRUFBRTtNQUNoQyxJQUFJQyxLQUFLLEdBQUcsSUFBSWxCLFVBQVUsQ0FBQywyQ0FBMkMsR0FBR0gsT0FBTyxDQUFDb0IsUUFBUSxDQUFDLENBQUM7TUFDM0YsT0FBT1osYUFBYSxDQUNuQlUsY0FBYyxFQUNkLFlBQVk7UUFBRSxNQUFNRyxLQUFLO01BQUUsQ0FBQyxDQUFDO01BQUEsQ0FDN0I7SUFDRjs7SUFDQSxJQUFJO01BQ0gsSUFBSUMsQ0FBQyxHQUFHakIsR0FBRyxDQUFDZSxRQUFRLEVBQUUsR0FBRyxDQUFDO01BQzFCLElBQUlHLENBQUMsR0FBR2xCLEdBQUcsQ0FBQ2UsUUFBUSxFQUFFLEdBQUcsQ0FBQztNQUMxQmhCLElBQUksQ0FBQ2EsS0FBSyxFQUFFRixNQUFNLEVBQUUsQ0FBQ08sQ0FBQyxFQUFFQyxDQUFDLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUMsT0FBT0MsQ0FBQyxFQUFFO01BQ1gsT0FBT2hCLGFBQWEsQ0FDbkJVLGNBQWMsRUFDZCxZQUFZO1FBQUUsTUFBTU0sQ0FBQztNQUFFLENBQUMsQ0FDeEI7SUFDRjtFQUNEO0FBQ0QsQ0FBQyJ9