9d3c44946a994cd04f9d23ed952ee1f1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _App = require("./../../App");
var _material = require("@mui/material");
var _reactRouter = require("react-router");
var _reactChartjs = require("react-chartjs-2");
require("chart.js/auto");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const SubmitScreen = () => {
  _getJestObj().mock("react-chartjs-2", () => ({
    Pie: () => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      "data-testid": "submitscreen-piechart"
    })
  }));
  const navigation = (0, _reactRouter.useNavigate)();
  const {
    score,
    setScore,
    selectedLanguage,
    email,
    name,
    phoneNumber,
    age
  } = (0, _react.useContext)(_App.QuizContext);
  const pieData = {
    labels: ["Correct Answers", "Incorrect Answers"],
    datasets: [{
      data: [score, 8 - score],
      backgroundColor: ["green", "red"]
    }]
  };
  const handleNavigate = () => {
    setScore(0);
    navigation("/");
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "quiz-container",
    "data-testid": "submission-container",
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
      sx: {
        display: "flex",
        flexDirection: "column",
        gap: 2
      },
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
        sx: {
          border: 1,
          borderColor: "divider",
          p: 2,
          borderRadius: 2,
          display: "flex",
          flexDirection: "column",
          gap: 1
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex",
            gap: 0.8
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            children: "Name: "
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            children: name
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex",
            gap: 0.8
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            children: "Age: "
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            children: age
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex",
            gap: 0.8
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            children: "Phone Number: "
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            children: phoneNumber
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex",
            gap: 0.8
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            children: "Mail ID: "
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            children: email
          })]
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
        sx: {
          display: "flex",
          gap: 0.8,
          justifyContent: "center"
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          children: "Your selected language was. . ."
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          sx: {
            color: "red"
          },
          children: selectedLanguage
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
        sx: {
          display: "flex",
          gap: 10
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          children: "Maximum Score: 8"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          children: "QnA: 4"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          children: "Drag and Drop Question: 4"
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
        sx: {
          display: "flex",
          gap: 2
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          children: "You have scored"
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Typography, {
          sx: {
            color: "red",
            border: 2,
            borderRadius: 10,
            p: 0.2
          },
          children: [score, "/8"]
        }), score === 8 ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          children: "Congratulations! You have received the full score!"
        }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
          children: "Try again for full score!"
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
        sx: {
          display: "flex",
          flexDirection: "column",
          gap: 2,
          p: 1,
          alignItems: "center"
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
          sx: {
            width: "50%",
            margin: "0 auto"
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactChartjs.Pie, {
            data: pieData,
            "data-testid": "submitscreen-piechart",
            id: "chart"
          })
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
        sx: {
          display: "flex",
          justifyContent: "flex-end"
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Button, {
          onClick: handleNavigate,
          children: "Try again?"
        })
      })]
    })
  });
};
var _default = SubmitScreen;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX0FwcCIsIl9tYXRlcmlhbCIsIl9yZWFjdFJvdXRlciIsIl9yZWFjdENoYXJ0anMiLCJfanN4UnVudGltZSIsIl9nZXRKZXN0T2JqIiwiamVzdCIsIlN1Ym1pdFNjcmVlbiIsIm1vY2siLCJQaWUiLCJqc3giLCJuYXZpZ2F0aW9uIiwidXNlTmF2aWdhdGUiLCJzY29yZSIsInNldFNjb3JlIiwic2VsZWN0ZWRMYW5ndWFnZSIsImVtYWlsIiwibmFtZSIsInBob25lTnVtYmVyIiwiYWdlIiwidXNlQ29udGV4dCIsIlF1aXpDb250ZXh0IiwicGllRGF0YSIsImxhYmVscyIsImRhdGFzZXRzIiwiZGF0YSIsImJhY2tncm91bmRDb2xvciIsImhhbmRsZU5hdmlnYXRlIiwiY2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJqc3hzIiwiQm94Iiwic3giLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsImdhcCIsImJvcmRlciIsImJvcmRlckNvbG9yIiwicCIsImJvcmRlclJhZGl1cyIsIlR5cG9ncmFwaHkiLCJqdXN0aWZ5Q29udGVudCIsImNvbG9yIiwiYWxpZ25JdGVtcyIsIndpZHRoIiwibWFyZ2luIiwiaWQiLCJCdXR0b24iLCJvbkNsaWNrIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIlN1Ym1pdFNjcmVlbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBRdWl6Q29udGV4dCB9IGZyb20gXCIuLy4uLy4uL0FwcFwiO1xyXG5pbXBvcnQgeyBCb3gsIEJ1dHRvbiwgVHlwb2dyYXBoeSB9IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgeyBQaWUgfSBmcm9tIFwicmVhY3QtY2hhcnRqcy0yXCI7XHJcbmltcG9ydCBcImNoYXJ0LmpzL2F1dG9cIjtcclxuY29uc3QgU3VibWl0U2NyZWVuID0gKCkgPT4ge1xyXG4gIGplc3QubW9jayhcInJlYWN0LWNoYXJ0anMtMlwiLCAoKSA9PiAoe1xyXG4gICAgUGllOiAoKSA9PiA8ZGl2IGRhdGEtdGVzdGlkPVwic3VibWl0c2NyZWVuLXBpZWNoYXJ0XCIgLz4sXHJcbiAgfSkpO1xyXG5cclxuICBjb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGUoKTtcclxuICBjb25zdCB7IHNjb3JlLCBzZXRTY29yZSwgc2VsZWN0ZWRMYW5ndWFnZSwgZW1haWwsIG5hbWUsIHBob25lTnVtYmVyLCBhZ2UgfSA9XHJcbiAgICB1c2VDb250ZXh0KFF1aXpDb250ZXh0KTtcclxuICBjb25zdCBwaWVEYXRhID0ge1xyXG4gICAgbGFiZWxzOiBbXCJDb3JyZWN0IEFuc3dlcnNcIiwgXCJJbmNvcnJlY3QgQW5zd2Vyc1wiXSxcclxuICAgIGRhdGFzZXRzOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBkYXRhOiBbc2NvcmUsIDggLSBzY29yZV0sXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBbXCJncmVlblwiLCBcInJlZFwiXSxcclxuICAgICAgfSxcclxuICAgIF0sXHJcbiAgfTtcclxuICBjb25zdCBoYW5kbGVOYXZpZ2F0ZSA9ICgpID0+IHtcclxuICAgIHNldFNjb3JlKDApO1xyXG4gICAgbmF2aWdhdGlvbihcIi9cIik7XHJcbiAgfTtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJxdWl6LWNvbnRhaW5lclwiIGRhdGEtdGVzdGlkPVwic3VibWlzc2lvbi1jb250YWluZXJcIj5cclxuICAgICAgPEJveCBzeD17eyBkaXNwbGF5OiBcImZsZXhcIiwgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIiwgZ2FwOiAyIH19PlxyXG4gICAgICAgIDxCb3hcclxuICAgICAgICAgIHN4PXt7XHJcbiAgICAgICAgICAgIGJvcmRlcjogMSxcclxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwiZGl2aWRlclwiLFxyXG4gICAgICAgICAgICBwOiAyLFxyXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxyXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxyXG4gICAgICAgICAgICBnYXA6IDEsXHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogXCJmbGV4XCIsIGdhcDogMC44IH19PlxyXG4gICAgICAgICAgICA8VHlwb2dyYXBoeT5OYW1lOiA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5PntuYW1lfTwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgICAgPEJveCBzeD17eyBkaXNwbGF5OiBcImZsZXhcIiwgZ2FwOiAwLjggfX0+XHJcbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5PkFnZTogPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICA8VHlwb2dyYXBoeT57YWdlfTwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgICAgPEJveCBzeD17eyBkaXNwbGF5OiBcImZsZXhcIiwgZ2FwOiAwLjggfX0+XHJcbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5PlBob25lIE51bWJlcjogPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICA8VHlwb2dyYXBoeT57cGhvbmVOdW1iZXJ9PC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgICA8Qm94IHN4PXt7IGRpc3BsYXk6IFwiZmxleFwiLCBnYXA6IDAuOCB9fT5cclxuICAgICAgICAgICAgPFR5cG9ncmFwaHk+TWFpbCBJRDogPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICA8VHlwb2dyYXBoeT57ZW1haWx9PC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgPEJveCBzeD17eyBkaXNwbGF5OiBcImZsZXhcIiwgZ2FwOiAwLjgsIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiIH19PlxyXG4gICAgICAgICAgPFR5cG9ncmFwaHk+WW91ciBzZWxlY3RlZCBsYW5ndWFnZSB3YXMuIC4gLjwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgIDxUeXBvZ3JhcGh5IHN4PXt7IGNvbG9yOiBcInJlZFwiIH19PntzZWxlY3RlZExhbmd1YWdlfTwvVHlwb2dyYXBoeT5cclxuICAgICAgICA8L0JveD5cclxuICAgICAgICA8Qm94IHN4PXt7IGRpc3BsYXk6IFwiZmxleFwiLCBnYXA6IDEwIH19PlxyXG4gICAgICAgICAgPFR5cG9ncmFwaHk+TWF4aW11bSBTY29yZTogODwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgIDxUeXBvZ3JhcGh5PlFuQTogNDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgIDxUeXBvZ3JhcGh5PkRyYWcgYW5kIERyb3AgUXVlc3Rpb246IDQ8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgPEJveCBzeD17eyBkaXNwbGF5OiBcImZsZXhcIiwgZ2FwOiAyIH19PlxyXG4gICAgICAgICAgPFR5cG9ncmFwaHk+WW91IGhhdmUgc2NvcmVkPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgPFR5cG9ncmFwaHlcclxuICAgICAgICAgICAgc3g9e3sgY29sb3I6IFwicmVkXCIsIGJvcmRlcjogMiwgYm9yZGVyUmFkaXVzOiAxMCwgcDogMC4yIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHtzY29yZX0vOFxyXG4gICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAge3Njb3JlID09PSA4ID8gKFxyXG4gICAgICAgICAgICA8VHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICBDb25ncmF0dWxhdGlvbnMhIFlvdSBoYXZlIHJlY2VpdmVkIHRoZSBmdWxsIHNjb3JlIVxyXG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICA8VHlwb2dyYXBoeT5UcnkgYWdhaW4gZm9yIGZ1bGwgc2NvcmUhPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L0JveD5cclxuICAgICAgICA8Qm94XHJcbiAgICAgICAgICBzeD17e1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcclxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcclxuICAgICAgICAgICAgZ2FwOiAyLFxyXG4gICAgICAgICAgICBwOiAxLFxyXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxyXG4gICAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8Qm94IHN4PXt7IHdpZHRoOiBcIjUwJVwiLCBtYXJnaW46IFwiMCBhdXRvXCIgfX0+XHJcbiAgICAgICAgICAgIDxQaWVcclxuICAgICAgICAgICAgICBkYXRhPXtwaWVEYXRhfVxyXG4gICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwic3VibWl0c2NyZWVuLXBpZWNoYXJ0XCJcclxuICAgICAgICAgICAgICBpZD1cImNoYXJ0XCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgIDwvQm94PlxyXG4gICAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogXCJmbGV4XCIsIGp1c3RpZnlDb250ZW50OiBcImZsZXgtZW5kXCIgfX0+XHJcbiAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e2hhbmRsZU5hdmlnYXRlfT5UcnkgYWdhaW4/PC9CdXR0b24+XHJcbiAgICAgICAgPC9Cb3g+XHJcbiAgICAgIDwvQm94PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN1Ym1pdFNjcmVlbjtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFB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