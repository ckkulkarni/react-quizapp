a9468849ccf19608719ab38aea21d3c5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HandlerRegistryImpl = void 0;
var _asap = require("@react-dnd/asap");
var _invariant = require("@react-dnd/invariant");
var _registry = require("../actions/registry.js");
var _contracts = require("../contracts.js");
var _interfaces = require("../interfaces.js");
var _getNextUniqueId = require("../utils/getNextUniqueId.js");
function getNextHandlerId(role) {
  const id = (0, _getNextUniqueId.getNextUniqueId)().toString();
  switch (role) {
    case _interfaces.HandlerRole.SOURCE:
      return `S${id}`;
    case _interfaces.HandlerRole.TARGET:
      return `T${id}`;
    default:
      throw new Error(`Unknown Handler Role: ${role}`);
  }
}
function parseRoleFromHandlerId(handlerId) {
  switch (handlerId[0]) {
    case 'S':
      return _interfaces.HandlerRole.SOURCE;
    case 'T':
      return _interfaces.HandlerRole.TARGET;
    default:
      throw new Error(`Cannot parse handler ID: ${handlerId}`);
  }
}
function mapContainsValue(map, searchValue) {
  const entries = map.entries();
  let isDone = false;
  do {
    const {
      done,
      value: [, value]
    } = entries.next();
    if (value === searchValue) {
      return true;
    }
    isDone = !!done;
  } while (!isDone);
  return false;
}
class HandlerRegistryImpl {
  addSource(type, source) {
    (0, _contracts.validateType)(type);
    (0, _contracts.validateSourceContract)(source);
    const sourceId = this.addHandler(_interfaces.HandlerRole.SOURCE, type, source);
    this.store.dispatch((0, _registry.addSource)(sourceId));
    return sourceId;
  }
  addTarget(type, target) {
    (0, _contracts.validateType)(type, true);
    (0, _contracts.validateTargetContract)(target);
    const targetId = this.addHandler(_interfaces.HandlerRole.TARGET, type, target);
    this.store.dispatch((0, _registry.addTarget)(targetId));
    return targetId;
  }
  containsHandler(handler) {
    return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);
  }
  getSource(sourceId, includePinned = false) {
    (0, _invariant.invariant)(this.isSourceId(sourceId), 'Expected a valid source ID.');
    const isPinned = includePinned && sourceId === this.pinnedSourceId;
    const source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);
    return source;
  }
  getTarget(targetId) {
    (0, _invariant.invariant)(this.isTargetId(targetId), 'Expected a valid target ID.');
    return this.dropTargets.get(targetId);
  }
  getSourceType(sourceId) {
    (0, _invariant.invariant)(this.isSourceId(sourceId), 'Expected a valid source ID.');
    return this.types.get(sourceId);
  }
  getTargetType(targetId) {
    (0, _invariant.invariant)(this.isTargetId(targetId), 'Expected a valid target ID.');
    return this.types.get(targetId);
  }
  isSourceId(handlerId) {
    const role = parseRoleFromHandlerId(handlerId);
    return role === _interfaces.HandlerRole.SOURCE;
  }
  isTargetId(handlerId) {
    const role = parseRoleFromHandlerId(handlerId);
    return role === _interfaces.HandlerRole.TARGET;
  }
  removeSource(sourceId) {
    (0, _invariant.invariant)(this.getSource(sourceId), 'Expected an existing source.');
    this.store.dispatch((0, _registry.removeSource)(sourceId));
    (0, _asap.asap)(() => {
      this.dragSources.delete(sourceId);
      this.types.delete(sourceId);
    });
  }
  removeTarget(targetId) {
    (0, _invariant.invariant)(this.getTarget(targetId), 'Expected an existing target.');
    this.store.dispatch((0, _registry.removeTarget)(targetId));
    this.dropTargets.delete(targetId);
    this.types.delete(targetId);
  }
  pinSource(sourceId) {
    const source = this.getSource(sourceId);
    (0, _invariant.invariant)(source, 'Expected an existing source.');
    this.pinnedSourceId = sourceId;
    this.pinnedSource = source;
  }
  unpinSource() {
    (0, _invariant.invariant)(this.pinnedSource, 'No source is pinned at the time.');
    this.pinnedSourceId = null;
    this.pinnedSource = null;
  }
  addHandler(role, type, handler) {
    const id = getNextHandlerId(role);
    this.types.set(id, type);
    if (role === _interfaces.HandlerRole.SOURCE) {
      this.dragSources.set(id, handler);
    } else if (role === _interfaces.HandlerRole.TARGET) {
      this.dropTargets.set(id, handler);
    }
    return id;
  }
  constructor(store) {
    this.types = new Map();
    this.dragSources = new Map();
    this.dropTargets = new Map();
    this.pinnedSourceId = null;
    this.pinnedSource = null;
    this.store = store;
  }
}
exports.HandlerRegistryImpl = HandlerRegistryImpl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,