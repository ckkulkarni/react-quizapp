abec2a2fa880fbe9080f8f79b65e7ca0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFeed = void 0;
var stringify_js_1 = require("./stringify.js");
var legacy_js_1 = require("./legacy.js");
/**
 * Get the feed object from the root of a DOM tree.
 *
 * @category Feeds
 * @param doc - The DOM to to extract the feed from.
 * @returns The feed.
 */
function getFeed(doc) {
  var feedRoot = getOneElement(isValidFeed, doc);
  return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
}
exports.getFeed = getFeed;
/**
 * Parse an Atom feed.
 *
 * @param feedRoot The root of the feed.
 * @returns The parsed feed.
 */
function getAtomFeed(feedRoot) {
  var _a;
  var childs = feedRoot.children;
  var feed = {
    type: "atom",
    items: (0, legacy_js_1.getElementsByTagName)("entry", childs).map(function (item) {
      var _a;
      var children = item.children;
      var entry = {
        media: getMediaElements(children)
      };
      addConditionally(entry, "id", "id", children);
      addConditionally(entry, "title", "title", children);
      var href = (_a = getOneElement("link", children)) === null || _a === void 0 ? void 0 : _a.attribs["href"];
      if (href) {
        entry.link = href;
      }
      var description = fetch("summary", children) || fetch("content", children);
      if (description) {
        entry.description = description;
      }
      var pubDate = fetch("updated", children);
      if (pubDate) {
        entry.pubDate = new Date(pubDate);
      }
      return entry;
    })
  };
  addConditionally(feed, "id", "id", childs);
  addConditionally(feed, "title", "title", childs);
  var href = (_a = getOneElement("link", childs)) === null || _a === void 0 ? void 0 : _a.attribs["href"];
  if (href) {
    feed.link = href;
  }
  addConditionally(feed, "description", "subtitle", childs);
  var updated = fetch("updated", childs);
  if (updated) {
    feed.updated = new Date(updated);
  }
  addConditionally(feed, "author", "email", childs, true);
  return feed;
}
/**
 * Parse a RSS feed.
 *
 * @param feedRoot The root of the feed.
 * @returns The parsed feed.
 */
function getRssFeed(feedRoot) {
  var _a, _b;
  var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
  var feed = {
    type: feedRoot.name.substr(0, 3),
    id: "",
    items: (0, legacy_js_1.getElementsByTagName)("item", feedRoot.children).map(function (item) {
      var children = item.children;
      var entry = {
        media: getMediaElements(children)
      };
      addConditionally(entry, "id", "guid", children);
      addConditionally(entry, "title", "title", children);
      addConditionally(entry, "link", "link", children);
      addConditionally(entry, "description", "description", children);
      var pubDate = fetch("pubDate", children);
      if (pubDate) entry.pubDate = new Date(pubDate);
      return entry;
    })
  };
  addConditionally(feed, "title", "title", childs);
  addConditionally(feed, "link", "link", childs);
  addConditionally(feed, "description", "description", childs);
  var updated = fetch("lastBuildDate", childs);
  if (updated) {
    feed.updated = new Date(updated);
  }
  addConditionally(feed, "author", "managingEditor", childs, true);
  return feed;
}
var MEDIA_KEYS_STRING = ["url", "type", "lang"];
var MEDIA_KEYS_INT = ["fileSize", "bitrate", "framerate", "samplingrate", "channels", "duration", "height", "width"];
/**
 * Get all media elements of a feed item.
 *
 * @param where Nodes to search in.
 * @returns Media elements.
 */
function getMediaElements(where) {
  return (0, legacy_js_1.getElementsByTagName)("media:content", where).map(function (elem) {
    var attribs = elem.attribs;
    var media = {
      medium: attribs["medium"],
      isDefault: !!attribs["isDefault"]
    };
    for (var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++) {
      var attrib = MEDIA_KEYS_STRING_1[_i];
      if (attribs[attrib]) {
        media[attrib] = attribs[attrib];
      }
    }
    for (var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++) {
      var attrib = MEDIA_KEYS_INT_1[_a];
      if (attribs[attrib]) {
        media[attrib] = parseInt(attribs[attrib], 10);
      }
    }
    if (attribs["expression"]) {
      media.expression = attribs["expression"];
    }
    return media;
  });
}
/**
 * Get one element by tag name.
 *
 * @param tagName Tag name to look for
 * @param node Node to search in
 * @returns The element or null
 */
function getOneElement(tagName, node) {
  return (0, legacy_js_1.getElementsByTagName)(tagName, node, true, 1)[0];
}
/**
 * Get the text content of an element with a certain tag name.
 *
 * @param tagName Tag name to look for.
 * @param where Node to search in.
 * @param recurse Whether to recurse into child nodes.
 * @returns The text content of the element.
 */
function fetch(tagName, where, recurse) {
  if (recurse === void 0) {
    recurse = false;
  }
  return (0, stringify_js_1.textContent)((0, legacy_js_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();
}
/**
 * Adds a property to an object if it has a value.
 *
 * @param obj Object to be extended
 * @param prop Property name
 * @param tagName Tag name that contains the conditionally added property
 * @param where Element to search for the property
 * @param recurse Whether to recurse into child nodes.
 */
function addConditionally(obj, prop, tagName, where, recurse) {
  if (recurse === void 0) {
    recurse = false;
  }
  var val = fetch(tagName, where, recurse);
  if (val) obj[prop] = val;
}
/**
 * Checks if an element is a feed root node.
 *
 * @param value The name of the element to check.
 * @returns Whether an element is a feed root node.
 */
function isValidFeed(value) {
  return value === "rss" || value === "feed" || value === "rdf:RDF";
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHJpbmdpZnlfanNfMSIsInJlcXVpcmUiLCJsZWdhY3lfanNfMSIsImdldEZlZWQiLCJkb2MiLCJmZWVkUm9vdCIsImdldE9uZUVsZW1lbnQiLCJpc1ZhbGlkRmVlZCIsIm5hbWUiLCJnZXRBdG9tRmVlZCIsImdldFJzc0ZlZWQiLCJleHBvcnRzIiwiY2hpbGRzIiwiY2hpbGRyZW4iLCJmZWVkIiwidHlwZSIsIml0ZW1zIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJtYXAiLCJpdGVtIiwiZW50cnkiLCJtZWRpYSIsImdldE1lZGlhRWxlbWVudHMiLCJhZGRDb25kaXRpb25hbGx5IiwiaHJlZiIsIl9hIiwiYXR0cmlicyIsImxpbmsiLCJkZXNjcmlwdGlvbiIsImZldGNoIiwicHViRGF0ZSIsIkRhdGUiLCJ1cGRhdGVkIiwiX2IiLCJzdWJzdHIiLCJpZCIsIk1FRElBX0tFWVNfU1RSSU5HIiwiTUVESUFfS0VZU19JTlQiLCJ3aGVyZSIsImVsZW0iLCJtZWRpdW0iLCJpc0RlZmF1bHQiLCJfaSIsIk1FRElBX0tFWVNfU1RSSU5HXzEiLCJsZW5ndGgiLCJhdHRyaWIiLCJNRURJQV9LRVlTX0lOVF8xIiwicGFyc2VJbnQiLCJleHByZXNzaW9uIiwidGFnTmFtZSIsIm5vZGUiLCJyZWN1cnNlIiwidGV4dENvbnRlbnQiLCJ0cmltIiwib2JqIiwicHJvcCIsInZhbCIsInZhbHVlIl0sInNvdXJjZXMiOlsiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2ZiNTUvZG9tdXRpbHMvZjdlMzU3YjVjMjEwYjY3MzFjMmE2MGUwYjdiM2NmYWExZjk2YjcwNi9zcmMvZmVlZHMudHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQUFBLGNBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQXlFQTs7Ozs7OztBQU9BLFNBQWdCRSxPQUFPQSxDQUFDQyxHQUFjO0VBQ2xDLElBQU1DLFFBQVEs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