b63d391e4c7422fd4c12e4800360709d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mockPrototype;
function mockPrototype(win) {
  var _win$HTMLCanvasElemen;
  /**
   * This weakmap is designed to contain all of the generated canvas contexts. It's keys are the
   * jsdom canvases obtained by using the `this` keyword inside the `#getContext('2d')` function
   * call. It's values are the generated `CanvasRenderingContext2D` objects.
   */
  const generatedContexts = new WeakMap();
  /**
   * Overrides getContext. Every test run will create a new function that overrides the current
   * value of getContext. It attempts to preserve the original getContext function by storing it on
   * the callback as a property.
   */
  const getContext2D = jest.fn(function getContext2d(type) {
    if (type === '2d') {
      /**
       * Contexts must be idempotent. Once they are generated, they should be returned when
       * getContext() is called on the same canvas object multiple times.
       */
      if (generatedContexts.has(this)) return generatedContexts.get(this);
      const ctx = new CanvasRenderingContext2D(this);
      generatedContexts.set(this, ctx);
      return ctx;
    }
    try {
      if (!this.dataset.internalRequireTest) require('canvas');
    } catch (_unused) {
      return null;
    }
    return getContext2D.internal.call(this, type);
  });
  let htmlCanvasElementPrototype = HTMLCanvasElement.prototype;
  if (win !== null && win !== void 0 && (_win$HTMLCanvasElemen = win.HTMLCanvasElement) !== null && _win$HTMLCanvasElemen !== void 0 && _win$HTMLCanvasElemen.prototype) {
    var _win$HTMLCanvasElemen2;
    htmlCanvasElementPrototype = win === null || win === void 0 ? void 0 : (_win$HTMLCanvasElemen2 = win.HTMLCanvasElement) === null || _win$HTMLCanvasElemen2 === void 0 ? void 0 : _win$HTMLCanvasElemen2.prototype;
  }
  if (!jest.isMockFunction(htmlCanvasElementPrototype.getContext)) {
    getContext2D.internal = htmlCanvasElementPrototype.getContext;
  } else {
    getContext2D.internal = htmlCanvasElementPrototype.getContext.internal;
  }
  htmlCanvasElementPrototype.getContext = getContext2D;

  /**
   * This function technically throws SecurityError at runtime, but it cannot be mocked, because
   * we don't know if the canvas is tainted. These kinds of errors will be silent.
   */
  const toBlobOverride = jest.fn(function toBlobOverride(callback, mimetype) {
    if (arguments.length < 1) throw new TypeError("Failed to execute 'toBlob' on 'HTMLCanvasElement': 1 argument required, but only 0 present.");
    if (typeof callback !== 'function') throw new TypeError("Failed to execute 'toBlob' on 'HTMLCanvasElement': The callback provided as parameter 1 is not a function.");

    /**
     * Mime type must be image/jpeg or image/webp exactly for the browser to accept it, otherwise
     * it's image/png.
     */
    switch (mimetype) {
      case 'image/webp':
        break;
      case 'image/jpeg':
        break;
      default:
        mimetype = 'image/png';
    }

    /**
     * This section creates a blob of size width * height * 4. This is not actually valid, because
     * jpeg size is variable, and so is png. TODO: Is there a better way to do this?
     */
    const length = this.width * this.height * 4;
    const data = new Uint8Array(length);
    const blob = new window.Blob([data], {
      type: mimetype
    });
    setTimeout(() => callback(blob), 0);
  });
  if (!jest.isMockFunction(htmlCanvasElementPrototype.toBlob)) {
    toBlobOverride.internal = htmlCanvasElementPrototype.toBlob;
  } else {
    toBlobOverride.internal = htmlCanvasElementPrototype.toBlob.internal;
  }
  htmlCanvasElementPrototype.toBlob = toBlobOverride;

  /**
   * This section creates a dataurl with a validated mime type. This is not actually valid, because
   * jpeg size is variable, and so is png. TODO: Is there a better way to do this?
   */
  const toDataURLOverride = jest.fn(function toDataURLOverride(type, encoderOptions) {
    switch (type) {
      case 'image/jpeg':
        break;
      case 'image/webp':
        break;
      default:
        type = 'image/png';
    }

    /**
     * This is the smallest valid data url I could generate.
     */
    return 'data:' + type + ';base64,00';
  });
  if (!jest.isMockFunction(htmlCanvasElementPrototype.toDataURL)) {
    toDataURLOverride.internal = htmlCanvasElementPrototype.toDataURL;
  } else {
    toDataURLOverride.internal = htmlCanvasElementPrototype.toDataURL.internal;
  }
  htmlCanvasElementPrototype.toDataURL = toDataURLOverride;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJtb2NrUHJvdG90eXBlIiwid2luIiwiX3dpbiRIVE1MQ2FudmFzRWxlbWVuIiwiZ2VuZXJhdGVkQ29udGV4dHMiLCJXZWFrTWFwIiwiZ2V0Q29udGV4dDJEIiwiamVzdCIsImZuIiwiZ2V0Q29udGV4dDJkIiwidHlwZSIsImhhcyIsImdldCIsImN0eCIsIkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCIsInNldCIsImRhdGFzZXQiLCJpbnRlcm5hbFJlcXVpcmVUZXN0IiwicmVxdWlyZSIsIl91bnVzZWQiLCJpbnRlcm5hbCIsImNhbGwiLCJodG1sQ2FudmFzRWxlbWVudFByb3RvdHlwZSIsIkhUTUxDYW52YXNFbGVtZW50IiwicHJvdG90eXBlIiwiX3dpbiRIVE1MQ2FudmFzRWxlbWVuMiIsImlzTW9ja0Z1bmN0aW9uIiwiZ2V0Q29udGV4dCIsInRvQmxvYk92ZXJyaWRlIiwiY2FsbGJhY2siLCJtaW1ldHlwZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIlR5cGVFcnJvciIsIndpZHRoIiwiaGVpZ2h0IiwiZGF0YSIsIlVpbnQ4QXJyYXkiLCJibG9iIiwid2luZG93IiwiQmxvYiIsInNldFRpbWVvdXQiLCJ0b0Jsb2IiLCJ0b0RhdGFVUkxPdmVycmlkZSIsImVuY29kZXJPcHRpb25zIiwidG9EYXRhVVJMIl0sInNvdXJjZXMiOlsicHJvdG90eXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gbW9ja1Byb3RvdHlwZTtcbmZ1bmN0aW9uIG1vY2tQcm90b3R5cGUod2luKSB7XG4gIHZhciBfd2luJEhUTUxDYW52YXNFbGVtZW47XG4gIC8qKlxuICAgKiBUaGlzIHdlYWttYXAgaXMgZGVzaWduZWQgdG8gY29udGFpbiBhbGwgb2YgdGhlIGdlbmVyYXRlZCBjYW52YXMgY29udGV4dHMuIEl0J3Mga2V5cyBhcmUgdGhlXG4gICAqIGpzZG9tIGNhbnZhc2VzIG9idGFpbmVkIGJ5IHVzaW5nIHRoZSBgdGhpc2Aga2V5d29yZCBpbnNpZGUgdGhlIGAjZ2V0Q29udGV4dCgnMmQnKWAgZnVuY3Rpb25cbiAgICogY2FsbC4gSXQncyB2YWx1ZXMgYXJlIHRoZSBnZW5lcmF0ZWQgYENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRGAgb2JqZWN0cy5cbiAgICovXG4gIGNvbnN0IGdlbmVyYXRlZENvbnRleHRzID0gbmV3IFdlYWtNYXAoKTtcbiAgLyoqXG4gICAqIE92ZXJyaWRlcyBnZXRDb250ZXh0LiBFdmVyeSB0ZXN0IHJ1biB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiB0aGF0IG92ZXJyaWRlcyB0aGUgY3VycmVudFxuICAgKiB2YWx1ZSBvZiBnZXRDb250ZXh0LiBJdCBhdHRlbXB0cyB0byBwcmVzZXJ2ZSB0aGUgb3JpZ2luYWwgZ2V0Q29udGV4dCBmdW5jdGlvbiBieSBzdG9yaW5nIGl0IG9uXG4gICAqIHRoZSBjYWxsYmFjayBhcyBhIHByb3BlcnR5LlxuICAgKi9cbiAgY29uc3QgZ2V0Q29udGV4dDJEID0gamVzdC5mbihmdW5jdGlvbiBnZXRDb250ZXh0MmQodHlwZSkge1xuICAgIGlmICh0eXBlID09PSAnMmQnKSB7XG4gICAgICAvKipcbiAgICAgICAqIENvbnRleHRzIG11c3QgYmUgaWRlbXBvdGVudC4gT25jZSB0aGV5IGFyZSBnZW5lcmF0ZWQsIHRoZXkgc2hvdWxkIGJlIHJldHVybmVkIHdoZW5cbiAgICAgICAqIGdldENvbnRleHQoKSBpcyBjYWxsZWQgb24gdGhlIHNhbWUgY2FudmFzIG9iamVjdCBtdWx0aXBsZSB0aW1lcy5cbiAgICAgICAqL1xuICAgICAgaWYgKGdlbmVyYXRlZENvbnRleHRzLmhhcyh0aGlzKSkgcmV0dXJuIGdlbmVyYXRlZENvbnRleHRzLmdldCh0aGlzKTtcbiAgICAgIGNvbnN0IGN0eCA9IG5ldyBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQodGhpcyk7XG4gICAgICBnZW5lcmF0ZWRDb250ZXh0cy5zZXQodGhpcywgY3R4KTtcbiAgICAgIHJldHVybiBjdHg7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBpZiAoIXRoaXMuZGF0YXNldC5pbnRlcm5hbFJlcXVpcmVUZXN0KSByZXF1aXJlKCdjYW52YXMnKTtcbiAgICB9IGNhdGNoIChfdW51c2VkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGdldENvbnRleHQyRC5pbnRlcm5hbC5jYWxsKHRoaXMsIHR5cGUpO1xuICB9KTtcbiAgbGV0IGh0bWxDYW52YXNFbGVtZW50UHJvdG90eXBlID0gSFRNTENhbnZhc0VsZW1lbnQucHJvdG90eXBlO1xuICBpZiAod2luICE9PSBudWxsICYmIHdpbiAhPT0gdm9pZCAwICYmIChfd2luJEhUTUxDYW52YXNFbGVtZW4gPSB3aW4uSFRNTENhbnZhc0VsZW1lbnQpICE9PSBudWxsICYmIF93aW4kSFRNTENhbnZhc0VsZW1lbiAhPT0gdm9pZCAwICYmIF93aW4kSFRNTENhbnZhc0VsZW1lbi5wcm90b3R5cGUpIHtcbiAgICB2YXIgX3dpbiRIVE1MQ2FudmFzRWxlbWVuMjtcbiAgICBodG1sQ2FudmFzRWxlbWVudFByb3RvdHlwZSA9IHdpbiA9PT0gbnVsbCB8fCB3aW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfd2luJEhUTUxDYW52YXNFbGVtZW4yID0gd2luLkhUTUxDYW52YXNFbGVtZW50KSA9PT0gbnVsbCB8fCBfd2luJEhUTUxDYW52YXNFbGVtZW4yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfd2luJEhUTUxDYW52YXNFbGVtZW4yLnByb3RvdHlwZTtcbiAgfVxuICBpZiAoIWplc3QuaXNNb2NrRnVuY3Rpb24oaHRtbENhbnZhc0VsZW1lbnRQcm90b3R5cGUuZ2V0Q29udGV4dCkpIHtcbiAgICBnZXRDb250ZXh0MkQuaW50ZXJuYWwgPSBodG1sQ2FudmFzRWxlbWVudFByb3RvdHlwZS5nZXRDb250ZXh0O1xuICB9IGVsc2Uge1xuICAgIGdldENvbnRleHQyRC5pbnRlcm5hbCA9IGh0bWxDYW52YXNFbGVtZW50UHJvdG90eXBlLmdldENvbnRleHQuaW50ZXJuYWw7XG4gIH1cbiAgaHRtbENhbnZhc0VsZW1lbnRQcm90b3R5cGUuZ2V0Q29udGV4dCA9IGdldENvbnRleHQyRDtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB0ZWNobmljYWxseSB0aHJvd3MgU2VjdXJpdHlFcnJvciBhdCBydW50aW1lLCBidXQgaXQgY2Fubm90IGJlIG1vY2tlZCwgYmVjYXVzZVxuICAgKiB3ZSBkb24ndCBrbm93IGlmIHRoZSBjYW52YXMgaXMgdGFpbnRlZC4gVGhlc2Uga2luZHMgb2YgZXJyb3JzIHdpbGwgYmUgc2lsZW50LlxuICAgKi9cbiAgY29uc3QgdG9CbG9iT3ZlcnJpZGUgPSBqZXN0LmZuKGZ1bmN0aW9uIHRvQmxvYk92ZXJyaWRlKGNhbGxiYWNrLCBtaW1ldHlwZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd0b0Jsb2InIG9uICdIVE1MQ2FudmFzRWxlbWVudCc6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICd0b0Jsb2InIG9uICdIVE1MQ2FudmFzRWxlbWVudCc6IFRoZSBjYWxsYmFjayBwcm92aWRlZCBhcyBwYXJhbWV0ZXIgMSBpcyBub3QgYSBmdW5jdGlvbi5cIik7XG5cbiAgICAvKipcbiAgICAgKiBNaW1lIHR5cGUgbXVzdCBiZSBpbWFnZS9qcGVnIG9yIGltYWdlL3dlYnAgZXhhY3RseSBmb3IgdGhlIGJyb3dzZXIgdG8gYWNjZXB0IGl0LCBvdGhlcndpc2VcbiAgICAgKiBpdCdzIGltYWdlL3BuZy5cbiAgICAgKi9cbiAgICBzd2l0Y2ggKG1pbWV0eXBlKSB7XG4gICAgICBjYXNlICdpbWFnZS93ZWJwJzpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdpbWFnZS9qcGVnJzpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBtaW1ldHlwZSA9ICdpbWFnZS9wbmcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgc2VjdGlvbiBjcmVhdGVzIGEgYmxvYiBvZiBzaXplIHdpZHRoICogaGVpZ2h0ICogNC4gVGhpcyBpcyBub3QgYWN0dWFsbHkgdmFsaWQsIGJlY2F1c2VcbiAgICAgKiBqcGVnIHNpemUgaXMgdmFyaWFibGUsIGFuZCBzbyBpcyBwbmcuIFRPRE86IElzIHRoZXJlIGEgYmV0dGVyIHdheSB0byBkbyB0aGlzP1xuICAgICAqL1xuICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMud2lkdGggKiB0aGlzLmhlaWdodCAqIDQ7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgY29uc3QgYmxvYiA9IG5ldyB3aW5kb3cuQmxvYihbZGF0YV0sIHtcbiAgICAgIHR5cGU6IG1pbWV0eXBlXG4gICAgfSk7XG4gICAgc2V0VGltZW91dCgoKSA9PiBjYWxsYmFjayhibG9iKSwgMCk7XG4gIH0pO1xuICBpZiAoIWplc3QuaXNNb2NrRnVuY3Rpb24oaHRtbENhbnZhc0VsZW1lbnRQcm90b3R5cGUudG9CbG9iKSkge1xuICAgIHRvQmxvYk92ZXJyaWRlLmludGVybmFsID0gaHRtbENhbnZhc0VsZW1lbnRQcm90b3R5cGUudG9CbG9iO1xuICB9IGVsc2Uge1xuICAgIHRvQmxvYk92ZXJyaWRlLmludGVybmFsID0gaHRtbENhbnZhc0VsZW1lbnRQcm90b3R5cGUudG9CbG9iLmludGVybmFsO1xuICB9XG4gIGh0bWxDYW52YXNFbGVtZW50UHJvdG90eXBlLnRvQmxvYiA9IHRvQmxvYk92ZXJyaWRlO1xuXG4gIC8qKlxuICAgKiBUaGlzIHNlY3Rpb24gY3JlYXRlcyBhIGRhdGF1cmwgd2l0aCBhIHZhbGlkYXRlZCBtaW1lIHR5cGUuIFRoaXMgaXMgbm90IGFjdHVhbGx5IHZhbGlkLCBiZWNhdXNlXG4gICAqIGpwZWcgc2l6ZSBpcyB2YXJpYWJsZSwgYW5kIHNvIGlzIHBuZy4gVE9ETzogSXMgdGhlcmUgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXM/XG4gICAqL1xuICBjb25zdCB0b0RhdGFVUkxPdmVycmlkZSA9IGplc3QuZm4oZnVuY3Rpb24gdG9EYXRhVVJMT3ZlcnJpZGUodHlwZSwgZW5jb2Rlck9wdGlvbnMpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ2ltYWdlL2pwZWcnOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2ltYWdlL3dlYnAnOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHR5cGUgPSAnaW1hZ2UvcG5nJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIHRoZSBzbWFsbGVzdCB2YWxpZCBkYXRhIHVybCBJIGNvdWxkIGdlbmVyYXRlLlxuICAgICAqL1xuICAgIHJldHVybiAnZGF0YTonICsgdHlwZSArICc7YmFzZTY0LDAwJztcbiAgfSk7XG4gIGlmICghamVzdC5pc01vY2tGdW5jdGlvbihodG1sQ2FudmFzRWxlbWVudFByb3RvdHlwZS50b0RhdGFVUkwpKSB7XG4gICAgdG9EYXRhVVJMT3ZlcnJpZGUuaW50ZXJuYWwgPSBodG1sQ2FudmFzRWxlbWVudFByb3RvdHlwZS50b0RhdGFVUkw7XG4gIH0gZWxzZSB7XG4gICAgdG9EYXRhVVJMT3ZlcnJpZGUuaW50ZXJuYWwgPSBodG1sQ2FudmFzRWxlbWVudFByb3RvdHlwZS50b0RhdGFVUkwuaW50ZXJuYWw7XG4gIH1cbiAgaHRtbENhbnZhc0VsZW1lbnRQcm90b3R5cGUudG9EYXRhVVJMID0gdG9EYXRhVVJMT3ZlcnJpZGU7XG59Il0sIm1hcHBpbmdzIjoiQUFB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