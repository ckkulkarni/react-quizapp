2b9e825d474c458875a9318b5e8fa0a2
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = keysOfValidator;
var _isPrimitive = _interopRequireDefault(require("./helpers/isPrimitive"));
var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function keysOfValidator(propType) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'keysOf';
  if (typeof propType !== 'function') {
    throw new TypeError('argument to keysOf must be a valid PropType function');
  }
  var validator = function keysOf(props, propName, componentName, location, propFullName) {
    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }
    var propValue = props[propName];
    if (propValue == null || (0, _isPrimitive["default"])(propValue)) {
      return null;
    }
    var firstError = null;
    Object.keys(propValue).some(function (key) {
      firstError = propType.apply(void 0, [_defineProperty({}, key, key), key, componentName, location, "(".concat(propFullName, ").").concat(key)].concat(rest));
      return firstError != null;
    });
    return firstError || null;
  };
  validator.isRequired = function keyedByRequired(props, propName, componentName) {
    var propValue = props[propName];
    if (propValue == null) {
      return new TypeError("".concat(componentName, ": ").concat(propName, " is required, but value is ").concat(propValue));
    }
    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }
    return validator.apply(void 0, [props, propName, componentName].concat(rest));
  };
  return (0, _wrapValidator["default"])(validator, name, propType);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaXNQcmltaXRpdmUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl93cmFwVmFsaWRhdG9yIiwia2V5c09mVmFsaWRhdG9yIiwicHJvcFR5cGUiLCJuYW1lIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiVHlwZUVycm9yIiwidmFsaWRhdG9yIiwia2V5c09mIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsIl9sZW4iLCJyZXN0IiwiQXJyYXkiLCJfa2V5IiwicHJvcFZhbHVlIiwiZmlyc3RFcnJvciIsIk9iamVjdCIsImtleXMiLCJzb21lIiwia2V5IiwiYXBwbHkiLCJfZGVmaW5lUHJvcGVydHkiLCJjb25jYXQiLCJpc1JlcXVpcmVkIiwia2V5ZWRCeVJlcXVpcmVkIiwiX2xlbjIiLCJfa2V5MiJdLCJzb3VyY2VzIjpbIi4uL3NyYy9rZXlzT2YuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzUHJpbWl0aXZlIGZyb20gJy4vaGVscGVycy9pc1ByaW1pdGl2ZSc7XG5pbXBvcnQgd3JhcFZhbGlkYXRvciBmcm9tICcuL2hlbHBlcnMvd3JhcFZhbGlkYXRvcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGtleXNPZlZhbGlkYXRvcihwcm9wVHlwZSwgbmFtZSA9ICdrZXlzT2YnKSB7XG4gIGlmICh0eXBlb2YgcHJvcFR5cGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCB0byBrZXlzT2YgbXVzdCBiZSBhIHZhbGlkIFByb3BUeXBlIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBjb25zdCB2YWxpZGF0b3IgPSBmdW5jdGlvbiBrZXlzT2YoXG4gICAgcHJvcHMsXG4gICAgcHJvcE5hbWUsXG4gICAgY29tcG9uZW50TmFtZSxcbiAgICBsb2NhdGlvbixcbiAgICBwcm9wRnVsbE5hbWUsXG4gICAgLi4ucmVzdFxuICApIHtcbiAgICBjb25zdCB7IFtwcm9wTmFtZV06IHByb3BWYWx1ZSB9ID0gcHJvcHM7XG5cbiAgICBpZiAocHJvcFZhbHVlID09IG51bGwgfHwgaXNQcmltaXRpdmUocHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGZpcnN0RXJyb3IgPSBudWxsO1xuICAgIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkuc29tZSgoa2V5KSA9PiB7XG4gICAgICBmaXJzdEVycm9yID0gcHJvcFR5cGUoXG4gICAgICAgIHsgW2tleV06IGtleSB9LFxuICAgICAgICBrZXksXG4gICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBgKCR7cHJvcEZ1bGxOYW1lfSkuJHtrZXl9YCxcbiAgICAgICAgLi4ucmVzdCxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZmlyc3RFcnJvciAhPSBudWxsO1xuICAgIH0pO1xuICAgIHJldHVybiBmaXJzdEVycm9yIHx8IG51bGw7XG4gIH07XG5cbiAgdmFsaWRhdG9yLmlzUmVxdWlyZWQgPSBmdW5jdGlvbiBrZXllZEJ5UmVxdWlyZWQocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gICAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuXG4gICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgJHtjb21wb25lbnROYW1lfTogJHtwcm9wTmFtZX0gaXMgcmVxdWlyZWQsIGJ1dCB2YWx1ZSBpcyAke3Byb3BWYWx1ZX1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBWYWxpZGF0b3IodmFsaWRhdG9yLCBuYW1lLCBwcm9wVHlwZSk7XG59XG4iXSwibWFwcGluZ3Mi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