e2ed1dc22ac633e9934999bbf34dcb6e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _material = require("@mui/material");
var _formik = require("formik");
var _react = require("react");
var _App = require("../../App");
var Yup = _interopRequireWildcard(require("yup"));
var _reactRouter = require("react-router");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Home = () => {
  const navigation = (0, _reactRouter.useNavigate)();
  const {
    setName,
    setMail,
    setAge,
    setTracker,
    setPhone,
    setSelector
  } = (0, _react.useContext)(_App.QuizContext);
  const formik = (0, _formik.useFormik)({
    initialValues: {
      email: "",
      name: "",
      phone: "",
      selectedLanguage: "",
      age: 0,
      trackScore: false
    },
    validationSchema: Yup.object({
      email: Yup.string().email("Invalid email address").required("Required"),
      name: Yup.string().required("Required"),
      phone: Yup.string().matches(/^\d{10}$/, "Invalid phone number").required("Required"),
      selectedLanguage: Yup.string().required("Required"),
      age: Yup.number().positive("Invalid age").required("Required")
    }),
    onSubmit: values => {
      setName(values.name);
      setMail(values.email);
      setPhone(values.phone);
      setAge(values.age);
      setTracker(values.trackScore);
      setSelector(values.selectedLanguage);
      alert("Details Submitted. Starting Quiz...");
      navigation("/question1");
    }
  });
  return /*#__PURE__*/React.createElement("div", {
    className: "homeContainer"
  }, /*#__PURE__*/React.createElement("form", {
    onSubmit: formik.handleSubmit,
    className: "baseForm"
  }, /*#__PURE__*/React.createElement(_material.TextField, {
    id: "name",
    label: "Enter your name: ",
    name: "name",
    type: "text",
    variant: "outlined",
    onChange: formik.handleChange,
    value: formik.values.name,
    error: formik.touched.name && Boolean(formik.errors.name),
    helperText: formik.touched.name && formik.errors.name
  }), /*#__PURE__*/React.createElement(_material.TextField, {
    id: "mail",
    label: "Enter MailID: ",
    name: "email",
    type: "email",
    variant: "outlined",
    onChange: formik.handleChange,
    value: formik.values.email,
    error: formik.touched.email && Boolean(formik.errors.email),
    helperText: formik.touched.email && formik.errors.email
  }), /*#__PURE__*/React.createElement(_material.TextField, {
    id: "age",
    label: "Enter your age: ",
    name: "age",
    type: "number",
    variant: "outlined",
    onChange: formik.handleChange,
    value: formik.values.age,
    error: formik.touched.age && Boolean(formik.errors.age),
    helperText: formik.touched.age && formik.errors.age
  }), /*#__PURE__*/React.createElement(_material.TextField, {
    id: "phone",
    label: "Enter your Phone Number: ",
    name: "phone",
    type: "text",
    variant: "outlined",
    onChange: formik.handleChange,
    value: formik.values.phone,
    error: formik.touched.phone && Boolean(formik.errors.phone),
    helperText: formik.touched.phone && formik.errors.phone
  }), /*#__PURE__*/React.createElement("em", null, "What language would you like the quiz to be in?"), /*#__PURE__*/React.createElement(_material.RadioGroup, {
    "aria-labelledby": "demo-radio-buttons-group-label",
    defaultValue: "React JS",
    name: "selectedLanguage",
    onChange: formik.handleChange,
    value: formik.values.selectedLanguage
  }, /*#__PURE__*/React.createElement(_material.FormControlLabel, {
    value: "ReactJS",
    control: /*#__PURE__*/React.createElement(_material.Radio, null),
    label: "ReactJS"
  }), /*#__PURE__*/React.createElement(_material.FormControlLabel, {
    value: "React Native",
    control: /*#__PURE__*/React.createElement(_material.Radio, null),
    label: "React Native"
  }), /*#__PURE__*/React.createElement(_material.FormControlLabel, {
    value: "Java",
    control: /*#__PURE__*/React.createElement(_material.Radio, null),
    label: "Java"
  })), /*#__PURE__*/React.createElement("em", {
    className: "trackScore"
  }, "Would you like your score to be tracked?"), /*#__PURE__*/React.createElement(_material.RadioGroup, {
    "aria-labelledby": "demo-radio-buttons-group-label",
    defaultValue: "false",
    name: "trackScore",
    onChange: formik.handleChange,
    value: formik.values.trackScore
  }, /*#__PURE__*/React.createElement(_material.FormControlLabel, {
    value: "True",
    control: /*#__PURE__*/React.createElement(_material.Radio, null),
    label: "Yes"
  }), /*#__PURE__*/React.createElement(_material.FormControlLabel, {
    value: "false",
    control: /*#__PURE__*/React.createElement(_material.Radio, null),
    label: "No"
  })), /*#__PURE__*/React.createElement(_material.Button, {
    type: "submit",
    variant: "contained",
    disabled: !formik.isValid || !formik.dirty
  }, "Submit")));
};
var _default = Home;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbWF0ZXJpYWwiLCJyZXF1aXJlIiwiX2Zvcm1payIsIl9yZWFjdCIsIl9BcHAiLCJZdXAiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWFjdFJvdXRlciIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJIb21lIiwibmF2aWdhdGlvbiIsInVzZU5hdmlnYXRlIiwic2V0TmFtZSIsInNldE1haWwiLCJzZXRBZ2UiLCJzZXRUcmFja2VyIiwic2V0UGhvbmUiLCJzZXRTZWxlY3RvciIsInVzZUNvbnRleHQiLCJRdWl6Q29udGV4dCIsImZvcm1payIsInVzZUZvcm1payIsImluaXRpYWxWYWx1ZXMiLCJlbWFpbCIsIm5hbWUiLCJwaG9uZSIsInNlbGVjdGVkTGFuZ3VhZ2UiLCJhZ2UiLCJ0cmFja1Njb3JlIiwidmFsaWRhdGlvblNjaGVtYSIsIm9iamVjdCIsInN0cmluZyIsInJlcXVpcmVkIiwibWF0Y2hlcyIsIm51bWJlciIsInBvc2l0aXZlIiwib25TdWJtaXQiLCJ2YWx1ZXMiLCJhbGVydCIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImhhbmRsZVN1Ym1pdCIsIlRleHRGaWVsZCIsImlkIiwibGFiZWwiLCJ0eXBlIiwidmFyaWFudCIsIm9uQ2hhbmdlIiwiaGFuZGxlQ2hhbmdlIiwidmFsdWUiLCJlcnJvciIsInRvdWNoZWQiLCJCb29sZWFuIiwiZXJyb3JzIiwiaGVscGVyVGV4dCIsIlJhZGlvR3JvdXAiLCJkZWZhdWx0VmFsdWUiLCJGb3JtQ29udHJvbExhYmVsIiwiY29udHJvbCIsIlJhZGlvIiwiQnV0dG9uIiwiZGlzYWJsZWQiLCJpc1ZhbGlkIiwiZGlydHkiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJIb21lLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEJ1dHRvbixcclxuICBGb3JtQ29udHJvbExhYmVsLFxyXG4gIFJhZGlvLFxyXG4gIFJhZGlvR3JvdXAsXHJcbiAgVGV4dEZpZWxkLFxyXG59IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcbmltcG9ydCB7IHVzZUZvcm1payB9IGZyb20gXCJmb3JtaWtcIjtcclxuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBRdWl6Q29udGV4dCB9IGZyb20gXCIuLi8uLi9BcHBcIjtcclxuXHJcbmltcG9ydCAqIGFzIFl1cCBmcm9tIFwieXVwXCI7XHJcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5cclxuY29uc3QgSG9tZSA9ICgpID0+IHtcclxuICBjb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGUoKTtcclxuICBjb25zdCB7IHNldE5hbWUsIHNldE1haWwsIHNldEFnZSwgc2V0VHJhY2tlciwgc2V0UGhvbmUsIHNldFNlbGVjdG9yIH0gPVxyXG4gICAgdXNlQ29udGV4dChRdWl6Q29udGV4dCk7XHJcbiAgY29uc3QgZm9ybWlrID0gdXNlRm9ybWlrKHtcclxuICAgIGluaXRpYWxWYWx1ZXM6IHtcclxuICAgICAgZW1haWw6IFwiXCIsXHJcbiAgICAgIG5hbWU6IFwiXCIsXHJcbiAgICAgIHBob25lOiBcIlwiLFxyXG4gICAgICBzZWxlY3RlZExhbmd1YWdlOiBcIlwiLFxyXG4gICAgICBhZ2U6IDAsXHJcbiAgICAgIHRyYWNrU2NvcmU6IGZhbHNlLFxyXG4gICAgfSxcclxuICAgIHZhbGlkYXRpb25TY2hlbWE6IFl1cC5vYmplY3Qoe1xyXG4gICAgICBlbWFpbDogWXVwLnN0cmluZygpLmVtYWlsKFwiSW52YWxpZCBlbWFpbCBhZGRyZXNzXCIpLnJlcXVpcmVkKFwiUmVxdWlyZWRcIiksXHJcbiAgICAgIG5hbWU6IFl1cC5zdHJpbmcoKS5yZXF1aXJlZChcIlJlcXVpcmVkXCIpLFxyXG4gICAgICBwaG9uZTogWXVwLnN0cmluZygpXHJcbiAgICAgICAgLm1hdGNoZXMoL15cXGR7MTB9JC8sIFwiSW52YWxpZCBwaG9uZSBudW1iZXJcIilcclxuICAgICAgICAucmVxdWlyZWQoXCJSZXF1aXJlZFwiKSxcclxuICAgICAgc2VsZWN0ZWRMYW5ndWFnZTogWXVwLnN0cmluZygpLnJlcXVpcmVkKFwiUmVxdWlyZWRcIiksXHJcbiAgICAgIGFnZTogWXVwLm51bWJlcigpLnBvc2l0aXZlKFwiSW52YWxpZCBhZ2VcIikucmVxdWlyZWQoXCJSZXF1aXJlZFwiKSxcclxuICAgIH0pLFxyXG4gICAgb25TdWJtaXQ6ICh2YWx1ZXMpID0+IHtcclxuICAgICAgc2V0TmFtZSh2YWx1ZXMubmFtZSk7XHJcbiAgICAgIHNldE1haWwodmFsdWVzLmVtYWlsKTtcclxuICAgICAgc2V0UGhvbmUodmFsdWVzLnBob25lKTtcclxuICAgICAgc2V0QWdlKHZhbHVlcy5hZ2UpO1xyXG4gICAgICBzZXRUcmFja2VyKHZhbHVlcy50cmFja1Njb3JlKTtcclxuICAgICAgc2V0U2VsZWN0b3IodmFsdWVzLnNlbGVjdGVkTGFuZ3VhZ2UpO1xyXG4gICAgICBhbGVydChcIkRldGFpbHMgU3VibWl0dGVkLiBTdGFydGluZyBRdWl6Li4uXCIpO1xyXG4gICAgICBuYXZpZ2F0aW9uKFwiL3F1ZXN0aW9uMVwiKTtcclxuICAgIH0sXHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImhvbWVDb250YWluZXJcIj5cclxuICAgICAgPGZvcm0gb25TdWJtaXQ9e2Zvcm1pay5oYW5kbGVTdWJtaXR9IGNsYXNzTmFtZT1cImJhc2VGb3JtXCI+XHJcbiAgICAgICAgPFRleHRGaWVsZFxyXG4gICAgICAgICAgaWQ9XCJuYW1lXCJcclxuICAgICAgICAgIGxhYmVsPVwiRW50ZXIgeW91ciBuYW1lOiBcIlxyXG4gICAgICAgICAgbmFtZT1cIm5hbWVcIlxyXG4gICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcclxuICAgICAgICAgIG9uQ2hhbmdlPXtmb3JtaWsuaGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgdmFsdWU9e2Zvcm1pay52YWx1ZXMubmFtZX1cclxuICAgICAgICAgIGVycm9yPXtmb3JtaWsudG91Y2hlZC5uYW1lICYmIEJvb2xlYW4oZm9ybWlrLmVycm9ycy5uYW1lKX1cclxuICAgICAgICAgIGhlbHBlclRleHQ9e2Zvcm1pay50b3VjaGVkLm5hbWUgJiYgZm9ybWlrLmVycm9ycy5uYW1lfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPFRleHRGaWVsZFxyXG4gICAgICAgICAgaWQ9XCJtYWlsXCJcclxuICAgICAgICAgIGxhYmVsPVwiRW50ZXIgTWFpbElEOiBcIlxyXG4gICAgICAgICAgbmFtZT1cImVtYWlsXCJcclxuICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXHJcbiAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxyXG4gICAgICAgICAgb25DaGFuZ2U9e2Zvcm1pay5oYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICB2YWx1ZT17Zm9ybWlrLnZhbHVlcy5lbWFpbH1cclxuICAgICAgICAgIGVycm9yPXtmb3JtaWsudG91Y2hlZC5lbWFpbCAmJiBCb29sZWFuKGZvcm1pay5lcnJvcnMuZW1haWwpfVxyXG4gICAgICAgICAgaGVscGVyVGV4dD17Zm9ybWlrLnRvdWNoZWQuZW1haWwgJiYgZm9ybWlrLmVycm9ycy5lbWFpbH1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxUZXh0RmllbGRcclxuICAgICAgICAgIGlkPVwiYWdlXCJcclxuICAgICAgICAgIGxhYmVsPVwiRW50ZXIgeW91ciBhZ2U6IFwiXHJcbiAgICAgICAgICBuYW1lPVwiYWdlXCJcclxuICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcclxuICAgICAgICAgIG9uQ2hhbmdlPXtmb3JtaWsuaGFuZGxlQ2hhbmdlfVxyXG4gICAgICAgICAgdmFsdWU9e2Zvcm1pay52YWx1ZXMuYWdlfVxyXG4gICAgICAgICAgZXJyb3I9e2Zvcm1pay50b3VjaGVkLmFnZSAmJiBCb29sZWFuKGZvcm1pay5lcnJvcnMuYWdlKX1cclxuICAgICAgICAgIGhlbHBlclRleHQ9e2Zvcm1pay50b3VjaGVkLmFnZSAmJiBmb3JtaWsuZXJyb3JzLmFnZX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxUZXh0RmllbGRcclxuICAgICAgICAgIGlkPVwicGhvbmVcIlxyXG4gICAgICAgICAgbGFiZWw9XCJFbnRlciB5b3VyIFBob25lIE51bWJlcjogXCJcclxuICAgICAgICAgIG5hbWU9XCJwaG9uZVwiXHJcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxyXG4gICAgICAgICAgb25DaGFuZ2U9e2Zvcm1pay5oYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICB2YWx1ZT17Zm9ybWlrLnZhbHVlcy5waG9uZX1cclxuICAgICAgICAgIGVycm9yPXtmb3JtaWsudG91Y2hlZC5waG9uZSAmJiBCb29sZWFuKGZvcm1pay5lcnJvcnMucGhvbmUpfVxyXG4gICAgICAgICAgaGVscGVyVGV4dD17Zm9ybWlrLnRvdWNoZWQucGhvbmUgJiYgZm9ybWlrLmVycm9ycy5waG9uZX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxlbT5XaGF0IGxhbmd1YWdlIHdvdWxkIHlvdSBsaWtlIHRoZSBxdWl6IHRvIGJlIGluPzwvZW0+XHJcbiAgICAgICAgPFJhZGlvR3JvdXBcclxuICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT1cImRlbW8tcmFkaW8tYnV0dG9ucy1ncm91cC1sYWJlbFwiXHJcbiAgICAgICAgICBkZWZhdWx0VmFsdWU9XCJSZWFjdCBKU1wiXHJcbiAgICAgICAgICBuYW1lPVwic2VsZWN0ZWRMYW5ndWFnZVwiXHJcbiAgICAgICAgICBvbkNoYW5nZT17Zm9ybWlrLmhhbmRsZUNoYW5nZX1cclxuICAgICAgICAgIHZhbHVlPXtmb3JtaWsudmFsdWVzLnNlbGVjdGVkTGFuZ3VhZ2V9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPEZvcm1Db250cm9sTGFiZWxcclxuICAgICAgICAgICAgdmFsdWU9XCJSZWFjdEpTXCJcclxuICAgICAgICAgICAgY29udHJvbD17PFJhZGlvIC8+fVxyXG4gICAgICAgICAgICBsYWJlbD1cIlJlYWN0SlNcIlxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxGb3JtQ29udHJvbExhYmVsXHJcbiAgICAgICAgICAgIHZhbHVlPVwiUmVhY3QgTmF0aXZlXCJcclxuICAgICAgICAgICAgY29udHJvbD17PFJhZGlvIC8+fVxyXG4gICAgICAgICAgICBsYWJlbD1cIlJlYWN0IE5hdGl2ZVwiXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPEZvcm1Db250cm9sTGFiZWwgdmFsdWU9XCJKYXZhXCIgY29udHJvbD17PFJhZGlvIC8+fSBsYWJlbD1cIkphdmFcIiAvPlxyXG4gICAgICAgIDwvUmFkaW9Hcm91cD5cclxuICAgICAgICA8ZW0gY2xhc3NOYW1lPVwidHJhY2tTY29yZVwiPldvdWxkIHlvdSBsaWtlIHlvdXIgc2NvcmUgdG8gYmUgdHJhY2tlZD88L2VtPlxyXG4gICAgICAgIDxSYWRpb0dyb3VwXHJcbiAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9XCJkZW1vLXJhZGlvLWJ1dHRvbnMtZ3JvdXAtbGFiZWxcIlxyXG4gICAgICAgICAgZGVmYXVsdFZhbHVlPVwiZmFsc2VcIlxyXG4gICAgICAgICAgbmFtZT1cInRyYWNrU2NvcmVcIlxyXG4gICAgICAgICAgb25DaGFuZ2U9e2Zvcm1pay5oYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICB2YWx1ZT17Zm9ybWlrLnZhbHVlcy50cmFja1Njb3JlfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxGb3JtQ29udHJvbExhYmVsIHZhbHVlPVwiVHJ1ZVwiIGNvbnRyb2w9ezxSYWRpbyAvPn0gbGFiZWw9XCJZZXNcIiAvPlxyXG4gICAgICAgICAgPEZvcm1Db250cm9sTGFiZWwgdmFsdWU9XCJmYWxzZVwiIGNvbnRyb2w9ezxSYWRpbyAvPn0gbGFiZWw9XCJOb1wiIC8+XHJcbiAgICAgICAgPC9SYWRpb0dyb3VwPlxyXG4gICAgICAgIDxCdXR0b25cclxuICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxyXG4gICAgICAgICAgdmFyaWFudD1cImNvbnRhaW5lZFwiXHJcbiAgICAgICAgICBkaXNhYmxlZD17IWZvcm1pay5pc1ZhbGlkIHx8ICFmb3JtaWsuZGlydHl9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgU3VibWl0XHJcbiAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgIDwvZm9ybT5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIb21lO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFNBQUEsR0FBQUMsT0FBQTtBQU9BLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLElBQUEsR0FBQUgsT0FBQTtBQUVBLElBQUFJLEdBQUEsR0FBQUMsdUJBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFNLFlBQUEsR0FBQU4sT0FBQTtBQUEyQyxTQUFBTyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEsQ0FBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFB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