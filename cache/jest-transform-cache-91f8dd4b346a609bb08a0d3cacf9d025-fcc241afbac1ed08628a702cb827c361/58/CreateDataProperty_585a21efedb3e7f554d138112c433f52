6f6d188d583b9ed7a82bb238fa8724ab
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $TypeError = GetIntrinsic('%TypeError%');
var DefineOwnProperty = require('../helpers/DefineOwnProperty');
var FromPropertyDescriptor = require('./FromPropertyDescriptor');
var OrdinaryGetOwnProperty = require('./OrdinaryGetOwnProperty');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsExtensible = require('./IsExtensible');
var IsPropertyKey = require('./IsPropertyKey');
var SameValue = require('./SameValue');
var Type = require('./Type');

// https://ecma-international.org/ecma-262/6.0/#sec-createdataproperty

module.exports = function CreateDataProperty(O, P, V) {
  if (Type(O) !== 'Object') {
    throw new $TypeError('Assertion failed: Type(O) is not Object');
  }
  if (!IsPropertyKey(P)) {
    throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');
  }
  var oldDesc = OrdinaryGetOwnProperty(O, P);
  var extensible = !oldDesc || IsExtensible(O);
  var nonConfigurable = oldDesc && !oldDesc['[[Configurable]]'];
  if (nonConfigurable || !extensible) {
    return false;
  }
  return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, {
    '[[Configurable]]': true,
    '[[Enumerable]]': true,
    '[[Value]]': V,
    '[[Writable]]': true
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsIkRlZmluZU93blByb3BlcnR5IiwiRnJvbVByb3BlcnR5RGVzY3JpcHRvciIsIk9yZGluYXJ5R2V0T3duUHJvcGVydHkiLCJJc0RhdGFEZXNjcmlwdG9yIiwiSXNFeHRlbnNpYmxlIiwiSXNQcm9wZXJ0eUtleSIsIlNhbWVWYWx1ZSIsIlR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiQ3JlYXRlRGF0YVByb3BlcnR5IiwiTyIsIlAiLCJWIiwib2xkRGVzYyIsImV4dGVuc2libGUiLCJub25Db25maWd1cmFibGUiXSwic291cmNlcyI6WyJDcmVhdGVEYXRhUHJvcGVydHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIERlZmluZU93blByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaGVscGVycy9EZWZpbmVPd25Qcm9wZXJ0eScpO1xuXG52YXIgRnJvbVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vRnJvbVByb3BlcnR5RGVzY3JpcHRvcicpO1xudmFyIE9yZGluYXJ5R2V0T3duUHJvcGVydHkgPSByZXF1aXJlKCcuL09yZGluYXJ5R2V0T3duUHJvcGVydHknKTtcbnZhciBJc0RhdGFEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Jc0RhdGFEZXNjcmlwdG9yJyk7XG52YXIgSXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi9Jc0V4dGVuc2libGUnKTtcbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgU2FtZVZhbHVlID0gcmVxdWlyZSgnLi9TYW1lVmFsdWUnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jcmVhdGVkYXRhcHJvcGVydHlcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBDcmVhdGVEYXRhUHJvcGVydHkoTywgUCwgVikge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0fVxuXHR2YXIgb2xkRGVzYyA9IE9yZGluYXJ5R2V0T3duUHJvcGVydHkoTywgUCk7XG5cdHZhciBleHRlbnNpYmxlID0gIW9sZERlc2MgfHwgSXNFeHRlbnNpYmxlKE8pO1xuXHR2YXIgbm9uQ29uZmlndXJhYmxlID0gb2xkRGVzYyAmJiAhb2xkRGVzY1snW1tDb25maWd1cmFibGVdXSddO1xuXHRpZiAobm9uQ29uZmlndXJhYmxlIHx8ICFleHRlbnNpYmxlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBEZWZpbmVPd25Qcm9wZXJ0eShcblx0XHRJc0RhdGFEZXNjcmlwdG9yLFxuXHRcdFNhbWVWYWx1ZSxcblx0XHRGcm9tUHJvcGVydHlEZXNjcmlwdG9yLFxuXHRcdE8sXG5cdFx0UCxcblx0XHR7XG5cdFx0XHQnW1tDb25maWd1cmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tFbnVtZXJhYmxlXV0nOiB0cnVlLFxuXHRcdFx0J1tbVmFsdWVdXSc6IFYsXG5cdFx0XHQnW1tXcml0YWJsZV1dJzogdHJ1ZVxuXHRcdH1cblx0KTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRTNDLElBQUlDLFVBQVUsR0FBR0YsWUFBWSxDQUFDLGFBQWEsQ0FBQztBQUU1QyxJQUFJRyxpQkFBaUIsR0FBR0YsT0FBTyxDQUFDLDhCQUE4QixDQUFDO0FBRS9ELElBQUlHLHNCQUFzQixHQUFHSCxPQUFPLENBQUMsMEJBQTBCLENBQUM7QUFDaEUsSUFBSUksc0JBQXNCLEdBQUdKLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQztBQUNoRSxJQUFJSyxnQkFBZ0IsR0FBR0wsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBQ3BELElBQUlNLFlBQVksR0FBR04sT0FBTyxDQUFDLGdCQUFnQixDQUFDO0FBQzVDLElBQUlPLGFBQWEsR0FBR1AsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQzlDLElBQUlRLFNBQVMsR0FBR1IsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUN0QyxJQUFJUyxJQUFJLEdBQUdULE9BQU8sQ0FBQyxRQUFRLENBQUM7O0FBRTVCOztBQUVBVSxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxrQkFBa0JBLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFDckQsSUFBSU4sSUFBSSxDQUFDSSxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7SUFDekIsTUFBTSxJQUFJWixVQUFVLENBQUMseUNBQXlDLENBQUM7RUFDaEU7RUFDQSxJQUFJLENBQUNNLGFBQWEsQ0FBQ08sQ0FBQyxDQUFDLEVBQUU7SUFDdEIsTUFBTSxJQUFJYixVQUFVLENBQUMsZ0RBQWdELENBQUM7RUFDdkU7RUFDQSxJQUFJZSxPQUFPLEdBQUdaLHNCQUFzQixDQUFDUyxDQUFDLEVBQUVDLENBQUMsQ0FBQztFQUMxQyxJQUFJRyxVQUFVLEdBQUcsQ0FBQ0QsT0FBTyxJQUFJVixZQUFZLENBQUNPLENBQUMsQ0FBQztFQUM1QyxJQUFJSyxlQUFlLEdBQUdGLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUMsa0JBQWtCLENBQUM7RUFDN0QsSUFBSUUsZUFBZSxJQUFJLENBQUNELFVBQVUsRUFBRTtJQUNuQyxPQUFPLEtBQUs7RUFDYjtFQUNBLE9BQU9mLGlCQUFpQixDQUN2QkcsZ0JBQWdCLEVBQ2hCRyxTQUFTLEVBQ1RMLHNCQUFzQixFQUN0QlUsQ0FBQyxFQUNEQyxDQUFDLEVBQ0Q7SUFDQyxrQkFBa0IsRUFBRSxJQUFJO0lBQ3hCLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsV0FBVyxFQUFFQyxDQUFDO0lBQ2QsY0FBYyxFQUFFO0VBQ2pCLENBQUMsQ0FDRDtBQUNGLENBQUMifQ==