8df453a7dbb3876fcae38ba8ab594f73
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $SyntaxError = GetIntrinsic('%SyntaxError%');
var SLOT = require('internal-slot');

// https://262.ecma-international.org/7.0/#sec-completion-record-specification-type

var CompletionRecord = function CompletionRecord(type, value) {
  if (!(this instanceof CompletionRecord)) {
    return new CompletionRecord(type, value);
  }
  if (type !== 'normal' && type !== 'break' && type !== 'continue' && type !== 'return' && type !== 'throw') {
    throw new $SyntaxError('Assertion failed: `type` must be one of "normal", "break", "continue", "return", or "throw"');
  }
  SLOT.set(this, '[[Type]]', type);
  SLOT.set(this, '[[Value]]', value);
  // [[Target]] slot?
};

CompletionRecord.prototype.type = function Type() {
  return SLOT.get(this, '[[Type]]');
};
CompletionRecord.prototype.value = function Value() {
  return SLOT.get(this, '[[Value]]');
};
CompletionRecord.prototype['?'] = function ReturnIfAbrupt() {
  var type = SLOT.get(this, '[[Type]]');
  var value = SLOT.get(this, '[[Value]]');
  if (type === 'normal') {
    return value;
  }
  if (type === 'throw') {
    throw value;
  }
  throw new $SyntaxError('Completion Record is not of type "normal" or "throw": other types not supported');
};
CompletionRecord.prototype['!'] = function assert() {
  var type = SLOT.get(this, '[[Type]]');
  if (type !== 'normal') {
    throw new $SyntaxError('Assertion failed: Completion Record is not of type "normal"');
  }
  return SLOT.get(this, '[[Value]]');
};
module.exports = CompletionRecord;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFN5bnRheEVycm9yIiwiU0xPVCIsIkNvbXBsZXRpb25SZWNvcmQiLCJ0eXBlIiwidmFsdWUiLCJzZXQiLCJwcm90b3R5cGUiLCJUeXBlIiwiZ2V0IiwiVmFsdWUiLCJSZXR1cm5JZkFicnVwdCIsImFzc2VydCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJDb21wbGV0aW9uUmVjb3JkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRTeW50YXhFcnJvciA9IEdldEludHJpbnNpYygnJVN5bnRheEVycm9yJScpO1xuXG52YXIgU0xPVCA9IHJlcXVpcmUoJ2ludGVybmFsLXNsb3QnKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy83LjAvI3NlYy1jb21wbGV0aW9uLXJlY29yZC1zcGVjaWZpY2F0aW9uLXR5cGVcblxudmFyIENvbXBsZXRpb25SZWNvcmQgPSBmdW5jdGlvbiBDb21wbGV0aW9uUmVjb3JkKHR5cGUsIHZhbHVlKSB7XG5cdGlmICghKHRoaXMgaW5zdGFuY2VvZiBDb21wbGV0aW9uUmVjb3JkKSkge1xuXHRcdHJldHVybiBuZXcgQ29tcGxldGlvblJlY29yZCh0eXBlLCB2YWx1ZSk7XG5cdH1cblx0aWYgKHR5cGUgIT09ICdub3JtYWwnICYmIHR5cGUgIT09ICdicmVhaycgJiYgdHlwZSAhPT0gJ2NvbnRpbnVlJyAmJiB0eXBlICE9PSAncmV0dXJuJyAmJiB0eXBlICE9PSAndGhyb3cnKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYHR5cGVgIG11c3QgYmUgb25lIG9mIFwibm9ybWFsXCIsIFwiYnJlYWtcIiwgXCJjb250aW51ZVwiLCBcInJldHVyblwiLCBvciBcInRocm93XCInKTtcblx0fVxuXHRTTE9ULnNldCh0aGlzLCAnW1tUeXBlXV0nLCB0eXBlKTtcblx0U0xPVC5zZXQodGhpcywgJ1tbVmFsdWVdXScsIHZhbHVlKTtcblx0Ly8gW1tUYXJnZXRdXSBzbG90P1xufTtcblxuQ29tcGxldGlvblJlY29yZC5wcm90b3R5cGUudHlwZSA9IGZ1bmN0aW9uIFR5cGUoKSB7XG5cdHJldHVybiBTTE9ULmdldCh0aGlzLCAnW1tUeXBlXV0nKTtcbn07XG5cbkNvbXBsZXRpb25SZWNvcmQucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24gVmFsdWUoKSB7XG5cdHJldHVybiBTTE9ULmdldCh0aGlzLCAnW1tWYWx1ZV1dJyk7XG59O1xuXG5Db21wbGV0aW9uUmVjb3JkLnByb3RvdHlwZVsnPyddID0gZnVuY3Rpb24gUmV0dXJuSWZBYnJ1cHQoKSB7XG5cdHZhciB0eXBlID0gU0xPVC5nZXQodGhpcywgJ1tbVHlwZV1dJyk7XG5cdHZhciB2YWx1ZSA9IFNMT1QuZ2V0KHRoaXMsICdbW1ZhbHVlXV0nKTtcblxuXHRpZiAodHlwZSA9PT0gJ25vcm1hbCcpIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKHR5cGUgPT09ICd0aHJvdycpIHtcblx0XHR0aHJvdyB2YWx1ZTtcblx0fVxuXHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdDb21wbGV0aW9uIFJlY29yZCBpcyBub3Qgb2YgdHlwZSBcIm5vcm1hbFwiIG9yIFwidGhyb3dcIjogb3RoZXIgdHlwZXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxuQ29tcGxldGlvblJlY29yZC5wcm90b3R5cGVbJyEnXSA9IGZ1bmN0aW9uIGFzc2VydCgpIHtcblx0dmFyIHR5cGUgPSBTTE9ULmdldCh0aGlzLCAnW1tUeXBlXV0nKTtcblxuXHRpZiAodHlwZSAhPT0gJ25vcm1hbCcpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBDb21wbGV0aW9uIFJlY29yZCBpcyBub3Qgb2YgdHlwZSBcIm5vcm1hbFwiJyk7XG5cdH1cblx0cmV0dXJuIFNMT1QuZ2V0KHRoaXMsICdbW1ZhbHVlXV0nKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcGxldGlvblJlY29yZDtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFFM0MsSUFBSUMsWUFBWSxHQUFHRixZQUFZLENBQUMsZUFBZSxDQUFDO0FBRWhELElBQUlHLElBQUksR0FBR0YsT0FBTyxDQUFDLGVBQWUsQ0FBQzs7QUFFbkM7O0FBRUEsSUFBSUcsZ0JBQWdCLEdBQUcsU0FBU0EsZ0JBQWdCQSxDQUFDQyxJQUFJLEVBQUVDLEtBQUssRUFBRTtFQUM3RCxJQUFJLEVBQUUsSUFBSSxZQUFZRixnQkFBZ0IsQ0FBQyxFQUFFO0lBQ3hDLE9BQU8sSUFBSUEsZ0JBQWdCLENBQUNDLElBQUksRUFBRUMsS0FBSyxDQUFDO0VBQ3pDO0VBQ0EsSUFBSUQsSUFBSSxLQUFLLFFBQVEsSUFBSUEsSUFBSSxLQUFLLE9BQU8sSUFBSUEsSUFBSSxLQUFLLFVBQVUsSUFBSUEsSUFBSSxLQUFLLFFBQVEsSUFBSUEsSUFBSSxLQUFLLE9BQU8sRUFBRTtJQUMxRyxNQUFNLElBQUlILFlBQVksQ0FBQyw2RkFBNkYsQ0FBQztFQUN0SDtFQUNBQyxJQUFJLENBQUNJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFRixJQUFJLENBQUM7RUFDaENGLElBQUksQ0FBQ0ksR0FBRyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUVELEtBQUssQ0FBQztFQUNsQztBQUNELENBQUM7O0FBRURGLGdCQUFnQixDQUFDSSxTQUFTLENBQUNILElBQUksR0FBRyxTQUFTSSxJQUFJQSxDQUFBLEVBQUc7RUFDakQsT0FBT04sSUFBSSxDQUFDTyxHQUFHLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQztBQUNsQyxDQUFDO0FBRUROLGdCQUFnQixDQUFDSSxTQUFTLENBQUNGLEtBQUssR0FBRyxTQUFTSyxLQUFLQSxDQUFBLEVBQUc7RUFDbkQsT0FBT1IsSUFBSSxDQUFDTyxHQUFHLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQztBQUNuQyxDQUFDO0FBRUROLGdCQUFnQixDQUFDSSxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBU0ksY0FBY0EsQ0FBQSxFQUFHO0VBQzNELElBQUlQLElBQUksR0FBR0YsSUFBSSxDQUFDTyxHQUFHLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQztFQUNyQyxJQUFJSixLQUFLLEdBQUdILElBQUksQ0FBQ08sR0FBRyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUM7RUFFdkMsSUFBSUwsSUFBSSxLQUFLLFFBQVEsRUFBRTtJQUN0QixPQUFPQyxLQUFLO0VBQ2I7RUFDQSxJQUFJRCxJQUFJLEtBQUssT0FBTyxFQUFFO0lBQ3JCLE1BQU1DLEtBQUs7RUFDWjtFQUNBLE1BQU0sSUFBSUosWUFBWSxDQUFDLGlGQUFpRixDQUFDO0FBQzFHLENBQUM7QUFFREUsZ0JBQWdCLENBQUNJLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTSyxNQUFNQSxDQUFBLEVBQUc7RUFDbkQsSUFBSVIsSUFBSSxHQUFHRixJQUFJLENBQUNPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDO0VBRXJDLElBQUlMLElBQUksS0FBSyxRQUFRLEVBQUU7SUFDdEIsTUFBTSxJQUFJSCxZQUFZLENBQUMsNkRBQTZELENBQUM7RUFDdEY7RUFDQSxPQUFPQyxJQUFJLENBQUNPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDO0FBQ25DLENBQUM7QUFFREksTUFBTSxDQUFDQyxPQUFPLEdBQUdYLGdCQUFnQiJ9