6f6bc0ef10b2664d27de7aab941ff229
'use strict';

var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';
var isPrimitive = require('./helpers/isPrimitive');
var isCallable = require('is-callable');
var isDate = require('is-date-object');
var isSymbol = require('is-symbol');
var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
  if (typeof O === 'undefined' || O === null) {
    throw new TypeError('Cannot call method on ' + O);
  }
  if (typeof hint !== 'string' || hint !== 'number' && hint !== 'string') {
    throw new TypeError('hint must be "string" or "number"');
  }
  var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
  var method, result, i;
  for (i = 0; i < methodNames.length; ++i) {
    method = O[methodNames[i]];
    if (isCallable(method)) {
      result = method.call(O);
      if (isPrimitive(result)) {
        return result;
      }
    }
  }
  throw new TypeError('No default value');
};
var GetMethod = function GetMethod(O, P) {
  var func = O[P];
  if (func !== null && typeof func !== 'undefined') {
    if (!isCallable(func)) {
      throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
    }
    return func;
  }
  return void 0;
};

// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
module.exports = function ToPrimitive(input) {
  if (isPrimitive(input)) {
    return input;
  }
  var hint = 'default';
  if (arguments.length > 1) {
    if (arguments[1] === String) {
      hint = 'string';
    } else if (arguments[1] === Number) {
      hint = 'number';
    }
  }
  var exoticToPrim;
  if (hasSymbols) {
    if (Symbol.toPrimitive) {
      exoticToPrim = GetMethod(input, Symbol.toPrimitive);
    } else if (isSymbol(input)) {
      exoticToPrim = Symbol.prototype.valueOf;
    }
  }
  if (typeof exoticToPrim !== 'undefined') {
    var result = exoticToPrim.call(input, hint);
    if (isPrimitive(result)) {
      return result;
    }
    throw new TypeError('unable to convert exotic object to primitive');
  }
  if (hint === 'default' && (isDate(input) || isSymbol(input))) {
    hint = 'string';
  }
  return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoYXNTeW1ib2xzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJpc1ByaW1pdGl2ZSIsInJlcXVpcmUiLCJpc0NhbGxhYmxlIiwiaXNEYXRlIiwiaXNTeW1ib2wiLCJvcmRpbmFyeVRvUHJpbWl0aXZlIiwiT3JkaW5hcnlUb1ByaW1pdGl2ZSIsIk8iLCJoaW50IiwiVHlwZUVycm9yIiwibWV0aG9kTmFtZXMiLCJtZXRob2QiLCJyZXN1bHQiLCJpIiwibGVuZ3RoIiwiY2FsbCIsIkdldE1ldGhvZCIsIlAiLCJmdW5jIiwibW9kdWxlIiwiZXhwb3J0cyIsIlRvUHJpbWl0aXZlIiwiaW5wdXQiLCJhcmd1bWVudHMiLCJTdHJpbmciLCJOdW1iZXIiLCJleG90aWNUb1ByaW0iLCJ0b1ByaW1pdGl2ZSIsInByb3RvdHlwZSIsInZhbHVlT2YiXSwic291cmNlcyI6WyJlczIwMTUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCc7XG5cbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCdpcy1jYWxsYWJsZScpO1xudmFyIGlzRGF0ZSA9IHJlcXVpcmUoJ2lzLWRhdGUtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCdpcy1zeW1ib2wnKTtcblxudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUgPSBmdW5jdGlvbiBPcmRpbmFyeVRvUHJpbWl0aXZlKE8sIGhpbnQpIHtcblx0aWYgKHR5cGVvZiBPID09PSAndW5kZWZpbmVkJyB8fCBPID09PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgbWV0aG9kIG9uICcgKyBPKTtcblx0fVxuXHRpZiAodHlwZW9mIGhpbnQgIT09ICdzdHJpbmcnIHx8IChoaW50ICE9PSAnbnVtYmVyJyAmJiBoaW50ICE9PSAnc3RyaW5nJykpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdoaW50IG11c3QgYmUgXCJzdHJpbmdcIiBvciBcIm51bWJlclwiJyk7XG5cdH1cblx0dmFyIG1ldGhvZE5hbWVzID0gaGludCA9PT0gJ3N0cmluZycgPyBbJ3RvU3RyaW5nJywgJ3ZhbHVlT2YnXSA6IFsndmFsdWVPZicsICd0b1N0cmluZyddO1xuXHR2YXIgbWV0aG9kLCByZXN1bHQsIGk7XG5cdGZvciAoaSA9IDA7IGkgPCBtZXRob2ROYW1lcy5sZW5ndGg7ICsraSkge1xuXHRcdG1ldGhvZCA9IE9bbWV0aG9kTmFtZXNbaV1dO1xuXHRcdGlmIChpc0NhbGxhYmxlKG1ldGhvZCkpIHtcblx0XHRcdHJlc3VsdCA9IG1ldGhvZC5jYWxsKE8pO1xuXHRcdFx0aWYgKGlzUHJpbWl0aXZlKHJlc3VsdCkpIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0dGhyb3cgbmV3IFR5cGVFcnJvcignTm8gZGVmYXVsdCB2YWx1ZScpO1xufTtcblxudmFyIEdldE1ldGhvZCA9IGZ1bmN0aW9uIEdldE1ldGhvZChPLCBQKSB7XG5cdHZhciBmdW5jID0gT1tQXTtcblx0aWYgKGZ1bmMgIT09IG51bGwgJiYgdHlwZW9mIGZ1bmMgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0aWYgKCFpc0NhbGxhYmxlKGZ1bmMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGZ1bmMgKyAnIHJldHVybmVkIGZvciBwcm9wZXJ0eSAnICsgUCArICcgb2Ygb2JqZWN0ICcgKyBPICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRyZXR1cm4gZnVuYztcblx0fVxuXHRyZXR1cm4gdm9pZCAwO1xufTtcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0KSB7XG5cdGlmIChpc1ByaW1pdGl2ZShpbnB1dCkpIHtcblx0XHRyZXR1cm4gaW5wdXQ7XG5cdH1cblx0dmFyIGhpbnQgPSAnZGVmYXVsdCc7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdGlmIChhcmd1bWVudHNbMV0gPT09IFN0cmluZykge1xuXHRcdFx0aGludCA9ICdzdHJpbmcnO1xuXHRcdH0gZWxzZSBpZiAoYXJndW1lbnRzWzFdID09PSBOdW1iZXIpIHtcblx0XHRcdGhpbnQgPSAnbnVtYmVyJztcblx0XHR9XG5cdH1cblxuXHR2YXIgZXhvdGljVG9QcmltO1xuXHRpZiAoaGFzU3ltYm9scykge1xuXHRcdGlmIChTeW1ib2wudG9QcmltaXRpdmUpIHtcblx0XHRcdGV4b3RpY1RvUHJpbSA9IEdldE1ldGhvZChpbnB1dCwgU3ltYm9sLnRvUHJpbWl0aXZlKTtcblx0XHR9IGVsc2UgaWYgKGlzU3ltYm9sKGlucHV0KSkge1xuXHRcdFx0ZXhvdGljVG9QcmltID0gU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mO1xuXHRcdH1cblx0fVxuXHRpZiAodHlwZW9mIGV4b3RpY1RvUHJpbSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHR2YXIgcmVzdWx0ID0gZXhvdGljVG9QcmltLmNhbGwoaW5wdXQsIGhpbnQpO1xuXHRcdGlmIChpc1ByaW1pdGl2ZShyZXN1bHQpKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmFibGUgdG8gY29udmVydCBleG90aWMgb2JqZWN0IHRvIHByaW1pdGl2ZScpO1xuXHR9XG5cdGlmIChoaW50ID09PSAnZGVmYXVsdCcgJiYgKGlzRGF0ZShpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSkge1xuXHRcdGhpbnQgPSAnc3RyaW5nJztcblx0fVxuXHRyZXR1cm4gb3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgaGludCA9PT0g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