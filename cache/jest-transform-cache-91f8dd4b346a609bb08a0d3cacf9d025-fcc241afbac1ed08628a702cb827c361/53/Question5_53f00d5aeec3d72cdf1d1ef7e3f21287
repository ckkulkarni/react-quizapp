adec55b4c8526f35893e162a24628624
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _App = require("./../../App");
var _material = require("@mui/material");
var _reactDnd = require("react-dnd");
var _NavigateNext = _interopRequireDefault(require("@mui/icons-material/NavigateNext"));
var _reactRouter = require("react-router");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Question5 = () => {
  const navigation = (0, _reactRouter.useNavigate)();
  const {
    score,
    setScore,
    trackScore,
    setTracker,
    selectedLanguage
  } = (0, _react.useContext)(_App.QuizContext);
  let questions = [];
  let answers = [];
  if (selectedLanguage === "ReactJS") {
    questions = ["React is a _", "React is used to make _", "The library used to navigate between components is _", "State Management Library _"];
    answers = ["Redux", "React-Router-Dom", "UIs", "Libary of JS"];
  } else if (selectedLanguage === "React Native") {
    questions = ["React Native is a _", "React Native is used to make _", "The library used to navigate between components is _", "State Management Library _"];
    answers = ["Redux", "React Native Navigate", "Mobile Apps", "Libary of JS"];
  } else if (selectedLanguage === "Java") {
    questions = ["Java is an _", "To enter custom inputs in Java, we use _", "JSP stands for _", "API used to connect to SQL _"];
    answers = ["JDBC", "Java server pages", "Scanner", "Object-oriented Language"];
  }
  const [isSubmitted, setIsSubmitted] = (0, _react.useState)(false);
  const [questionsObject, setQuestionsObject] = (0, _react.useState)(questions);
  const [answersObject, setAnswersObject] = (0, _react.useState)(answers);
  const [droppedAnswers, setDroppedAnswers] = (0, _react.useState)([]);
  const handleDrop = (index, answer) => {
    const updatedQuestions = [...questionsObject];
    if (selectedLanguage === "ReactJS") {
      if (index === 0 && answer === answersObject[3] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 1 && answer === answersObject[2] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 2 && answer === answersObject[1] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 3 && answer === answersObject[0] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      }
      setDroppedAnswers(prevDropped => [...prevDropped, answer]);
    } else if (selectedLanguage === "React Native") {
      if (index === 0 && answer === answersObject[3] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 1 && answer === answersObject[2] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 2 && answer === answersObject[1] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 3 && answer === answersObject[0] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      }
      setDroppedAnswers(prevDropped => [...prevDropped, answer]);
    } else if (selectedLanguage === "Java") {
      if (index === 0 && answer === answersObject[3] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 1 && answer === answersObject[2] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 2 && answer === answersObject[1] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      } else if (index === 3 && answer === answersObject[0] && score < 8) {
        setScore(previous => previous + 1);
        updatedQuestions[index] = updatedQuestions[index].replace("_", answer);
      }
      setDroppedAnswers(prevDropped => [...prevDropped, answer]);
    }
    setQuestionsObject(updatedQuestions);
  };
  const handleNavigation = () => {
    navigation("/submission");
  };
  const DraggableAnswer = ({
    answer
  }) => {
    const [{
      isDragging
    }, drag] = (0, _reactDnd.useDrag)({
      type: "ANSWER",
      item: {
        answer
      },
      collect: monitor => ({
        isDragging: monitor.isDragging()
      })
    });
    const isDropped = droppedAnswers.includes(answer);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ref: drag,
      style: {
        opacity: isDragging ? 0.5 : 1,
        cursor: "move",
        display: isDropped ? "none" : "block"
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
        children: answer
      })
    });
  };
  const DropZone = ({
    index,
    onDrop
  }) => {
    const [{
      isOver
    }, drop] = (0, _reactDnd.useDrop)({
      accept: "ANSWER",
      drop: item => onDrop(index, item.answer),
      collect: monitor => ({
        isOver: monitor.isOver()
      })
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ref: drop,
      style: {
        backgroundColor: isOver ? "lightblue" : "white",
        flex: 1,
        height: "100%"
      },
      children: "Drop here"
    });
  };
  const handleQuestionNavigation = index => {
    navigation(`/question${index}`);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
      sx: {
        display: "flex",
        gap: 1,
        flexDirection: "column",
        alignItems: "flex-end",
        p: 1,
        mt: "25vh",
        mr: 2
      },
      children: [1, 2, 3, 4, 5].map(number => /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.IconButton, {
        onClick: () => handleQuestionNavigation(number),
        sx: {
          border: 1,
          borderColor: "divider"
        },
        children: number
      }, number))
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "quiz-container",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
        sx: {
          display: "flex",
          justifyContent: "center",
          alignItems: "flex-start",
          flexDirection: "column",
          gap: 2
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex",
            flexDirection: "column",
            gap: 1
          },
          children: [trackScore && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Typography, {
            children: ["Score: ", score]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Button, {
            variant: "outlined",
            onClick: () => {
              setTracker(!trackScore);
            },
            children: trackScore ? "Disable Score Tracking" : "Enable Score Tracking"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex"
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
            children: questionsObject.map((question, index) => /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
              sx: {
                display: "flex",
                alignItems: "center",
                gap: 2,
                padding: 2,
                backgroundColor: "lightgray",
                marginBottom: 2
              },
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
                children: question
              }), question.includes("_") && /*#__PURE__*/(0, _jsxRuntime.jsx)(DropZone, {
                index: index,
                onDrop: handleDrop
              })]
            }, index))
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
            children: droppedAnswers.length === 4 ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {}) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
              children: answersObject.map((answer, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
                sx: {
                  display: "flex",
                  alignItems: "center",
                  gap: 2,
                  padding: 2,
                  backgroundColor: "lightgray",
                  marginBottom: 2
                },
                children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DraggableAnswer, {
                  answer: answer
                }, index)
              }, index))
            })
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex"
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Button, {
            variant: "contained",
            disabled: isSubmitted,
            onClick: () => setIsSubmitted(true),
            children: "Submit"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.IconButton, {
            onClick: handleNavigation,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_NavigateNext.default, {})
          })]
        })]
      })
    })]
  });
};
var _default = Question5;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,