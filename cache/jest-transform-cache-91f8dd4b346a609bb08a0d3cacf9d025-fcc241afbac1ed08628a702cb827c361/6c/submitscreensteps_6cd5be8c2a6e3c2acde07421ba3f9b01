45d27d3b43f470718e5e0ba003f0ba35
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRouterDom = require("react-router-dom");
var _App = require("../../../App");
var _Home = _interopRequireDefault(require("./../../homeandsubmit/Home"));
var _SubmitScreen = _interopRequireDefault(require("../../homeandsubmit/SubmitScreen"));
var _reactDnd = require("react-dnd");
var _reactDndHtml5Backend = require("react-dnd-html5-backend");
require("jest-canvas-mock");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/submitscreen.feature");
global.ResizeObserver = require("resize-observer-polyfill");
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    document.body.innerHTML = "";
  });
  test("User submits their quiz and sees their results", ({
    given,
    when,
    then,
    and
  }) => {
    const mockQuizContext = {
      score: 5,
      setScore: jest.fn(),
      name: "chandu",
      setName: jest.fn(),
      age: 25,
      setAge: jest.fn(),
      email: "chandra@chandu.com",
      setMail: jest.fn(),
      phoneNumber: "1234567890",
      setPhone: jest.fn(),
      selectedLanguage: "ReactJS",
      setSelector: jest.fn(),
      trackScore: false,
      setTracker: jest.fn()
    };
    given("the user has completed the quiz is on the Submit Screen", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactDnd.DndProvider, {
        backend: _reactDndHtml5Backend.HTML5Backend,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_App.QuizContext.Provider, {
          value: mockQuizContext,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactRouterDom.Routes, {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
                path: "/",
                element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SubmitScreen.default, {})
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
                element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Home.default, {})
              })]
            })
          })
        })
      }));
      expect(screen).toBeTruthy();
      const container = screen.getByTestId("submission-container");
      expect(container).toBeTruthy();
    });
    when("the user should see the details they entered in the home screen", () => {
      expect(_react2.screen.getByText("chandu")).toBeTruthy();
      expect(_react2.screen.getByText("chandra@chandu.com")).toBeTruthy();
      expect(_react2.screen.getByText("1234567890")).toBeTruthy();
      expect(_react2.screen.getByText("ReactJS")).toBeTruthy();
      expect(_react2.screen.getByText("5/8")).toBeTruthy();
      expect(_react2.screen.getByText("25")).toBeTruthy();
    });
    and("the user should see their score in a pie chart", async () => {
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByTestId("submitscreen-piechart")).toBeInTheDocument();
      });
    });
    and("the user should see a button to re-enter their details", () => {
      const tryAgainButton = _react2.screen.getByRole("button", {
        name: "Try again?"
      });
      expect(tryAgainButton).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0Um91dGVyRG9tIiwiX0FwcCIsIl9Ib21lIiwiX1N1Ym1pdFNjcmVlbiIsIl9yZWFjdERuZCIsIl9yZWFjdERuZEh0bWw1QmFja2VuZCIsIl9qc3hSdW50aW1lIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJmZWF0dXJlIiwibG9hZEZlYXR1cmUiLCJnbG9iYWwiLCJSZXNpemVPYnNlcnZlciIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiYmVmb3JlRWFjaCIsImRvY3VtZW50IiwiYm9keSIsImlubmVySFRNTCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJhbmQiLCJtb2NrUXVpekNvbnRleHQiLCJzY29yZSIsInNldFNjb3JlIiwiamVzdCIsImZuIiwibmFtZSIsInNldE5hbWUiLCJhZ2UiLCJzZXRBZ2UiLCJlbWFpbCIsInNldE1haWwiLCJwaG9uZU51bWJlciIsInNldFBob25lIiwic2VsZWN0ZWRMYW5ndWFnZSIsInNldFNlbGVjdG9yIiwidHJhY2tTY29yZSIsInNldFRyYWNrZXIiLCJzY3JlZW4iLCJyZW5kZXIiLCJqc3giLCJEbmRQcm92aWRlciIsImJhY2tlbmQiLCJIVE1MNUJhY2tlbmQiLCJjaGlsZHJlbiIsIlF1aXpDb250ZXh0IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsIkJyb3dzZXJSb3V0ZXIiLCJqc3hzIiwiUm91dGVzIiwiUm91dGUiLCJwYXRoIiwiZWxlbWVudCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJjb250YWluZXIiLCJnZXRCeVRlc3RJZCIsImdldEJ5VGV4dCIsIndhaXRGb3IiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInRyeUFnYWluQnV0dG9uIiwiZ2V0QnlSb2xlIl0sInNvdXJjZXMiOlsic3VibWl0c2NyZWVuLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGRlZmluZUZlYXR1cmUsIGxvYWRGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XHJcbmltcG9ydCBcInRleHQtZW5jb2RpbmdcIjtcclxuaW1wb3J0IFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbS9leHRlbmQtZXhwZWN0XCI7XHJcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgUm91dGVzIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IHsgUXVpekNvbnRleHQgfSBmcm9tIFwiLi4vLi4vLi4vQXBwXCI7XHJcbmltcG9ydCBIb21lIGZyb20gXCIuLy4uLy4uL2hvbWVhbmRzdWJtaXQvSG9tZVwiO1xyXG5pbXBvcnQgUXVlc3Rpb241IGZyb20gXCIuLy4uLy4uL3F1ZXN0aW9ucy9RdWVzdGlvbjVcIjtcclxuaW1wb3J0IFN1Ym1pdFNjcmVlbiBmcm9tIFwiLi4vLi4vaG9tZWFuZHN1Ym1pdC9TdWJtaXRTY3JlZW5cIjtcclxuaW1wb3J0IHsgRG5kUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtZG5kXCI7XHJcbmltcG9ydCB7IEhUTUw1QmFja2VuZCB9IGZyb20gXCJyZWFjdC1kbmQtaHRtbDUtYmFja2VuZFwiO1xyXG5pbXBvcnQgXCJqZXN0LWNhbnZhcy1tb2NrXCI7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9jb21wb25lbnRzL2ZlYXR1cmVzL3N1Ym1pdHNjcmVlbi5mZWF0dXJlXCIpO1xyXG5nbG9iYWwuUmVzaXplT2JzZXJ2ZXIgPSByZXF1aXJlKFwicmVzaXplLW9ic2VydmVyLXBvbHlmaWxsXCIpO1xyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsICh0ZXN0KSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgfSk7XHJcbiAgdGVzdChcIlVzZXIgc3VibWl0cyB0aGVpciBxdWl6IGFuZCBzZWVzIHRoZWlyIHJlc3VsdHNcIiwgKHtcclxuICAgIGdpdmVuLFxyXG4gICAgd2hlbixcclxuICAgIHRoZW4sXHJcbiAgICBhbmQsXHJcbiAgfSkgPT4ge1xyXG4gICAgY29uc3QgbW9ja1F1aXpDb250ZXh0ID0ge1xyXG4gICAgICBzY29yZTogNSxcclxuICAgICAgc2V0U2NvcmU6IGplc3QuZm4oKSxcclxuICAgICAgbmFtZTogXCJjaGFuZHVcIixcclxuICAgICAgc2V0TmFtZTogamVzdC5mbigpLFxyXG4gICAgICBhZ2U6IDI1LFxyXG4gICAgICBzZXRBZ2U6IGplc3QuZm4oKSxcclxuICAgICAgZW1haWw6IFwiY2hhbmRyYUBjaGFuZHUuY29tXCIsXHJcbiAgICAgIHNldE1haWw6IGplc3QuZm4oKSxcclxuICAgICAgcGhvbmVOdW1iZXI6IFwiMTIzNDU2Nzg5MFwiLFxyXG4gICAgICBzZXRQaG9uZTogamVzdC5mbigpLFxyXG4gICAgICBzZWxlY3RlZExhbmd1YWdlOiBcIlJlYWN0SlNcIixcclxuICAgICAgc2V0U2VsZWN0b3I6IGplc3QuZm4oKSxcclxuICAgICAgdHJhY2tTY29yZTogZmFsc2UsXHJcbiAgICAgIHNldFRyYWNrZXI6IGplc3QuZm4oKSxcclxuICAgIH07XHJcbiAgICBnaXZlbihcInRoZSB1c2VyIGhhcyBjb21wbGV0ZWQgdGhlIHF1aXogaXMgb24gdGhlIFN1Ym1pdCBTY3JlZW5cIiwgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgPERuZFByb3ZpZGVyIGJhY2tlbmQ9e0hUTUw1QmFja2VuZH0+XHJcbiAgICAgICAgICA8UXVpekNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e21vY2tRdWl6Q29udGV4dH0+XHJcbiAgICAgICAgICAgIDxSb3V0ZXI+XHJcbiAgICAgICAgICAgICAgPFJvdXRlcz5cclxuICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxTdWJtaXRTY3JlZW4gLz59IC8+XHJcbiAgICAgICAgICAgICAgICA8Um91dGUgZWxlbWVudD17PEhvbWUgLz59IC8+XHJcbiAgICAgICAgICAgICAgPC9Sb3V0ZXM+XHJcbiAgICAgICAgICAgIDwvUm91dGVyPlxyXG4gICAgICAgICAgPC9RdWl6Q29udGV4dC5Qcm92aWRlcj5cclxuICAgICAgICA8L0RuZFByb3ZpZGVyPlxyXG4gICAgICApO1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHNjcmVlbi5nZXRCeVRlc3RJZChcInN1Ym1pc3Npb24tY29udGFpbmVyXCIpO1xyXG4gICAgICBleHBlY3QoY29udGFpbmVyKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICAgIHdoZW4oXHJcbiAgICAgIFwidGhlIHVzZXIgc2hvdWxkIHNlZSB0aGUgZGV0YWlscyB0aGV5IGVudGVyZWQgaW4gdGhlIGhvbWUgc2NyZWVuXCIsXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcImNoYW5kdVwiKSkudG9CZVRydXRoeSgpO1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiY2hhbmRyYUBjaGFuZHUuY29tXCIpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCIxMjM0NTY3ODkwXCIpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCJSZWFjdEpTXCIpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCI1LzhcIikpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcIjI1XCIpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgICBhbmQoXCJ0aGUgdXNlciBzaG91bGQgc2VlIHRoZWlyIHNjb3JlIGluIGEgcGllIGNoYXJ0XCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZChcInN1Ym1pdHNjcmVlbi1waWVjaGFydFwiKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGFuZChcInRoZSB1c2VyIHNob3VsZCBzZWUgYSBidXR0b24gdG8gcmUtZW50ZXIgdGhlaXIgZGV0YWlsc1wiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRyeUFnYWluQnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZShcImJ1dHRvblwiLCB7IG5hbWU6IFwiVHJ5IGFnYWluP1wiIH0pO1xyXG4gICAgICBleHBlY3QodHJ5QWdhaW5CdXR0b24pLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUNBQSxPQUFBO0FBQ0FBLE9BQUE7QUFDQSxJQUFBRyxlQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxJQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxLQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBTSxhQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTyxTQUFBLEdBQUFQLE9BQUE7QUFDQSxJQUFBUSxxQkFBQSxHQUFBUixPQUFBO0FBQ0FBLE9BQUE7QUFBMEIsSUFBQVMsV0FBQSxHQUFBVCxPQUFBO0FBQUEsU0FBQUQsdUJBQUFXLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFD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