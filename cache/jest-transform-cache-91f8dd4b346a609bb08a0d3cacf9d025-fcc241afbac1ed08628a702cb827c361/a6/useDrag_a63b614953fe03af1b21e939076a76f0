b58e37e72edf417e76e747db4606a096
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDrag = useDrag;
var _invariant = require("@react-dnd/invariant");
var _useCollectedProps = require("../useCollectedProps.js");
var _useOptionalFactory = require("../useOptionalFactory.js");
var _connectors = require("./connectors.js");
var _useDragSourceConnector = require("./useDragSourceConnector.js");
var _useDragSourceMonitor = require("./useDragSourceMonitor.js");
var _useRegisteredDragSource = require("./useRegisteredDragSource.js");
/**
 * useDragSource hook
 * @param sourceSpec The drag source specification (object or function, function preferred)
 * @param deps The memoization deps array to use when evaluating spec changes
 */
function useDrag(specArg, deps) {
  const spec = (0, _useOptionalFactory.useOptionalFactory)(specArg, deps);
  (0, _invariant.invariant)(!spec.begin, `useDrag::spec.begin was deprecated in v14. Replace spec.begin() with spec.item(). (see more here - https://react-dnd.github.io/react-dnd/docs/api/use-drag)`);
  const monitor = (0, _useDragSourceMonitor.useDragSourceMonitor)();
  const connector = (0, _useDragSourceConnector.useDragSourceConnector)(spec.options, spec.previewOptions);
  (0, _useRegisteredDragSource.useRegisteredDragSource)(spec, monitor, connector);
  return [(0, _useCollectedProps.useCollectedProps)(spec.collect, monitor, connector), (0, _connectors.useConnectDragSource)(connector), (0, _connectors.useConnectDragPreview)(connector)];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW52YXJpYW50IiwicmVxdWlyZSIsIl91c2VDb2xsZWN0ZWRQcm9wcyIsIl91c2VPcHRpb25hbEZhY3RvcnkiLCJfY29ubmVjdG9ycyIsIl91c2VEcmFnU291cmNlQ29ubmVjdG9yIiwiX3VzZURyYWdTb3VyY2VNb25pdG9yIiwiX3VzZVJlZ2lzdGVyZWREcmFnU291cmNlIiwidXNlRHJhZyIsInNwZWNBcmciLCJkZXBzIiwic3BlYyIsInVzZU9wdGlvbmFsRmFjdG9yeSIsImludmFyaWFudCIsImJlZ2luIiwibW9uaXRvciIsInVzZURyYWdTb3VyY2VNb25pdG9yIiwiY29ubmVjdG9yIiwidXNlRHJhZ1NvdXJjZUNvbm5lY3RvciIsIm9wdGlvbnMiLCJwcmV2aWV3T3B0aW9ucyIsInVzZVJlZ2lzdGVyZWREcmFnU291cmNlIiwidXNlQ29sbGVjdGVkUHJvcHMiLCJjb2xsZWN0IiwidXNlQ29ubmVjdERyYWdTb3VyY2UiLCJ1c2VDb25uZWN0RHJhZ1ByZXZpZXciXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaG9va3MvdXNlRHJhZy91c2VEcmFnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0ByZWFjdC1kbmQvaW52YXJpYW50J1xuXG5pbXBvcnQgdHlwZSB7XG5cdENvbm5lY3REcmFnUHJldmlldyxcblx0Q29ubmVjdERyYWdTb3VyY2UsXG59IGZyb20gJy4uLy4uL3R5cGVzL2luZGV4LmpzJ1xuaW1wb3J0IHR5cGUgeyBEcmFnU291cmNlSG9va1NwZWMsIEZhY3RvcnlPckluc3RhbmNlIH0gZnJvbSAnLi4vdHlwZXMuanMnXG5pbXBvcnQgeyB1c2VDb2xsZWN0ZWRQcm9wcyB9IGZyb20gJy4uL3VzZUNvbGxlY3RlZFByb3BzLmpzJ1xuaW1wb3J0IHsgdXNlT3B0aW9uYWxGYWN0b3J5IH0gZnJvbSAnLi4vdXNlT3B0aW9uYWxGYWN0b3J5LmpzJ1xuaW1wb3J0IHsgdXNlQ29ubmVjdERyYWdQcmV2aWV3LCB1c2VDb25uZWN0RHJhZ1NvdXJjZSB9IGZyb20gJy4vY29ubmVjdG9ycy5qcydcbmltcG9ydCB7IHVzZURyYWdTb3VyY2VDb25uZWN0b3IgfSBmcm9tICcuL3VzZURyYWdTb3VyY2VDb25uZWN0b3IuanMnXG5pbXBvcnQgeyB1c2VEcmFnU291cmNlTW9uaXRvciB9IGZyb20gJy4vdXNlRHJhZ1NvdXJjZU1vbml0b3IuanMnXG5pbXBvcnQgeyB1c2VSZWdpc3RlcmVkRHJhZ1NvdXJjZSB9IGZyb20gJy4vdXNlUmVnaXN0ZXJlZERyYWdTb3VyY2UuanMnXG5cbi8qKlxuICogdXNlRHJhZ1NvdXJjZSBob29rXG4gKiBAcGFyYW0gc291cmNlU3BlYyBUaGUgZHJhZyBzb3VyY2Ugc3BlY2lmaWNhdGlvbiAob2JqZWN0IG9yIGZ1bmN0aW9uLCBmdW5jdGlvbiBwcmVmZXJyZWQpXG4gKiBAcGFyYW0gZGVwcyBUaGUgbWVtb2l6YXRpb24gZGVwcyBhcnJheSB0byB1c2Ugd2hlbiBldmFsdWF0aW5nIHNwZWMgY2hhbmdlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRHJhZzxcblx0RHJhZ09iamVjdCA9IHVua25vd24sXG5cdERyb3BSZXN1bHQgPSB1bmtub3duLFxuXHRDb2xsZWN0ZWRQcm9wcyA9IHVua25vd24sXG4+KFxuXHRzcGVjQXJnOiBGYWN0b3J5T3JJbnN0YW5jZTxcblx0XHREcmFnU291cmNlSG9va1NwZWM8RHJhZ09iamVjdCwgRHJvcFJlc3VsdCwgQ29sbGVjdGVkUHJvcHM+XG5cdD4sXG5cdGRlcHM/OiB1bmtub3duW10sXG4pOiBbQ29sbGVjdGVkUHJvcHMsIENvbm5lY3REcmFnU291cmNlLCBDb25uZWN0RHJhZ1ByZXZpZXddIHtcblx0Y29uc3Qgc3BlYyA9IHVzZU9wdGlvbmFsRmFjdG9yeShzcGVjQXJnLCBkZXBzKVxuXHRpbnZhcmlhbnQoXG5cdFx0IShzcGVjIGFzIGFueSkuYmVnaW4sXG5cdFx0YHVzZURyYWc6OnNwZWMuYmVnaW4gd2FzIGRlcHJlY2F0ZWQgaW4gdjE0LiBSZXBsYWNlIHNwZWMuYmVnaW4oKSB3aXRoIHNwZWMuaXRlbSgpLiAoc2VlIG1vcmUgaGVyZSAtIGh0dHBzOi8vcmVhY3QtZG5kLmdpdGh1Yi5pby9yZWFjdC1kbmQvZG9jcy9hcGkvdXNlLWRyYWcpYCxcblx0KVxuXG5cdGNvbnN0IG1vbml0b3IgPSB1c2VEcmFnU291cmNlTW9uaXRvcjxEcmFnT2JqZWN0LCBEcm9wUmVzdWx0PigpXG5cdGNvbnN0IGNvbm5lY3RvciA9IHVzZURyYWdTb3VyY2VDb25uZWN0b3Ioc3BlYy5vcHRpb25zLCBzcGVjLnByZXZpZXdPcHRpb25zKVxuXHR1c2VSZWdpc3RlcmVkRHJhZ1NvdXJjZShzcGVjLCBtb25pdG9yLCBjb25uZWN0b3IpXG5cblx0cmV0dXJuIFtcblx0XHR1c2VDb2xsZWN0ZWRQcm9wcyhzcGVjLmNvbGxlY3QsIG1vbml0b3IsIGNvbm5lY3RvciksXG5cdFx0dXNlQ29ubmVjdERyYWdTb3VyY2UoY29ubmVjdG9yKSxcblx0XHR1c2VDb25uZWN0RHJhZ1ByZXZpZXcoY29ubmVjdG9yKSxcblx0XVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLE9BQUE7QUFPQSxJQUFBQyxrQkFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsbUJBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLHVCQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxxQkFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sd0JBQUEsR0FBQU4sT0FBQTtBQUVBOzs7OztBQUtPLFNBQVNPLE9BQU9BLENBS3RCQyxPQUVDLEVBQ0RDLElBQWdCLEVBQzBDO0VBQzFELE1BQU1DLElBQUksR0FBRyxJQUFBQyxzQ0FBa0IsRUFBQ0gsT0FBTyxFQUFFQyxJQUFJLENBQUM7RUFDOUMsSUFBQUcsb0JBQVMsRUFDUixDQUFDRixJQUFLLENBQVNHLEtBQUssRUFDbkIsNkpBQTRKLENBQzdKO0VBRUQsTUFBTUMsT0FBTyxHQUFHLElBQUFDLDBDQUFvQixHQUEwQjtFQUM5RCxNQUFNQyxTQUFTLEdBQUcsSUFBQUMsOENBQXNCLEVBQUNQLElBQUksQ0FBQ1EsT0FBTyxFQUFFUixJQUFJLENBQUNTLGNBQWMsQ0FBQztFQUMzRSxJQUFBQyxnREFBdUIsRUFBQ1YsSUFBSSxFQUFFSSxPQUFPLEVBQUVFLFNBQVMsQ0FBQztFQUVqRCxPQUFPLENBQ04sSUFBQUssb0NBQWlCLEVBQUNYLElBQUksQ0FBQ1ksT0FBTyxFQUFFUixPQUFPLEVBQUVFLFNBQVMsQ0FBQyxFQUNuRCxJQUFBTyxnQ0FBb0IsRUFBQ1AsU0FBUyxDQUFDLEVBQy9CLElBQUFRLGlDQUFxQixFQUFDUixTQUFTLENBQUMsQ0FDaEMifQ==