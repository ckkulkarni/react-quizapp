c30c488784d99a7ddfbefeec8260f8a1
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRouterDom = require("react-router-dom");
var _App = require("../../../App");
var _Question = _interopRequireDefault(require("./../../questions/Question5"));
var _SubmitScreen = _interopRequireDefault(require("../../homeandsubmit/SubmitScreen"));
var _reactDnd = require("react-dnd");
var _reactDndHtml5Backend = require("react-dnd-html5-backend");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/question5.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    document.body.innerHTML = "";
  });
  test("User answers Question 5 correctly", ({
    given,
    when,
    then
  }) => {
    const mockQuizContext = {
      score: 0,
      setScore: jest.fn(),
      name: "chandu",
      setName: jest.fn(),
      age: 0,
      setAge: jest.fn(),
      email: "chandra@chandu.com",
      setMail: jest.fn(),
      phoneNumber: "1234567890",
      setPhone: jest.fn(),
      selectedLanguage: "ReactJS",
      setSelector: jest.fn(),
      trackScore: false,
      setTracker: jest.fn()
    };
    given("I am on the Question 5 screen", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactDnd.DndProvider, {
        backend: _reactDndHtml5Backend.HTML5Backend,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_App.QuizContext.Provider, {
          value: mockQuizContext,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactRouterDom.Routes, {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
                path: "/",
                element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Question.default, {})
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
                path: "/submission",
                element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SubmitScreen.default, {})
              })]
            })
          })
        })
      }));
      expect(screen).toBeTruthy();
      const questionText = screen.getByText("React is used to make _");
      expect(questionText).toBeTruthy();
    });
    when("I drag the correct answer to the blank space, and the answer is accepted", async () => {
      const draggableAnswer = _react2.screen.getByText("UIs");
      const dropZone = _react2.screen.getAllByText("Drop here");
      _react2.fireEvent.dragStart(draggableAnswer);
      _react2.fireEvent.dragEnter(dropZone[1]);
      _react2.fireEvent.drop(dropZone[1]);
      expect(mockQuizContext.setScore).toBeCalled();
    });
    //     then(
    //       'I navigate to the next question when I click on the "Next Question" button',
    //       () => {
    //         const nextQuestionButton = screen.getByRole("button", {
    //           name: "next-question",
    //         });
    //         expect(nextQuestionButton).toBeTruthy();
    //         fireEvent.click(nextQuestionButton);
    //         expect(window.location.pathname).toEqual("/question5");
    //       }
    //     );
    //   });
    //   test("User answers first quiz question incorrectly", ({
    //     given,
    //     when,
    //     then,
    //   }) => {
    //     const mockQuizContext = {
    //       score: 0,
    //       setScore: jest.fn(),
    //       name: "chandu",
    //       setName: jest.fn(),
    //       age: 0,
    //       setAge: jest.fn(),
    //       email: "chandra@chandu.com",
    //       setMail: jest.fn(),
    //       phoneNumber: "1234567890",
    //       setPhone: jest.fn(),
    //       selectedLanguage: "ReactJS",
    //       setSelector: jest.fn(),
    //       trackScore: false,
    //       setTracker: jest.fn(),
    //     };
    //     given("I am on the Question 4 screen", () => {
    //       const screen = render(
    //         <DndProvider backend={HTML5Backend}>
    //           <QuizContext.Provider value={mockQuizContext}>
    //             <Router>
    //               <Routes>
    //                 <Route path="/" element={<Question5 />} />
    //                 <Route path="/question5" element={<Question5 />} />
    //               </Routes>
    //             </Router>
    //           </QuizContext.Provider>
    //         </DndProvider>
    //       );
    //       expect(screen).toBeTruthy();
    //       const questionText = screen.getByText("React is a _");
    //       expect(questionText).toBeTruthy();
    //     });
    //     when(
    //       "I give an incorrect answer, then the score should remain the same",
    //       () => {
    //         const draggableAnswer = screen.getByText("Redux");
    //         const dropZone = screen.getAllByText("Drop here");
    //         fireEvent.dragStart(draggableAnswer);
    //         fireEvent.dragEnter(dropZone[0]);
    //         fireEvent.drop(dropZone[0]);
    //         expect(mockQuizContext.score).toBe(0);
    //       }
    //     );
    //     when("I select any of the numbers above the questions", () => {
    //       const questionNumberButtons = screen
    //         .getAllByRole("button")
    //         .filter(
    //           (button) => button.textContent && /^\d+$/.test(button.textContent)
    //         );
    //       expect(questionNumberButtons[0]).toBeTruthy();
    //       expect(questionNumberButtons[1]).toBeTruthy();
    //       expect(questionNumberButtons[2]).toBeTruthy();
    //       expect(questionNumberButtons[3]).toBeTruthy();
    //       expect(questionNumberButtons[4]).toBeTruthy();
    //       fireEvent.click(questionNumberButtons[2]);
    //     });
    //     then("it should navigate to that respective question screen", () => {
    //       expect(window.location.pathname).toEqual("/question3");
    //     });
    //   });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,