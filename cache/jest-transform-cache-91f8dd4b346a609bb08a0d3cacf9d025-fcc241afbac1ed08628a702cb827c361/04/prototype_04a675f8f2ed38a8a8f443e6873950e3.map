{"version":3,"names":["Object","defineProperty","exports","value","default","mockPrototype","win","_win$HTMLCanvasElemen","generatedContexts","WeakMap","getContext2D","jest","fn","getContext2d","type","has","get","ctx","CanvasRenderingContext2D","set","dataset","internalRequireTest","require","_unused","internal","call","htmlCanvasElementPrototype","HTMLCanvasElement","prototype","_win$HTMLCanvasElemen2","isMockFunction","getContext","toBlobOverride","callback","mimetype","arguments","length","TypeError","width","height","data","Uint8Array","blob","window","Blob","setTimeout","toBlob","toDataURLOverride","encoderOptions","toDataURL"],"sources":["prototype.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mockPrototype;\nfunction mockPrototype(win) {\n  var _win$HTMLCanvasElemen;\n  /**\n   * This weakmap is designed to contain all of the generated canvas contexts. It's keys are the\n   * jsdom canvases obtained by using the `this` keyword inside the `#getContext('2d')` function\n   * call. It's values are the generated `CanvasRenderingContext2D` objects.\n   */\n  const generatedContexts = new WeakMap();\n  /**\n   * Overrides getContext. Every test run will create a new function that overrides the current\n   * value of getContext. It attempts to preserve the original getContext function by storing it on\n   * the callback as a property.\n   */\n  const getContext2D = jest.fn(function getContext2d(type) {\n    if (type === '2d') {\n      /**\n       * Contexts must be idempotent. Once they are generated, they should be returned when\n       * getContext() is called on the same canvas object multiple times.\n       */\n      if (generatedContexts.has(this)) return generatedContexts.get(this);\n      const ctx = new CanvasRenderingContext2D(this);\n      generatedContexts.set(this, ctx);\n      return ctx;\n    }\n    try {\n      if (!this.dataset.internalRequireTest) require('canvas');\n    } catch (_unused) {\n      return null;\n    }\n    return getContext2D.internal.call(this, type);\n  });\n  let htmlCanvasElementPrototype = HTMLCanvasElement.prototype;\n  if (win !== null && win !== void 0 && (_win$HTMLCanvasElemen = win.HTMLCanvasElement) !== null && _win$HTMLCanvasElemen !== void 0 && _win$HTMLCanvasElemen.prototype) {\n    var _win$HTMLCanvasElemen2;\n    htmlCanvasElementPrototype = win === null || win === void 0 ? void 0 : (_win$HTMLCanvasElemen2 = win.HTMLCanvasElement) === null || _win$HTMLCanvasElemen2 === void 0 ? void 0 : _win$HTMLCanvasElemen2.prototype;\n  }\n  if (!jest.isMockFunction(htmlCanvasElementPrototype.getContext)) {\n    getContext2D.internal = htmlCanvasElementPrototype.getContext;\n  } else {\n    getContext2D.internal = htmlCanvasElementPrototype.getContext.internal;\n  }\n  htmlCanvasElementPrototype.getContext = getContext2D;\n\n  /**\n   * This function technically throws SecurityError at runtime, but it cannot be mocked, because\n   * we don't know if the canvas is tainted. These kinds of errors will be silent.\n   */\n  const toBlobOverride = jest.fn(function toBlobOverride(callback, mimetype) {\n    if (arguments.length < 1) throw new TypeError(\"Failed to execute 'toBlob' on 'HTMLCanvasElement': 1 argument required, but only 0 present.\");\n    if (typeof callback !== 'function') throw new TypeError(\"Failed to execute 'toBlob' on 'HTMLCanvasElement': The callback provided as parameter 1 is not a function.\");\n\n    /**\n     * Mime type must be image/jpeg or image/webp exactly for the browser to accept it, otherwise\n     * it's image/png.\n     */\n    switch (mimetype) {\n      case 'image/webp':\n        break;\n      case 'image/jpeg':\n        break;\n      default:\n        mimetype = 'image/png';\n    }\n\n    /**\n     * This section creates a blob of size width * height * 4. This is not actually valid, because\n     * jpeg size is variable, and so is png. TODO: Is there a better way to do this?\n     */\n    const length = this.width * this.height * 4;\n    const data = new Uint8Array(length);\n    const blob = new window.Blob([data], {\n      type: mimetype\n    });\n    setTimeout(() => callback(blob), 0);\n  });\n  if (!jest.isMockFunction(htmlCanvasElementPrototype.toBlob)) {\n    toBlobOverride.internal = htmlCanvasElementPrototype.toBlob;\n  } else {\n    toBlobOverride.internal = htmlCanvasElementPrototype.toBlob.internal;\n  }\n  htmlCanvasElementPrototype.toBlob = toBlobOverride;\n\n  /**\n   * This section creates a dataurl with a validated mime type. This is not actually valid, because\n   * jpeg size is variable, and so is png. TODO: Is there a better way to do this?\n   */\n  const toDataURLOverride = jest.fn(function toDataURLOverride(type, encoderOptions) {\n    switch (type) {\n      case 'image/jpeg':\n        break;\n      case 'image/webp':\n        break;\n      default:\n        type = 'image/png';\n    }\n\n    /**\n     * This is the smallest valid data url I could generate.\n     */\n    return 'data:' + type + ';base64,00';\n  });\n  if (!jest.isMockFunction(htmlCanvasElementPrototype.toDataURL)) {\n    toDataURLOverride.internal = htmlCanvasElementPrototype.toDataURL;\n  } else {\n    toDataURLOverride.internal = htmlCanvasElementPrototype.toDataURL.internal;\n  }\n  htmlCanvasElementPrototype.toDataURL = toDataURLOverride;\n}"],"mappings":"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"}