{"version":3,"names":["_invariant","require","_react","useAccept","spec","accept","useMemo","invariant","Array","isArray"],"sources":["../../../src/hooks/useDrop/useAccept.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type { Identifier } from 'dnd-core'\nimport { useMemo } from 'react'\n\nimport type { DropTargetHookSpec } from '../types.js'\n\n/**\n * Internal utility hook to get an array-version of spec.accept.\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\n * @param spec\n */\nexport function useAccept<O, R, P>(\n\tspec: DropTargetHookSpec<O, R, P>,\n): Identifier[] {\n\tconst { accept } = spec\n\treturn useMemo(() => {\n\t\tinvariant(spec.accept != null, 'accept must be defined')\n\t\treturn Array.isArray(accept) ? accept : [accept]\n\t}, [accept])\n}\n"],"mappings":";;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AAEA,IAAAC,MAAA,GAAAD,OAAA;AAIA;;;;;AAKO,SAASE,SAASA,CACxBC,IAAiC,EAClB;EACf,MAAM;IAAEC;EAAM,CAAE,GAAGD,IAAI;EACvB,OAAO,IAAAE,cAAO,EAAC,MAAM;IACpB,IAAAC,oBAAS,EAACH,IAAI,CAACC,MAAM,IAAI,IAAI,EAAE,wBAAwB,CAAC;IACxD,OAAOG,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC;GAChD,EAAE,CAACA,MAAM,CAAC,CAAC"}