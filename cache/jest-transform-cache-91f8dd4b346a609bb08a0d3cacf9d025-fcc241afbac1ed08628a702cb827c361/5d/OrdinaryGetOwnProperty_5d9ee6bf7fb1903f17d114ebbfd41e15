ff3cc64599d2c2823b51ffbd5209d238
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $gOPD = require('gopd');
var $TypeError = GetIntrinsic('%TypeError%');
var callBound = require('call-bind/callBound');
var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');
var has = require('has');
var IsArray = require('./IsArray');
var IsPropertyKey = require('./IsPropertyKey');
var IsRegExp = require('./IsRegExp');
var ToPropertyDescriptor = require('./ToPropertyDescriptor');
var Type = require('./Type');

// https://ecma-international.org/ecma-262/6.0/#sec-ordinarygetownproperty

module.exports = function OrdinaryGetOwnProperty(O, P) {
  if (Type(O) !== 'Object') {
    throw new $TypeError('Assertion failed: O must be an Object');
  }
  if (!IsPropertyKey(P)) {
    throw new $TypeError('Assertion failed: P must be a Property Key');
  }
  if (!has(O, P)) {
    return void 0;
  }
  if (!$gOPD) {
    // ES3 / IE 8 fallback
    var arrayLength = IsArray(O) && P === 'length';
    var regexLastIndex = IsRegExp(O) && P === 'lastIndex';
    return {
      '[[Configurable]]': !(arrayLength || regexLastIndex),
      '[[Enumerable]]': $isEnumerable(O, P),
      '[[Value]]': O[P],
      '[[Writable]]': true
    };
  }
  return ToPropertyDescriptor($gOPD(O, P));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJGdPUEQiLCIkVHlwZUVycm9yIiwiY2FsbEJvdW5kIiwiJGlzRW51bWVyYWJsZSIsImhhcyIsIklzQXJyYXkiLCJJc1Byb3BlcnR5S2V5IiwiSXNSZWdFeHAiLCJUb1Byb3BlcnR5RGVzY3JpcHRvciIsIlR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiT3JkaW5hcnlHZXRPd25Qcm9wZXJ0eSIsIk8iLCJQIiwiYXJyYXlMZW5ndGgiLCJyZWdleExhc3RJbmRleCJdLCJzb3VyY2VzIjpbIk9yZGluYXJ5R2V0T3duUHJvcGVydHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGdPUEQgPSByZXF1aXJlKCdnb3BkJyk7XG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcblxudmFyICRpc0VudW1lcmFibGUgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUnKTtcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xuXG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBJc1JlZ0V4cCA9IHJlcXVpcmUoJy4vSXNSZWdFeHAnKTtcbnZhciBUb1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vVG9Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vcmRpbmFyeWdldG93bnByb3BlcnR5XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gT3JkaW5hcnlHZXRPd25Qcm9wZXJ0eShPLCBQKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBPIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFAgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHR9XG5cdGlmICghaGFzKE8sIFApKSB7XG5cdFx0cmV0dXJuIHZvaWQgMDtcblx0fVxuXHRpZiAoISRnT1BEKSB7XG5cdFx0Ly8gRVMzIC8gSUUgOCBmYWxsYmFja1xuXHRcdHZhciBhcnJheUxlbmd0aCA9IElzQXJyYXkoTykgJiYgUCA9PT0gJ2xlbmd0aCc7XG5cdFx0dmFyIHJlZ2V4TGFzdEluZGV4ID0gSXNSZWdFeHAoTykgJiYgUCA9PT0gJ2xhc3RJbmRleCc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogIShhcnJheUxlbmd0aCB8fCByZWdleExhc3RJbmRleCksXG5cdFx0XHQnW1tFbnVtZXJhYmxlXV0nOiAkaXNFbnVtZXJhYmxlKE8sIFApLFxuXHRcdFx0J1tbVmFsdWVdXSc6IE9bUF0sXG5cdFx0XHQnW1tXcml0YWJsZV1dJzogdHJ1ZVxuXHRcdH07XG5cdH1cblx0cmV0dXJuIFRvUHJvcGVydHlEZXNjcmlwdG9yKCRnT1BEKE8sIFApKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRTNDLElBQUlDLEtBQUssR0FBR0QsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUMzQixJQUFJRSxVQUFVLEdBQUdILFlBQVksQ0FBQyxhQUFhLENBQUM7QUFFNUMsSUFBSUksU0FBUyxHQUFHSCxPQUFPLENBQUMscUJBQXFCLENBQUM7QUFFOUMsSUFBSUksYUFBYSxHQUFHRCxTQUFTLENBQUMsdUNBQXVDLENBQUM7QUFFdEUsSUFBSUUsR0FBRyxHQUFHTCxPQUFPLENBQUMsS0FBSyxDQUFDO0FBRXhCLElBQUlNLE9BQU8sR0FBR04sT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNsQyxJQUFJTyxhQUFhLEdBQUdQLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUM5QyxJQUFJUSxRQUFRLEdBQUdSLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDcEMsSUFBSVMsb0JBQW9CLEdBQUdULE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztBQUM1RCxJQUFJVSxJQUFJLEdBQUdWLE9BQU8sQ0FBQyxRQUFRLENBQUM7O0FBRTVCOztBQUVBVyxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxzQkFBc0JBLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ3RELElBQUlMLElBQUksQ0FBQ0ksQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO0lBQ3pCLE1BQU0sSUFBSVosVUFBVSxDQUFDLHVDQUF1QyxDQUFDO0VBQzlEO0VBQ0EsSUFBSSxDQUFDSyxhQUFhLENBQUNRLENBQUMsQ0FBQyxFQUFFO0lBQ3RCLE1BQU0sSUFBSWIsVUFBVSxDQUFDLDRDQUE0QyxDQUFDO0VBQ25FO0VBQ0EsSUFBSSxDQUFDRyxHQUFHLENBQUNTLENBQUMsRUFBRUMsQ0FBQyxDQUFDLEVBQUU7SUFDZixPQUFPLEtBQUssQ0FBQztFQUNkO0VBQ0EsSUFBSSxDQUFDZCxLQUFLLEVBQUU7SUFDWDtJQUNBLElBQUllLFdBQVcsR0FBR1YsT0FBTyxDQUFDUSxDQUFDLENBQUMsSUFBSUMsQ0FBQyxLQUFLLFFBQVE7SUFDOUMsSUFBSUUsY0FBYyxHQUFHVCxRQUFRLENBQUNNLENBQUMsQ0FBQyxJQUFJQyxDQUFDLEtBQUssV0FBVztJQUNyRCxPQUFPO01BQ04sa0JBQWtCLEVBQUUsRUFBRUMsV0FBVyxJQUFJQyxjQUFjLENBQUM7TUFDcEQsZ0JBQWdCLEVBQUViLGFBQWEsQ0FBQ1UsQ0FBQyxFQUFFQyxDQUFDLENBQUM7TUFDckMsV0FBVyxFQUFFRCxDQUFDLENBQUNDLENBQUMsQ0FBQztNQUNqQixjQUFjLEVBQUU7SUFDakIsQ0FBQztFQUNGO0VBQ0EsT0FBT04sb0JBQW9CLENBQUNSLEtBQUssQ0FBQ2EsQ0FBQyxFQUFFQyxDQUFDLENBQUMsQ0FBQztBQUN6QyxDQUFDIn0=