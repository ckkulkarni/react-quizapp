ba749adec4f3e0296ddf7cc723894203
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _material = require("@mui/material");
var _reactRouter = require("react-router");
var _formik = require("formik");
var _NavigateNext = _interopRequireDefault(require("@mui/icons-material/NavigateNext"));
var _App = require("./../../App");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Question2 = () => {
  const navigation = (0, _reactRouter.useNavigate)();
  const {
    score,
    setScore,
    trackScore,
    setTracker,
    selectedLanguage
  } = (0, _react.useContext)(_App.QuizContext);
  let questionText = "";
  let answersObject = [];
  if (selectedLanguage === "ReactJS") {
    questionText = "Which of these packages that are used to install React and create React Apps?";
    answersObject = ["JVM", "npm -- Node Package Manager"];
  } else if (selectedLanguage === "React Native") {
    questionText = "Is it true that React Native can only be used to create Android Apps?";
    answersObject = ["Yes", "No"];
  } else if (selectedLanguage === "Java") {
    questionText = "Arrays should always contain the same type of elements. True or false?";
    answersObject = ["True", "False"];
  }
  const [isSubmitted, setIsSubmitted] = (0, _react.useState)(false);
  const formik = (0, _formik.useFormik)({
    initialValues: {
      answer: ""
    },
    onSubmit: values => {
      if (selectedLanguage === "ReactJS") {
        if (values.answer === answersObject[1] && score < 2) {
          setScore(previous => previous + 1);
        }
      } else if (selectedLanguage === "React Native") {
        if (values.answer === answersObject[1] && score < 2) {
          setScore(previous => previous + 1);
        }
      } else if (selectedLanguage === "Java") {
        if (values.answer === answersObject[0] && score < 2) {
          setScore(previous => previous + 1);
        }
      }
      setIsSubmitted(true);
    }
  });
  const handleNavigation = () => {
    navigation("/question3");
  };
  const handleQuestionNavigation = index => {
    navigation(`/question${index}`);
  };
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_material.Box, {
    sx: {
      display: "flex",
      gap: 1,
      flexDirection: "column",
      alignItems: "flex-end",
      p: 1,
      mt: "25vh",
      mr: 2
    }
  }, [1, 2, 3, 4, 5].map(number => /*#__PURE__*/React.createElement(_material.IconButton, {
    onClick: () => handleQuestionNavigation(number),
    sx: {
      border: 1,
      borderColor: "divider"
    }
  }, number))), /*#__PURE__*/React.createElement("div", {
    className: "quiz-container"
  }, /*#__PURE__*/React.createElement(_material.Box, {
    sx: {
      display: "flex",
      justifyContent: "center",
      alignItems: "flex-start",
      flexDirection: "column",
      gap: 2
    }
  }, /*#__PURE__*/React.createElement(_material.Box, {
    sx: {
      display: "flex",
      flexDirection: "column",
      gap: 1
    }
  }, trackScore && /*#__PURE__*/React.createElement(_material.Typography, null, "Score: ", score), /*#__PURE__*/React.createElement(_material.Button, {
    variant: "outlined",
    onClick: () => {
      setTracker(!trackScore);
    }
  }, trackScore ? "Disable Score Tracking" : "Enable Score Tracking")), /*#__PURE__*/React.createElement(_material.Box, null, /*#__PURE__*/React.createElement(_material.Typography, null, questionText)), /*#__PURE__*/React.createElement(_material.RadioGroup, {
    name: "answer",
    value: formik.values.answer,
    onChange: formik.handleChange
  }, answersObject.map(option => /*#__PURE__*/React.createElement(_material.FormControlLabel, {
    key: option,
    value: option,
    control: /*#__PURE__*/React.createElement(_material.Radio, null),
    label: option,
    disabled: isSubmitted
  }))), /*#__PURE__*/React.createElement(_material.Box, {
    sx: {
      display: "flex"
    }
  }, /*#__PURE__*/React.createElement(_material.Button, {
    variant: "contained",
    onClick: e => formik.handleSubmit(),
    disabled: isSubmitted
  }, "Submit"), /*#__PURE__*/React.createElement(_material.IconButton, {
    onClick: handleNavigation
  }, /*#__PURE__*/React.createElement(_NavigateNext.default, null))))));
};
var _default = Question2;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,