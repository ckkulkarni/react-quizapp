28d25d3a111b7f2bbdd351045edb127a
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("text-encoding");
require("@testing-library/jest-dom/extend-expect");
var _reactRouterDom = require("react-router-dom");
var _App = require("../../../App");
var _Home = _interopRequireDefault(require("./../../homeandsubmit/Home"));
var _SubmitScreen = _interopRequireDefault(require("../../homeandsubmit/SubmitScreen"));
var _reactDnd = require("react-dnd");
var _reactDndHtml5Backend = require("react-dnd-html5-backend");
require("jest-canvas-mock");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/submitscreen.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    document.body.innerHTML = "";
  });
  test("User submits their quiz and sees their results", ({
    given,
    when,
    then,
    and
  }) => {
    const mockQuizContext = {
      score: 5,
      setScore: jest.fn(),
      name: "chandu",
      setName: jest.fn(),
      age: 25,
      setAge: jest.fn(),
      email: "chandra@chandu.com",
      setMail: jest.fn(),
      phoneNumber: "1234567890",
      setPhone: jest.fn(),
      selectedLanguage: "ReactJS",
      setSelector: jest.fn(),
      trackScore: false,
      setTracker: jest.fn()
    };
    given("the user has completed the quiz is on the Submit Screen", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactDnd.DndProvider, {
        backend: _reactDndHtml5Backend.HTML5Backend,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_App.QuizContext.Provider, {
          value: mockQuizContext,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.BrowserRouter, {
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactRouterDom.Routes, {
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
                path: "/",
                element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SubmitScreen.default, {})
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactRouterDom.Route, {
                element: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Home.default, {})
              })]
            })
          })
        })
      }));
      expect(screen).toBeTruthy();
      const container = screen.getByTestId("submission-container");
      expect(container).toBeTruthy();
    });
    when("the user should see the details they entered in the home screen", () => {
      expect(_react2.screen.getByText("chandu")).toBeTruthy();
      expect(_react2.screen.getByText("chandra@chandu.com")).toBeTruthy();
      expect(_react2.screen.getByText("1234567890")).toBeTruthy();
      expect(_react2.screen.getByText("ReactJS")).toBeTruthy();
      expect(_react2.screen.getByText("5/8")).toBeTruthy();
      expect(_react2.screen.getByText("25")).toBeTruthy();
    });
    and("the user should see their score in a pie chart", async () => {
      await (0, _react2.waitFor)(() => {
        expect(_react2.screen.getByTestId("submitscreen-piechart")).toBeInTheDocument();
      });
    });
    and("the user should see a button to re-enter their details", () => {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0Um91dGVyRG9tIiwiX0FwcCIsIl9Ib21lIiwiX1N1Ym1pdFNjcmVlbiIsIl9yZWFjdERuZCIsIl9yZWFjdERuZEh0bWw1QmFja2VuZCIsIl9qc3hSdW50aW1lIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJmZWF0dXJlIiwibG9hZEZlYXR1cmUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImJlZm9yZUVhY2giLCJkb2N1bWVudCIsImJvZHkiLCJpbm5lckhUTUwiLCJnaXZlbiIsIndoZW4iLCJ0aGVuIiwiYW5kIiwibW9ja1F1aXpDb250ZXh0Iiwic2NvcmUiLCJzZXRTY29yZSIsImplc3QiLCJmbiIsIm5hbWUiLCJzZXROYW1lIiwiYWdlIiwic2V0QWdlIiwiZW1haWwiLCJzZXRNYWlsIiwicGhvbmVOdW1iZXIiLCJzZXRQaG9uZSIsInNlbGVjdGVkTGFuZ3VhZ2UiLCJzZXRTZWxlY3RvciIsInRyYWNrU2NvcmUiLCJzZXRUcmFja2VyIiwic2NyZWVuIiwicmVuZGVyIiwianN4IiwiRG5kUHJvdmlkZXIiLCJiYWNrZW5kIiwiSFRNTDVCYWNrZW5kIiwiY2hpbGRyZW4iLCJRdWl6Q29udGV4dCIsIlByb3ZpZGVyIiwidmFsdWUiLCJCcm93c2VyUm91dGVyIiwianN4cyIsIlJvdXRlcyIsIlJvdXRlIiwicGF0aCIsImVsZW1lbnQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiY29udGFpbmVyIiwiZ2V0QnlUZXN0SWQiLCJnZXRCeVRleHQiLCJ3YWl0Rm9yIiwidG9CZUluVGhlRG9jdW1lbnQiXSwic291cmNlcyI6WyJzdWJtaXRzY3JlZW4uc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgZGVmaW5lRmVhdHVyZSwgbG9hZEZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcclxuaW1wb3J0IFwidGV4dC1lbmNvZGluZ1wiO1xyXG5pbXBvcnQgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tL2V4dGVuZC1leHBlY3RcIjtcclxuaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlLCBSb3V0ZXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgeyBRdWl6Q29udGV4dCB9IGZyb20gXCIuLi8uLi8uLi9BcHBcIjtcclxuaW1wb3J0IEhvbWUgZnJvbSBcIi4vLi4vLi4vaG9tZWFuZHN1Ym1pdC9Ib21lXCI7XHJcbmltcG9ydCBRdWVzdGlvbjUgZnJvbSBcIi4vLi4vLi4vcXVlc3Rpb25zL1F1ZXN0aW9uNVwiO1xyXG5pbXBvcnQgU3VibWl0U2NyZWVuIGZyb20gXCIuLi8uLi9ob21lYW5kc3VibWl0L1N1Ym1pdFNjcmVlblwiO1xyXG5pbXBvcnQgeyBEbmRQcm92aWRlciB9IGZyb20gXCJyZWFjdC1kbmRcIjtcclxuaW1wb3J0IHsgSFRNTDVCYWNrZW5kIH0gZnJvbSBcInJlYWN0LWRuZC1odG1sNS1iYWNrZW5kXCI7XHJcbmltcG9ydCBcImplc3QtY2FudmFzLW1vY2tcIjtcclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKFwic3JjL2NvbXBvbmVudHMvZmVhdHVyZXMvc3VibWl0c2NyZWVuLmZlYXR1cmVcIik7XHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gXCJcIjtcclxuICB9KTtcclxuICB0ZXN0KFwiVXNlciBzdWJtaXRzIHRoZWlyIHF1aXogYW5kIHNlZXMgdGhlaXIgcmVzdWx0c1wiLCAoe1xyXG4gICAgZ2l2ZW4sXHJcbiAgICB3aGVuLFxyXG4gICAgdGhlbixcclxuICAgIGFuZCxcclxuICB9KSA9PiB7XHJcbiAgICBjb25zdCBtb2NrUXVpekNvbnRleHQgPSB7XHJcbiAgICAgIHNjb3JlOiA1LFxyXG4gICAgICBzZXRTY29yZTogamVzdC5mbigpLFxyXG4gICAgICBuYW1lOiBcImNoYW5kdVwiLFxyXG4gICAgICBzZXROYW1lOiBqZXN0LmZuKCksXHJcbiAgICAgIGFnZTogMjUsXHJcbiAgICAgIHNldEFnZTogamVzdC5mbigpLFxyXG4gICAgICBlbWFpbDogXCJjaGFuZHJhQGNoYW5kdS5jb21cIixcclxuICAgICAgc2V0TWFpbDogamVzdC5mbigpLFxyXG4gICAgICBwaG9uZU51bWJlcjogXCIxMjM0NTY3ODkwXCIsXHJcbiAgICAgIHNldFBob25lOiBqZXN0LmZuKCksXHJcbiAgICAgIHNlbGVjdGVkTGFuZ3VhZ2U6IFwiUmVhY3RKU1wiLFxyXG4gICAgICBzZXRTZWxlY3RvcjogamVzdC5mbigpLFxyXG4gICAgICB0cmFja1Njb3JlOiBmYWxzZSxcclxuICAgICAgc2V0VHJhY2tlcjogamVzdC5mbigpLFxyXG4gICAgfTtcclxuICAgIGdpdmVuKFwidGhlIHVzZXIgaGFzIGNvbXBsZXRlZCB0aGUgcXVpeiBpcyBvbiB0aGUgU3VibWl0IFNjcmVlblwiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgICA8RG5kUHJvdmlkZXIgYmFja2VuZD17SFRNTDVCYWNrZW5kfT5cclxuICAgICAgICAgIDxRdWl6Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja1F1aXpDb250ZXh0fT5cclxuICAgICAgICAgICAgPFJvdXRlcj5cclxuICAgICAgICAgICAgICA8Um91dGVzPlxyXG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgZWxlbWVudD17PFN1Ym1pdFNjcmVlbiAvPn0gLz5cclxuICAgICAgICAgICAgICAgIDxSb3V0ZSBlbGVtZW50PXs8SG9tZSAvPn0gLz5cclxuICAgICAgICAgICAgICA8L1JvdXRlcz5cclxuICAgICAgICAgICAgPC9Sb3V0ZXI+XHJcbiAgICAgICAgICA8L1F1aXpDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgICAgIDwvRG5kUHJvdmlkZXI+XHJcbiAgICAgICk7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVUcnV0aHkoKTtcclxuICAgICAgY29uc3QgY29udGFpbmVyID0gc2NyZWVuLmdldEJ5VGVzdElkKFwic3VibWlzc2lvbi1jb250YWluZXJcIik7XHJcbiAgICAgIGV4cGVjdChjb250YWluZXIpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgd2hlbihcclxuICAgICAgXCJ0aGUgdXNlciBzaG91bGQgc2VlIHRoZSBkZXRhaWxzIHRoZXkgZW50ZXJlZCBpbiB0aGUgaG9tZSBzY3JlZW5cIixcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiY2hhbmR1XCIpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCJjaGFuZHJhQGNoYW5kdS5jb21cIikpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcIjEyMzQ1Njc4OTBcIikpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcIlJlYWN0SlNcIikpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcIjUvOFwiKSkudG9CZVRydXRoeSgpO1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiMjVcIikpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICAgIGFuZChcInRoZSB1c2VyIHNob3VsZCBzZWUgdGhlaXIgc2NvcmUgaW4gYSBwaWUgY2hhcnRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKFwic3VibWl0c2NyZWVuLXBpZWNoYXJ0XCIpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgYW5kKFwidGhlIHVzZXIgc2hvdWxkIHNlZSBhIGJ1dHRvbiB0byByZS1lbnRlciB0aGVpciBkZXRhaWxzXCIsICgpID0+IHt9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFDQUEsT0FBQTtBQUNBQSxPQUFBO0FBQ0EsSUFBQUcsZUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksSUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssS0FBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQU0sYUFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU8sU0FBQSxHQUFBUCxPQUFBO0FBQ0EsSUFBQVEscUJBQUEsR0FBQVIsT0FBQTtBQUNBQSxPQUFBO0FBQTBCLElBQUFTLFdBQUEsR0FBQVQsT0FBQTtBQUFBLFNBQUFELHVCQUFBVyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBQzFCLE1BQU1HLE9BQU8sR0FBRyxJQUFBQyx5QkFBVyxFQUFDLDhDQUE4QyxDQUFDO0FBQzNFLElBQUFDLDJCQUFhLEVBQUNGLE9BQU8sRUFBR0csSUFBSSxJQUFLO0VBQy9CQyxVQUFVLENBQUMsTUFBTTtJQUNmQyxRQUFRLENBQUNDLElBQUksQ0FBQ0MsU0FBUyxHQUFHLEVBQUU7RUFDOUIsQ0FBQyxDQUFDO0VBQ0ZKLElBQUksQ0FBQyxnREFBZ0QsRUFBRSxDQUFDO0lBQ3RESyxLQUFLO0lB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