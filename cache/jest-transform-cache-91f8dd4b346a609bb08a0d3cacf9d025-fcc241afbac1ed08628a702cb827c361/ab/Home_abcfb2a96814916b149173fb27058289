8686a2f050ee3a134ec143758a9bc7e2
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _material = require("@mui/material");
var _formik = require("formik");
var _react = require("react");
var _App = require("../../App");
var Yup = _interopRequireWildcard(require("yup"));
var _reactRouter = require("react-router");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Home = () => {
  const navigation = (0, _reactRouter.useNavigate)();
  const {
    setName,
    setMail,
    setAge,
    setTracker,
    setPhone,
    setSelector
  } = (0, _react.useContext)(_App.QuizContext);
  const formik = (0, _formik.useFormik)({
    initialValues: {
      email: "",
      name: "",
      phone: "",
      selectedLanguage: "",
      age: 0,
      trackScore: false
    },
    validationSchema: Yup.object({
      email: Yup.string().email("Invalid email address").required("Required"),
      name: Yup.string().required("Required"),
      phone: Yup.string().matches(/^\d{10}$/, "Invalid phone number").required("Required"),
      selectedLanguage: Yup.string().required("Required"),
      age: Yup.number().positive("Invalid age").required("Required")
    }),
    onSubmit: values => {
      setName(values.name);
      setMail(values.email);
      setPhone(values.phone);
      setAge(values.age);
      setTracker(values.trackScore);
      setSelector(values.selectedLanguage);
      alert("Details Submitted. Starting Quiz...");
      navigation("/question1");
    }
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: "homeContainer",
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("form", {
      onSubmit: formik.handleSubmit,
      className: "baseForm",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.TextField, {
        id: "name",
        label: "Enter your name: ",
        name: "name",
        type: "text",
        variant: "outlined",
        onChange: formik.handleChange,
        value: formik.values.name,
        error: formik.touched.name && Boolean(formik.errors.name),
        helperText: formik.touched.name && formik.errors.name
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.TextField, {
        id: "mail",
        label: "Enter MailID: ",
        name: "email",
        type: "email",
        variant: "outlined",
        onChange: formik.handleChange,
        value: formik.values.email,
        error: formik.touched.email && Boolean(formik.errors.email),
        helperText: formik.touched.email && formik.errors.email
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.TextField, {
        id: "age",
        label: "Enter your age: ",
        name: "age",
        type: "number",
        variant: "outlined",
        onChange: formik.handleChange,
        value: formik.values.age,
        error: formik.touched.age && Boolean(formik.errors.age),
        helperText: formik.touched.age && formik.errors.age
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.TextField, {
        id: "phone",
        label: "Enter your Phone Number: ",
        name: "phone",
        type: "text",
        variant: "outlined",
        onChange: formik.handleChange,
        value: formik.values.phone,
        error: formik.touched.phone && Boolean(formik.errors.phone),
        helperText: formik.touched.phone && formik.errors.phone
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("em", {
        children: "What language would you like the quiz to be in?"
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.RadioGroup, {
        "aria-labelledby": "demo-radio-buttons-group-label",
        defaultValue: "React JS",
        name: "selectedLanguage",
        onChange: formik.handleChange,
        value: formik.values.selectedLanguage,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.FormControlLabel, {
          value: "ReactJS",
          control: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Radio, {}),
          label: "ReactJS"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.FormControlLabel, {
          value: "React Native",
          control: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Radio, {}),
          label: "React Native"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.FormControlLabel, {
          value: "Java",
          control: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Radio, {}),
          label: "Java"
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("em", {
        className: "trackScore",
        children: "Would you like your score to be tracked?"
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.RadioGroup, {
        "aria-labelledby": "demo-radio-buttons-group-label",
        defaultValue: "false",
        name: "trackScore",
        onChange: formik.handleChange,
        value: formik.values.trackScore,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.FormControlLabel, {
          value: "True",
          control: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Radio, {}),
          label: "Yes"
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.FormControlLabel, {
          value: "false",
          control: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Radio, {}),
          label: "No"
        })]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Button, {
        type: "submit",
        variant: "contained",
        disabled: !formik.isValid || !formik.dirty,
        children: "Submit"
      })]
    })
  });
};
var _default = Home;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,