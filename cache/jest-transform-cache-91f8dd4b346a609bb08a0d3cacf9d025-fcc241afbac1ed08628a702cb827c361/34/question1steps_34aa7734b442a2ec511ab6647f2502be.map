{"version":3,"names":["_react","_interopRequireDefault","require","_jestCucumber","_react2","_reactRouterDom","_Question","_Question2","_jsxRuntime","obj","__esModule","default","feature","loadFeature","defineFeature","test","given","when","and","then","alertMock","jest","spyOn","window","mockImplementation","screen","render","jsx","BrowserRouter","children","jsxs","Routes","Route","path","element","expect","toBeTruthy"],"sources":["question1.steps.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { defineFeature, loadFeature } from \"jest-cucumber\";\r\nimport { render, screen, fireEvent, waitFor } from \"@testing-library/react\";\r\nimport \"text-encoding\";\r\nimport Home from \"./../../homeandsubmit/Home\";\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport Question1 from \"../../questions/Question1\";\r\nimport Question2 from \"../../questions/Question2\";\r\nconst feature = loadFeature(\"src/components/features/question1.feature\");\r\ndefineFeature(feature, (test) => {\r\n  test(\"User answers first quiz question correctly\", ({\r\n    given,\r\n    when,\r\n    and,\r\n    then,\r\n  }) => {\r\n    const alertMock = jest.spyOn(window, \"alert\").mockImplementation(() => {});\r\n    given(\"I am on the Question 1 screen\", () => {\r\n      const screen = render(\r\n        <Router>\r\n          <Routes>\r\n            <Route path=\"/question1\" element={<Question1 />} />\r\n            <Route path=\"/question2\" element={<Question2 />} />\r\n          </Routes>\r\n        </Router>\r\n      );\r\n      expect(screen).toBeTruthy();\r\n    });\r\n    when(\r\n      'I select the correct answer and press \"Answer\", then the score should update',\r\n      () => {}\r\n    );\r\n    when(\r\n      \"I select any of the numbers above the questions, then it should navigate to that respective question screen\",\r\n      () => {}\r\n    );\r\n    then(\r\n      'I navigate to the next question when I click on the \"Next Question\" button',\r\n      () => {}\r\n    );\r\n  });\r\n});\r\n"],"mappings":";;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,aAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AACAA,OAAA;AAEAA,OAAA;AACA,IAAAG,eAAA,GAAAH,OAAA;AACA,IAAAI,SAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,UAAA,GAAAN,sBAAA,CAAAC,OAAA;AAAkD,IAAAM,WAAA,GAAAN,OAAA;AAAA,SAAAD,uBAAAQ,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAClD,MAAMG,OAAO,GAAG,IAAAC,yBAAW,EAAC,2CAA2C,CAAC;AACxE,IAAAC,2BAAa,EAACF,OAAO,EAAGG,IAAI,IAAK;EAC/BA,IAAI,CAAC,4CAA4C,EAAE,CAAC;IAClDC,KAAK;IACLC,IAAI;IACJC,GAAG;IACHC;EACF,CAAC,KAAK;IACJ,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,MAAM,EAAE,OAAO,CAAC,CAACC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1ER,KAAK,CAAC,+BAA+B,EAAE,MAAM;MAC3C,MAAMS,MAAM,GAAG,IAAAC,cAAM,gBACnB,IAAAlB,WAAA,CAAAmB,GAAA,EAACtB,eAAA,CAAAuB,aAAM;QAAAC,QAAA,eACL,IAAArB,WAAA,CAAAsB,IAAA,EAACzB,eAAA,CAAA0B,MAAM;UAAAF,QAAA,gBACL,IAAArB,WAAA,CAAAmB,GAAA,EAACtB,eAAA,CAAA2B,KAAK;YAACC,IAAI,EAAC,YAAY;YAACC,OAAO,eAAE,IAAA1B,WAAA,CAAAmB,GAAA,EAACrB,SAAA,CAAAK,OAAS;UAAI,EAAG,eACnD,IAAAH,WAAA,CAAAmB,GAAA,EAACtB,eAAA,CAAA2B,KAAK;YAACC,IAAI,EAAC,YAAY;YAACC,OAAO,eAAE,IAAA1B,WAAA,CAAAmB,GAAA,EAACpB,UAAA,CAAAI,OAAS;UAAI,EAAG;QAAA;MAC5C,EACF,CACV;MACDwB,MAAM,CAACV,MAAM,CAAC,CAACW,UAAU,EAAE;IAC7B,CAAC,CAAC;IACFnB,IAAI,CACF,8EAA8E,EAC9E,MAAM,CAAC,CAAC,CACT;IACDA,IAAI,CACF,6GAA6G,EAC7G,MAAM,CAAC,CAAC,CACT;IACDE,IAAI,CACF,4EAA4E,EAC5E,MAAM,CAAC,CAAC,CACT;EACH,CAAC,CAAC;AACJ,CAAC,CAAC"}