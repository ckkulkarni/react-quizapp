f43faedcc689ca59d2c0464d8394aec8
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $TypeError = GetIntrinsic('%TypeError%');
var Call = require('./Call');
var CompletionRecord = require('./CompletionRecord');
var GetMethod = require('./GetMethod');
var IsCallable = require('./IsCallable');
var Type = require('./Type');

// https://ecma-international.org/ecma-262/6.0/#sec-iteratorclose

module.exports = function IteratorClose(iterator, completion) {
  if (Type(iterator) !== 'Object') {
    throw new $TypeError('Assertion failed: Type(iterator) is not Object');
  }
  if (!IsCallable(completion) && !(completion instanceof CompletionRecord)) {
    throw new $TypeError('Assertion failed: completion is not a thunk representing a Completion Record, nor a Completion Record instance');
  }
  var completionThunk = completion instanceof CompletionRecord ? function () {
    return completion['?']();
  } : completion;
  var iteratorReturn = GetMethod(iterator, 'return');
  if (typeof iteratorReturn === 'undefined') {
    return completionThunk();
  }
  var completionRecord;
  try {
    var innerResult = Call(iteratorReturn, iterator, []);
  } catch (e) {
    // if we hit here, then "e" is the innerResult completion that needs re-throwing

    // if the completion is of type "throw", this will throw.
    completionThunk();
    completionThunk = null; // ensure it's not called twice.

    // if not, then return the innerResult completion
    throw e;
  }
  completionRecord = completionThunk(); // if innerResult worked, then throw if the completion does
  completionThunk = null; // ensure it's not called twice.

  if (Type(innerResult) !== 'Object') {
    throw new $TypeError('iterator .return must return an object');
  }
  return completionRecord;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsIkNhbGwiLCJDb21wbGV0aW9uUmVjb3JkIiwiR2V0TWV0aG9kIiwiSXNDYWxsYWJsZSIsIlR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiSXRlcmF0b3JDbG9zZSIsIml0ZXJhdG9yIiwiY29tcGxldGlvbiIsImNvbXBsZXRpb25UaHVuayIsIml0ZXJhdG9yUmV0dXJuIiwiY29tcGxldGlvblJlY29yZCIsImlubmVyUmVzdWx0IiwiZSJdLCJzb3VyY2VzIjpbIkl0ZXJhdG9yQ2xvc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIENhbGwgPSByZXF1aXJlKCcuL0NhbGwnKTtcbnZhciBDb21wbGV0aW9uUmVjb3JkID0gcmVxdWlyZSgnLi9Db21wbGV0aW9uUmVjb3JkJyk7XG52YXIgR2V0TWV0aG9kID0gcmVxdWlyZSgnLi9HZXRNZXRob2QnKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXRlcmF0b3JjbG9zZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pIHtcblx0aWYgKFR5cGUoaXRlcmF0b3IpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKGl0ZXJhdG9yKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc0NhbGxhYmxlKGNvbXBsZXRpb24pICYmICEoY29tcGxldGlvbiBpbnN0YW5jZW9mIENvbXBsZXRpb25SZWNvcmQpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGNvbXBsZXRpb24gaXMgbm90IGEgdGh1bmsgcmVwcmVzZW50aW5nIGEgQ29tcGxldGlvbiBSZWNvcmQsIG5vciBhIENvbXBsZXRpb24gUmVjb3JkIGluc3RhbmNlJyk7XG5cdH1cblx0dmFyIGNvbXBsZXRpb25UaHVuayA9IGNvbXBsZXRpb24gaW5zdGFuY2VvZiBDb21wbGV0aW9uUmVjb3JkID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tcGxldGlvblsnPyddKCk7IH0gOiBjb21wbGV0aW9uO1xuXG5cdHZhciBpdGVyYXRvclJldHVybiA9IEdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuXG5cdGlmICh0eXBlb2YgaXRlcmF0b3JSZXR1cm4gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIGNvbXBsZXRpb25UaHVuaygpO1xuXHR9XG5cblx0dmFyIGNvbXBsZXRpb25SZWNvcmQ7XG5cdHRyeSB7XG5cdFx0dmFyIGlubmVyUmVzdWx0ID0gQ2FsbChpdGVyYXRvclJldHVybiwgaXRlcmF0b3IsIFtdKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIGlmIHdlIGhpdCBoZXJlLCB0aGVuIFwiZVwiIGlzIHRoZSBpbm5lclJlc3VsdCBjb21wbGV0aW9uIHRoYXQgbmVlZHMgcmUtdGhyb3dpbmdcblxuXHRcdC8vIGlmIHRoZSBjb21wbGV0aW9uIGlzIG9mIHR5cGUgXCJ0aHJvd1wiLCB0aGlzIHdpbGwgdGhyb3cuXG5cdFx0Y29tcGxldGlvblRodW5rKCk7XG5cdFx0Y29tcGxldGlvblRodW5rID0gbnVsbDsgLy8gZW5zdXJlIGl0J3Mgbm90IGNhbGxlZCB0d2ljZS5cblxuXHRcdC8vIGlmIG5vdCwgdGhlbiByZXR1cm4gdGhlIGlubmVyUmVzdWx0IGNvbXBsZXRpb25cblx0XHR0aHJvdyBlO1xuXHR9XG5cdGNvbXBsZXRpb25SZWNvcmQgPSBjb21wbGV0aW9uVGh1bmsoKTsgLy8gaWYgaW5uZXJSZXN1bHQgd29ya2VkLCB0aGVuIHRocm93IGlmIHRoZSBjb21wbGV0aW9uIGRvZXNcblx0Y29tcGxldGlvblRodW5rID0gbnVsbDsgLy8gZW5zdXJlIGl0J3Mgbm90IGNhbGxlZCB0d2ljZS5cblxuXHRpZiAoVHlwZShpbm5lclJlc3VsdCkgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2l0ZXJhdG9yIC5yZXR1cm4gbXVzdCByZXR1cm4gYW4gb2JqZWN0Jyk7XG5cdH1cblxuXHRyZXR1cm4gY29tcGxldGlvblJlY29yZDtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsWUFBWSxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRTNDLElBQUlDLFVBQVUsR0FBR0YsWUFBWSxDQUFDLGFBQWEsQ0FBQztBQUU1QyxJQUFJRyxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDNUIsSUFBSUcsZ0JBQWdCLEdBQUdILE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUNwRCxJQUFJSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDdEMsSUFBSUssVUFBVSxHQUFHTCxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3hDLElBQUlNLElBQUksR0FBR04sT0FBTyxDQUFDLFFBQVEsQ0FBQzs7QUFFNUI7O0FBRUFPLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLGFBQWFBLENBQUNDLFFBQVEsRUFBRUMsVUFBVSxFQUFFO0VBQzdELElBQUlMLElBQUksQ0FBQ0ksUUFBUSxDQUFDLEtBQUssUUFBUSxFQUFFO0lBQ2hDLE1BQU0sSUFBSVQsVUFBVSxDQUFDLGdEQUFnRCxDQUFDO0VBQ3ZFO0VBQ0EsSUFBSSxDQUFDSSxVQUFVLENBQUNNLFVBQVUsQ0FBQyxJQUFJLEVBQUVBLFVBQVUsWUFBWVIsZ0JBQWdCLENBQUMsRUFBRTtJQUN6RSxNQUFNLElBQUlGLFVBQVUsQ0FBQyxnSEFBZ0gsQ0FBQztFQUN2STtFQUNBLElBQUlXLGVBQWUsR0FBR0QsVUFBVSxZQUFZUixnQkFBZ0IsR0FBRyxZQUFZO0lBQUUsT0FBT1EsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0VBQUUsQ0FBQyxHQUFHQSxVQUFVO0VBRXJILElBQUlFLGNBQWMsR0FBR1QsU0FBUyxDQUFDTSxRQUFRLEVBQUUsUUFBUSxDQUFDO0VBRWxELElBQUksT0FBT0csY0FBYyxLQUFLLFdBQVcsRUFBRTtJQUMxQyxPQUFPRCxlQUFlLEVBQUU7RUFDekI7RUFFQSxJQUFJRSxnQkFBZ0I7RUFDcEIsSUFBSTtJQUNILElBQUlDLFdBQVcsR0FBR2IsSUFBSSxDQUFDVyxjQUFjLEVBQUVILFFBQVEsRUFBRSxFQUFFLENBQUM7RUFDckQsQ0FBQyxDQUFDLE9BQU9NLENBQUMsRUFBRTtJQUNYOztJQUVBO0lBQ0FKLGVBQWUsRUFBRTtJQUNqQkEsZUFBZSxHQUFHLElBQUksQ0FBQyxDQUFDOztJQUV4QjtJQUNBLE1BQU1JLENBQUM7RUFDUjtFQUNBRixnQkFBZ0IsR0FBR0YsZUFBZSxFQUFFLENBQUMsQ0FBQztFQUN0Q0EsZUFBZSxHQUFHLElBQUksQ0FBQyxDQUFDOztFQUV4QixJQUFJTixJQUFJLENBQUNTLFdBQVcsQ0FBQyxLQUFLLFFBQVEsRUFBRTtJQUNuQyxNQUFNLElBQUlkLFVBQVUsQ0FBQyx3Q0FBd0MsQ0FBQztFQUMvRDtFQUVBLE9BQU9hLGdCQUFnQjtBQUN4QixDQUFDIn0=