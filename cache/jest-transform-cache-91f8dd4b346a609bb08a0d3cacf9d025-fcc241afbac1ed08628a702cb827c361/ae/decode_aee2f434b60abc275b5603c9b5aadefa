2c7b764f17a55a818384e3fb4a32e2e1
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTML = exports.determineBranch = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;
var decode_data_html_js_1 = __importDefault(require("./generated/decode-data-html.js"));
exports.htmlDecodeTree = decode_data_html_js_1.default;
var decode_data_xml_js_1 = __importDefault(require("./generated/decode-data-xml.js"));
exports.xmlDecodeTree = decode_data_xml_js_1.default;
var decode_codepoint_js_1 = __importDefault(require("./decode_codepoint.js"));
exports.decodeCodePoint = decode_codepoint_js_1.default;
var decode_codepoint_js_2 = require("./decode_codepoint.js");
Object.defineProperty(exports, "replaceCodePoint", {
  enumerable: true,
  get: function () {
    return decode_codepoint_js_2.replaceCodePoint;
  }
});
Object.defineProperty(exports, "fromCodePoint", {
  enumerable: true,
  get: function () {
    return decode_codepoint_js_2.fromCodePoint;
  }
});
var CharCodes;
(function (CharCodes) {
  CharCodes[CharCodes["NUM"] = 35] = "NUM";
  CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
  CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
  CharCodes[CharCodes["NINE"] = 57] = "NINE";
  CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
  CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
  CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
  /** Bit that needs to be set to convert an upper case ASCII character to lower case */
  CharCodes[CharCodes["To_LOWER_BIT"] = 32] = "To_LOWER_BIT";
})(CharCodes || (CharCodes = {}));
var BinTrieFlags;
(function (BinTrieFlags) {
  BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
  BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
  BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));
function getDecoder(decodeTree) {
  return function decodeHTMLBinary(str, strict) {
    var ret = "";
    var lastIdx = 0;
    var strIdx = 0;
    while ((strIdx = str.indexOf("&", strIdx)) >= 0) {
      ret += str.slice(lastIdx, strIdx);
      lastIdx = strIdx;
      // Skip the "&"
      strIdx += 1;
      // If we have a numeric entity, handle this separately.
      if (str.charCodeAt(strIdx) === CharCodes.NUM) {
        // Skip the leading "&#". For hex entities, also skip the leading "x".
        var start = strIdx + 1;
        var base = 10;
        var cp = str.charCodeAt(start);
        if ((cp | CharCodes.To_LOWER_BIT) === CharCodes.LOWER_X) {
          base = 16;
          strIdx += 1;
          start += 1;
        }
        do cp = str.charCodeAt(++strIdx); while (cp >= CharCodes.ZERO && cp <= CharCodes.NINE || base === 16 && (cp | CharCodes.To_LOWER_BIT) >= CharCodes.LOWER_A && (cp | CharCodes.To_LOWER_BIT) <= CharCodes.LOWER_F);
        if (start !== strIdx) {
          var entity = str.substring(start, strIdx);
          var parsed = parseInt(entity, base);
          if (str.charCodeAt(strIdx) === CharCodes.SEMI) {
            strIdx += 1;
          } else if (strict) {
            continue;
          }
          ret += (0, decode_codepoint_js_1.default)(parsed);
          lastIdx = strIdx;
        }
        continue;
      }
      var resultIdx = 0;
      var excess = 1;
      var treeIdx = 0;
      var current = decodeTree[treeIdx];
      for (; strIdx < str.length; strIdx++, excess++) {
        treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));
        if (treeIdx < 0) break;
        current = decodeTree[treeIdx];
        var masked = current & BinTrieFlags.VALUE_LENGTH;
        // If the branch is a value, store it and continue
        if (masked) {
          // If we have a legacy entity while parsing strictly, just skip the number of bytes
          if (!strict || str.charCodeAt(strIdx) === CharCodes.SEMI) {
            resultIdx = treeIdx;
            excess = 0;
          }
          // The mask is the number of bytes of the value, including the current byte.
          var valueLength = (masked >> 14) - 1;
          if (valueLength === 0) break;
          treeIdx += valueLength;
        }
      }
      if (resultIdx !== 0) {
        var valueLength = (decodeTree[resultIdx] & BinTrieFlags.VALUE_LENGTH) >> 14;
        ret += valueLength === 1 ? String.fromCharCode(decodeTree[resultIdx] & ~BinTrieFlags.VALUE_LENGTH) : valueLength === 2 ? String.fromCharCode(decodeTree[resultIdx + 1]) : String.fromCharCode(decodeTree[resultIdx + 1], decodeTree[resultIdx + 2]);
        lastIdx = strIdx - excess + 1;
      }
    }
    return ret + str.slice(lastIdx);
  };
}
function determineBranch(decodeTree, current, nodeIdx, char) {
  var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
  var jumpOffset = current & BinTrieFlags.JUMP_TABLE;
  // Case 1: Single branch encoded in jump offset
  if (branchCount === 0) {
    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
  }
  // Case 2: Multiple branches encoded in jump table
  if (jumpOffset) {
    var value = char - jumpOffset;
    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
  }
  // Case 3: Multiple branches encoded in dictionary
  // Binary search for the character.
  var lo = nodeIdx;
  var hi = lo + branchCount - 1;
  while (lo <= hi) {
    var mid = lo + hi >>> 1;
    var midVal = decodeTree[mid];
    if (midVal < char) {
      lo = mid + 1;
    } else if (midVal > char) {
      hi = mid - 1;
    } else {
      return decodeTree[mid + branchCount];
    }
  }
  return -1;
}
exports.determineBranch = determineBranch;
var htmlDecoder = getDecoder(decode_data_html_js_1.default);
var xmlDecoder = getDecoder(decode_data_xml_js_1.default);
/**
 * Decodes an HTML string, allowing for entities not terminated by a semi-colon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */
function decodeHTML(str) {
  return htmlDecoder(str, false);
}
exports.decodeHTML = decodeHTML;
/**
 * Decodes an HTML string, requiring all entities to be terminated by a semi-colon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */
function decodeHTMLStrict(str) {
  return htmlDecoder(str, true);
}
exports.decodeHTMLStrict = decodeHTMLStrict;
/**
 * Decodes an XML string, requiring all entities to be terminated by a semi-colon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */
function decodeXML(str) {
  return xmlDecoder(str, true);
}
exports.decodeXML = decodeXML;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWNvZGVfZGF0YV9odG1sX2pzXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXF1aXJlIiwiZXhwb3J0cyIsImh0bWxEZWNvZGVUcmVlIiwiZGVmYXVsdCIsImRlY29kZV9kYXRhX3htbF9qc18xIiwieG1sRGVjb2RlVHJlZSIsImRlY29kZV9jb2RlcG9pbnRfanNfMSIsImRlY29kZUNvZGVQb2ludCIsImRlY29kZV9jb2RlcG9pbnRfanNfMiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInJlcGxhY2VDb2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwiQ2hhckNvZGVzIiwiQmluVHJpZUZsYWdzIiwiZ2V0RGVjb2RlciIsImRlY29kZVRyZWUiLCJkZWNvZGVIVE1MQmluYXJ5Iiwic3RyIiwic3RyaWN0IiwicmV0IiwibGFzdElkeCIsInN0cklkeCIsImluZGV4T2YiLCJzbGljZSIsImNoYXJDb2RlQXQiLCJOVU0iLCJzdGFydCIsImJhc2UiLCJjcCIsIlRvX0xPV0VSX0JJVCIsIkxPV0VSX1giLCJaRVJPIiwiTklORSIsIkxPV0VSX0EiLCJMT1dFUl9GIiwiZW50aXR5Iiwic3Vic3RyaW5nIiwicGFyc2VkIiwicGFyc2VJbnQiLCJTRU1JIiwicmVzdWx0SWR4IiwiZXhjZXNzIiwidHJlZUlkeCIsImN1cnJlbnQiLCJsZW5ndGgiLCJkZXRlcm1pbmVCcmFuY2giLCJtYXNrZWQiLCJWQUxVRV9MRU5HVEgiLCJ2YWx1ZUxlbmd0aCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIm5vZGVJZHgiLCJjaGFyIiwiYnJhbmNoQ291bnQiLCJCUkFOQ0hfTEVOR1RIIiwianVtcE9mZnNldCIsIkpVTVBfVEFCTEUiLCJ2YWx1ZSIsImxvIiwiaGkiLCJtaWQiLCJtaWRWYWwiLCJodG1sRGVjb2RlciIsInhtbERlY29kZXIiLCJkZWNvZGVIVE1MIiwiZGVjb2RlSFRNTFN0cmljdCIsImRlY29kZVhNTCJdLCJzb3VyY2VzIjpbImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9mYjU1L2VudGl0aWVzLzg2N2FjNzA5YmE0ODJhNTZhOThiN2MzNWY0OWNhODMzYzc0ZGMxOTMvc3JjL2RlY29kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxxQkFBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFLU0MsT0FBQSxDQUFBQyxjQUFBLEdBTEZKLHFCQUFBLENBQUFLLE9BQWM7QUFDckIsSUFBQUMsb0JBQUEsR0FBQUwsZUFBQSxDQUFBQyxPQUFBO0FBSXlCQyxPQUFBLENBQUFJLGFBQUEsR0FKbEJELG9CQUFBLENBQUFELE9BQWE7QUFDcEIsSUFBQUcscUJBQUEsR0FBQVAsZUFBQSxDQUFBQyxPQUFBO0FBR3dDQyxPQUFBLENBQUFNLGVBQUEsR0FIakNELHFCQUFBLENBQUFILE9BQWU7QUFJdEIsSUFBQUsscUJBQUEsR0FBQVIsT0FBQTtBQUFTUyxNQUFBLENBQUFDLGNBQUEsQ0FBQVQsT0FBQTtFQUFBVSxVQUFBO0VBQUFDLEdBQUEsV0FBQUEsQ0FBQTtJQUFBLE9BQUFKLHFCQUFBLENBQUFLLGdCQUFnQjtFQUFBO0FBQUE7QUFBRUosTUFBQSxDQUFBQyxjQUFBLENBQUFULE9BQUE7RUFBQVUsVUFBQTtFQUFBQyxHQUFBLFdBQUFBLENBQUE7SUFBQSxPQUFBSixxQkFBQSxDQUFBTSxhQUFhO0VBQUE7QUFBQTtBQUV4QyxJQUFXQyxTQVVWO0FBVkQsV0FBV0EsU0FBUztFQUNoQkEsU0FBQSxDQUFBQSxTQUFBLHFCQUFRO0VBQ1JBLFNBQUEsQ0FBQUEsU0FBQSx1QkFBUztFQUNUQSxTQUFBLENBQUFBLFNBQUEsdUJBQVM7RUFDVEEsU0FBQSxDQUFBQSxTQUFBLHVCQUFTO0VBQ1RBLFNBQUEsQ0FBQUEsU0FBQSw2QkFBWTtFQUNaQSxTQUFBLENBQUFBLFNBQUEsOEJBQWE7RUFDYkEsU0FBQSxDQUFBQSxTQUFBLDhCQUFhO0VBQ2I7RUFDQUEsU0FBQSxDQUFBQSxTQUFBLHVD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