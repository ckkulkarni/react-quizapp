60d510799fc934dd2dffc5f0a2dda0f5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _formik = require("formik");
var _RadioGroup = _interopRequireDefault(require("@mui/material/RadioGroup"));
var _FormControlLabel = _interopRequireDefault(require("@mui/material/FormControlLabel"));
var _Radio = _interopRequireDefault(require("@mui/material/Radio"));
var _Button = _interopRequireDefault(require("@mui/material/Button"));
var _NavigateNext = _interopRequireDefault(require("@mui/icons-material/NavigateNext"));
var _reactRouter = require("react-router");
var _material = require("@mui/material");
var _App = require("./../../App");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Question1 = () => {
  const navigation = (0, _reactRouter.useNavigate)();
  const {
    score,
    setScore,
    trackScore,
    setTracker,
    selectedLanguage
  } = (0, _react.useContext)(_App.QuizContext);
  let questionText = "";
  let options = [];
  if (selectedLanguage === "ReactJS") {
    questionText = "What is the extension used for TypeScript in ReactJS?";
    options = [".tsx", ".jsx", ".js", ".java"];
  } else if (selectedLanguage === "React Native") {
    questionText = "What are the simpler of the two CLIs used to create React Native Apps?";
    options = ["Expo CLI", "React Native CLI"];
  } else if (selectedLanguage === "Java") {
    questionText = "In Java, the class name should always be different from file name. True or False?";
    options = ["True", "False"];
  }
  const [isSubmitted, setIsSubmitted] = (0, _react.useState)(false);
  const formik = (0, _formik.useFormik)({
    initialValues: {
      answer: ""
    },
    onSubmit: values => {
      if (selectedLanguage === "ReactJS") {
        if (values.answer === options[0] && score < 1) {
          setScore(previous => previous + 1);
        }
      } else if (selectedLanguage === "React Native") {
        if (values.answer === options[0] && score < 1) {
          setScore(previous => previous + 1);
        }
      } else if (selectedLanguage === "Java") {
        if (values.answer === options[1] && score < 1) {
          setScore(previous => previous + 1);
        }
      }
      setIsSubmitted(true);
    }
  });
  const handleNavigation = () => {
    navigation("/question2");
  };
  const handleQuestionNavigation = index => {
    navigation(`/question${index}`);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
      sx: {
        display: "flex",
        gap: 1,
        flexDirection: "column",
        alignItems: "flex-end",
        p: 1,
        mt: "25vh",
        mr: 2
      },
      children: [1, 2, 3, 4, 5].map(number => /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.IconButton, {
        onClick: () => handleQuestionNavigation(number),
        sx: {
          border: 1,
          borderColor: "divider"
        },
        children: number
      }, number))
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "quiz-container",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
        sx: {
          display: "flex",
          justifyContent: "center",
          alignItems: "flex-start",
          flexDirection: "column",
          gap: 2
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex",
            flexDirection: "column",
            gap: 1
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
            sx: {
              display: "flex",
              gap: 5
            },
            children: trackScore && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Typography, {
              children: ["Score: ", score]
            })
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.default, {
            variant: "outlined",
            onClick: () => {
              setTracker(!trackScore);
            },
            children: trackScore ? "Disable Score Tracking" : "Enable Score Tracking"
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Box, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.Typography, {
            children: questionText
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_RadioGroup.default, {
          name: "answer",
          value: formik.values.answer,
          onChange: formik.handleChange,
          children: options.map(option => /*#__PURE__*/(0, _jsxRuntime.jsx)(_FormControlLabel.default, {
            value: option,
            control: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Radio.default, {}),
            label: option,
            disabled: isSubmitted
          }, option))
        }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_material.Box, {
          sx: {
            display: "flex"
          },
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.default, {
            variant: "contained",
            onClick: e => formik.handleSubmit(),
            disabled: isSubmitted,
            children: "Submit"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_material.IconButton, {
            onClick: handleNavigation,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_NavigateNext.default, {})
          })]
        })]
      })
    })]
  });
};
var _default = Question1;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZm9ybWlrIiwiX1JhZGlvR3JvdXAiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX0Zvcm1Db250cm9sTGFiZWwiLCJfUmFkaW8iLCJfQnV0dG9uIiwiX05hdmlnYXRlTmV4dCIsIl9yZWFjdFJvdXRlciIsIl9tYXRlcmlhbCIsIl9BcHAiLCJfanN4UnVudGltZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJRdWVzdGlvbjEiLCJuYXZpZ2F0aW9uIiwidXNlTmF2aWdhdGUiLCJzY29yZSIsInNldFNjb3JlIiwidHJhY2tTY29yZSIsInNldFRyYWNrZXIiLCJzZWxlY3RlZExhbmd1YWdlIiwidXNlQ29udGV4dCIsIlF1aXpDb250ZXh0IiwicXVlc3Rpb25UZXh0Iiwib3B0aW9ucyIsImlzU3VibWl0dGVkIiwic2V0SXNTdWJtaXR0ZWQiLCJ1c2VTdGF0ZSIsImZvcm1payIsInVzZUZvcm1payIsImluaXRpYWxWYWx1ZXMiLCJhbnN3ZXIiLCJvblN1Ym1pdCIsInZhbHVlcyIsInByZXZpb3VzIiwiaGFuZGxlTmF2aWdhdGlvbiIsImhhbmRsZVF1ZXN0aW9uTmF2aWdhdGlvbiIsImluZGV4IiwianN4cyIsImNoaWxkcmVuIiwianN4IiwiQm94Iiwic3giLCJkaXNwbGF5IiwiZ2FwIiwiZmxleERpcmVjdGlvbiIsImFsaWduSXRlbXMiLCJwIiwibXQiLCJtciIsIm1hcCIsIm51bWJlciIsIkljb25CdXR0b24iLCJvbkNsaWNrIiwiYm9yZGVyIiwiYm9yZGVyQ29sb3IiLCJjbGFzc05hbWUiLCJqdXN0aWZ5Q29udGVudCIsIlR5cG9ncmFwaHkiLCJ2YXJpYW50IiwibmFtZSIsInZhbHVlIiwib25DaGFuZ2UiLCJoYW5kbGVDaGFuZ2UiLCJvcHRpb24iLCJjb250cm9sIiwibGFiZWwiLCJkaXNhYmxlZCIsImUiLCJoYW5kbGVTdWJtaXQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJRdWVzdGlvbjEudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VGb3JtaWsgfSBmcm9tIFwiZm9ybWlrXCI7XHJcbmltcG9ydCBSYWRpb0dyb3VwIGZyb20gXCJAbXVpL21hdGVyaWFsL1JhZGlvR3JvdXBcIjtcclxuaW1wb3J0IEZvcm1Db250cm9sTGFiZWwgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2xMYWJlbFwiO1xyXG5pbXBvcnQgUmFkaW8gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvUmFkaW9cIjtcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiQG11aS9tYXRlcmlhbC9CdXR0b25cIjtcclxuaW1wb3J0IE5hdmlnYXRlTmV4dEljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvTmF2aWdhdGVOZXh0XCI7XHJcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgeyBCb3gsIEljb25CdXR0b24sIFR5cG9ncmFwaHkgfSBmcm9tIFwiQG11aS9tYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBRdWl6Q29udGV4dCB9IGZyb20gXCIuLy4uLy4uL0FwcFwiO1xyXG5jb25zdCBRdWVzdGlvbjEgPSAoKSA9PiB7XHJcbiAgY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRlKCk7XHJcbiAgY29uc3QgeyBzY29yZSwgc2V0U2NvcmUsIHRyYWNrU2NvcmUsIHNldFRyYWNrZXIsIHNlbGVjdGVkTGFuZ3VhZ2UgfSA9XHJcbiAgICB1c2VDb250ZXh0KFF1aXpDb250ZXh0KTtcclxuICBsZXQgcXVlc3Rpb25UZXh0ID0gXCJcIjtcclxuICBsZXQgb3B0aW9uczogc3RyaW5nW10gPSBbXTtcclxuICBpZiAoc2VsZWN0ZWRMYW5ndWFnZSA9PT0gXCJSZWFjdEpTXCIpIHtcclxuICAgIHF1ZXN0aW9uVGV4dCA9IFwiV2hhdCBpcyB0aGUgZXh0ZW5zaW9uIHVzZWQgZm9yIFR5cGVTY3JpcHQgaW4gUmVhY3RKUz9cIjtcclxuICAgIG9wdGlvbnMgPSBbXCIudHN4XCIsIFwiLmpzeFwiLCBcIi5qc1wiLCBcIi5qYXZhXCJdO1xyXG4gIH0gZWxzZSBpZiAoc2VsZWN0ZWRMYW5ndWFnZSA9PT0gXCJSZWFjdCBOYXRpdmVcIikge1xyXG4gICAgcXVlc3Rpb25UZXh0ID1cclxuICAgICAgXCJXaGF0IGFyZSB0aGUgc2ltcGxlciBvZiB0aGUgdHdvIENMSXMgdXNlZCB0byBjcmVhdGUgUmVhY3QgTmF0aXZlIEFwcHM/XCI7XHJcbiAgICBvcHRpb25zID0gW1wiRXhwbyBDTElcIiwgXCJSZWFjdCBOYXRpdmUgQ0xJXCJdO1xyXG4gIH0gZWxzZSBpZiAoc2VsZWN0ZWRMYW5ndWFnZSA9PT0gXCJKYXZhXCIpIHtcclxuICAgIHF1ZXN0aW9uVGV4dCA9XHJcbiAgICAgIFwiSW4gSmF2YSwgdGhlIGNsYXNzIG5hbWUgc2hvdWxkIGFsd2F5cyBiZSBkaWZmZXJlbnQgZnJvbSBmaWxlIG5hbWUuIFRydWUgb3IgRmFsc2U/XCI7XHJcbiAgICBvcHRpb25zID0gW1wiVHJ1ZVwiLCBcIkZhbHNlXCJdO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgW2lzU3VibWl0dGVkLCBzZXRJc1N1Ym1pdHRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gIGNvbnN0IGZvcm1payA9IHVzZUZvcm1payh7XHJcbiAgICBpbml0aWFsVmFsdWVzOiB7XHJcbiAgICAgIGFuc3dlcjogXCJcIixcclxuICAgIH0sXHJcbiAgICBvblN1Ym1pdDogKHZhbHVlcykgPT4ge1xyXG4gICAgICBpZiAoc2VsZWN0ZWRMYW5ndWFnZSA9PT0gXCJSZWFjdEpTXCIpIHtcclxuICAgICAgICBpZiAodmFsdWVzLmFuc3dlciA9PT0gb3B0aW9uc1swXSAmJiBzY29yZSA8IDEpIHtcclxuICAgICAgICAgIHNldFNjb3JlKChwcmV2aW91cykgPT4gcHJldmlvdXMgKyAxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRMYW5ndWFnZSA9PT0gXCJSZWFjdCBOYXRpdmVcIikge1xyXG4gICAgICAgIGlmICh2YWx1ZXMuYW5zd2VyID09PSBvcHRpb25zWzBdICYmIHNjb3JlIDwgMSkge1xyXG4gICAgICAgICAgc2V0U2NvcmUoKHByZXZpb3VzKSA9PiBwcmV2aW91cyArIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChzZWxlY3RlZExhbmd1YWdlID09PSBcIkphdmFcIikge1xyXG4gICAgICAgIGlmICh2YWx1ZXMuYW5zd2VyID09PSBvcHRpb25zWzFdICYmIHNjb3JlIDwgMSkge1xyXG4gICAgICAgICAgc2V0U2NvcmUoKHByZXZpb3VzKSA9PiBwcmV2aW91cyArIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBzZXRJc1N1Ym1pdHRlZCh0cnVlKTtcclxuICAgIH0sXHJcbiAgfSk7XHJcbiAgY29uc3QgaGFuZGxlTmF2aWdhdGlvbiA9ICgpID0+IHtcclxuICAgIG5hdmlnYXRpb24oXCIvcXVlc3Rpb24yXCIpO1xyXG4gIH07XHJcbiAgY29uc3QgaGFuZGxlUXVlc3Rpb25OYXZpZ2F0aW9uID0gKGluZGV4OiBudW1iZXIpID0+IHtcclxuICAgIG5hdmlnYXRpb24oYC9xdWVzdGlvbiR7aW5kZXh9YCk7XHJcbiAgfTtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdj5cclxuICAgICAgPEJveFxyXG4gICAgICAgIHN4PXt7XHJcbiAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcclxuICAgICAgICAgIGdhcDogMSxcclxuICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXHJcbiAgICAgICAgICBhbGlnbkl0ZW1zOiBcImZsZXgtZW5kXCIsXHJcbiAgICAgICAgICBwOiAxLFxyXG4gICAgICAgICAgbXQ6IFwiMjV2aFwiLFxyXG4gICAgICAgICAgbXI6IDIsXHJcbiAgICAgICAgfX1cclxuICAgICAgPlxyXG4gICAgICAgIHtbMSwgMiwgMywgNCwgNV0ubWFwKChudW1iZXIpID0+IChcclxuICAgICAgICAgIDxJY29uQnV0dG9uXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVF1ZXN0aW9uTmF2aWdhdGlvbihudW1iZXIpfVxyXG4gICAgICAgICAgICBzeD17eyBib3JkZXI6IDEsIGJvcmRlckNvbG9yOiBcImRpdmlkZXJcIiB9fVxyXG4gICAgICAgICAgICBrZXk9e251bWJlcn1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge251bWJlcn1cclxuICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cclxuICAgICAgICApKX1cclxuICAgICAgPC9Cb3g+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicXVpei1jb250YWluZXJcIj5cclxuICAgICAgICA8Qm94XHJcbiAgICAgICAgICBzeD17e1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcclxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXHJcbiAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiZmxleC1zdGFydFwiLFxyXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxyXG4gICAgICAgICAgICBnYXA6IDIsXHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogXCJmbGV4XCIsIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsIGdhcDogMSB9fT5cclxuICAgICAgICAgICAgPEJveCBzeD17eyBkaXNwbGF5OiBcImZsZXhcIiwgZ2FwOiA1IH19PlxyXG4gICAgICAgICAgICAgIHt0cmFja1Njb3JlICYmIDxUeXBvZ3JhcGh5PlNjb3JlOiB7c2NvcmV9PC9UeXBvZ3JhcGh5Pn1cclxuICAgICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgIHNldFRyYWNrZXIoIXRyYWNrU2NvcmUpO1xyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7dHJhY2tTY29yZSA/IFwiRGlzYWJsZSBTY29yZSBUcmFja2luZ1wiIDogXCJFbmFibGUgU2NvcmUgVHJhY2tpbmdcIn1cclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICA8L0JveD5cclxuICAgICAgICAgIDxCb3g+XHJcbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5PntxdWVzdGlvblRleHR9PC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgICA8UmFkaW9Hcm91cFxyXG4gICAgICAgICAgICBuYW1lPVwiYW5zd2VyXCJcclxuICAgICAgICAgICAgdmFsdWU9e2Zvcm1pay52YWx1ZXMuYW5zd2VyfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17Zm9ybWlrLmhhbmRsZUNoYW5nZX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAge29wdGlvbnMubWFwKChvcHRpb24pID0+IChcclxuICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2xMYWJlbFxyXG4gICAgICAgICAgICAgICAga2V5PXtvcHRpb259XHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17b3B0aW9ufVxyXG4gICAgICAgICAgICAgICAgY29udHJvbD17PFJhZGlvIC8+fVxyXG4gICAgICAgICAgICAgICAgbGFiZWw9e29wdGlvbn1cclxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtpc1N1Ym1pdHRlZH1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApKX1cclxuICAgICAgICAgIDwvUmFkaW9Hcm91cD5cclxuICAgICAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogXCJmbGV4XCIgfX0+XHJcbiAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkXCJcclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoZTogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4pID0+XHJcbiAgICAgICAgICAgICAgICBmb3JtaWsuaGFuZGxlU3VibWl0KClcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzU3VibWl0dGVkfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgU3VibWl0XHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8SWNvbkJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVOYXZpZ2F0aW9ufT5cclxuICAgICAgICAgICAgICA8TmF2aWdhdGVOZXh0SWNvbiAvPlxyXG4gICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICA8L0JveD5cclxuICAgICAgICA8L0JveD5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUXVlc3Rpb24xO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtB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