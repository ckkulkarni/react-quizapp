1494b4d9c3417aa1042f41d628fb1022
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCollector = useCollector;
var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));
var _react = require("react");
var _useIsomorphicLayoutEffect = require("./useIsomorphicLayoutEffect.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 *
 * @param monitor The monitor to collect state from
 * @param collect The collecting function
 * @param onUpdate A method to invoke when updates occur
 */
function useCollector(monitor, collect, onUpdate) {
  const [collected, setCollected] = (0, _react.useState)(() => collect(monitor));
  const updateCollected = (0, _react.useCallback)(() => {
    const nextValue = collect(monitor);
    // This needs to be a deep-equality check because some monitor-collected values
    // include XYCoord objects that may be equivalent, but do not have instance equality.
    if (!(0, _fastDeepEqual.default)(collected, nextValue)) {
      setCollected(nextValue);
      if (onUpdate) {
        onUpdate();
      }
    }
  }, [collected, monitor, onUpdate]);
  // update the collected properties after react renders.
  // Note that the "Dustbin Stress Test" fails if this is not
  // done when the component updates
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(updateCollected);
  return [collected, updateCollected];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmFzdERlZXBFcXVhbCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInVzZUNvbGxlY3RvciIsIm1vbml0b3IiLCJjb2xsZWN0Iiwib25VcGRhdGUiLCJjb2xsZWN0ZWQiLCJzZXRDb2xsZWN0ZWQiLCJ1c2VTdGF0ZSIsInVwZGF0ZUNvbGxlY3RlZCIsInVzZUNhbGxiYWNrIiwibmV4dFZhbHVlIiwiZXF1YWwiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hvb2tzL3VzZUNvbGxlY3Rvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXF1YWwgZnJvbSAnZmFzdC1kZWVwLWVxdWFsJ1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMnXG5cbi8qKlxuICpcbiAqIEBwYXJhbSBtb25pdG9yIFRoZSBtb25pdG9yIHRvIGNvbGxlY3Qgc3RhdGUgZnJvbVxuICogQHBhcmFtIGNvbGxlY3QgVGhlIGNvbGxlY3RpbmcgZnVuY3Rpb25cbiAqIEBwYXJhbSBvblVwZGF0ZSBBIG1ldGhvZCB0byBpbnZva2Ugd2hlbiB1cGRhdGVzIG9jY3VyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VDb2xsZWN0b3I8VCwgUz4oXG5cdG1vbml0b3I6IFQsXG5cdGNvbGxlY3Q6IChtb25pdG9yOiBUKSA9PiBTLFxuXHRvblVwZGF0ZT86ICgpID0+IHZvaWQsXG4pOiBbUywgKCkgPT4gdm9pZF0ge1xuXHRjb25zdCBbY29sbGVjdGVkLCBzZXRDb2xsZWN0ZWRdID0gdXNlU3RhdGUoKCkgPT4gY29sbGVjdChtb25pdG9yKSlcblxuXHRjb25zdCB1cGRhdGVDb2xsZWN0ZWQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG5cdFx0Y29uc3QgbmV4dFZhbHVlID0gY29sbGVjdChtb25pdG9yKVxuXHRcdC8vIFRoaXMgbmVlZHMgdG8gYmUgYSBkZWVwLWVxdWFsaXR5IGNoZWNrIGJlY2F1c2Ugc29tZSBtb25pdG9yLWNvbGxlY3RlZCB2YWx1ZXNcblx0XHQvLyBpbmNsdWRlIFhZQ29vcmQgb2JqZWN0cyB0aGF0IG1heSBiZSBlcXVpdmFsZW50LCBidXQgZG8gbm90IGhhdmUgaW5zdGFuY2UgZXF1YWxpdHkuXG5cdFx0aWYgKCFlcXVhbChjb2xsZWN0ZWQsIG5leHRWYWx1ZSkpIHtcblx0XHRcdHNldENvbGxlY3RlZChuZXh0VmFsdWUpXG5cdFx0XHRpZiAob25VcGRhdGUpIHtcblx0XHRcdFx0b25VcGRhdGUoKVxuXHRcdFx0fVxuXHRcdH1cblx0fSwgW2NvbGxlY3RlZCwgbW9uaXRvciwgb25VcGRhdGVdKVxuXG5cdC8vIHVwZGF0ZSB0aGUgY29sbGVjdGVkIHByb3BlcnRpZXMgYWZ0ZXIgcmVhY3QgcmVuZGVycy5cblx0Ly8gTm90ZSB0aGF0IHRoZSBcIkR1c3RiaW4gU3RyZXNzIFRlc3RcIiBmYWlscyBpZiB0aGlzIGlzIG5vdFxuXHQvLyBkb25lIHdoZW4gdGhlIGNvbXBvbmVudCB1cGRhdGVzXG5cdHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QodXBkYXRlQ29sbGVjdGVkKVxuXG5cdHJldHVybiBbY29sbGVjdGVkLCB1cGRhdGVDb2xsZWN0ZWRdXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLGNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLDBCQUFBLEdBQUFGLE9BQUE7QUFBMEUsU0FBQUQsdUJBQUFJLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFFMUU7Ozs7OztBQU1PLFNBQVNHLFlBQVlBLENBQzNCQyxPQUFVLEVBQ1ZDLE9BQTBCLEVBQzFCQyxRQUFxQixFQUNIO0VBQ2xCLE1BQU0sQ0FBQ0MsU0FBUyxFQUFFQyxZQUFZLENBQUMsR0FBRyxJQUFBQyxlQUFRLEVBQUMsTUFBTUosT0FBTyxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUVsRSxNQUFNTSxlQUFlLEdBQUcsSUFBQUMsa0JBQVcsRUFBQyxNQUFNO0lBQ3pDLE1BQU1DLFNBQVMsR0FBR1AsT0FBTyxDQUFDRCxPQUFPLENBQUM7SUFDbEM7SUFDQTtJQUNBLElBQUksQ0FBQyxJQUFBUyxzQkFBSyxFQUFDTixTQUFTLEVBQUVLLFNBQVMsQ0FBQyxFQUFFO01BQ2pDSixZQUFZLENBQUNJLFNBQVMsQ0FBQztNQUN2QixJQUFJTixRQUFRLEVBQUU7UUFDYkEsUUFBUSxFQUFFOzs7R0FHWixFQUFFLENBQUNDLFNBQVMsRUFBRUgsT0FBTyxFQUFFRSxRQUFRLENBQUMsQ0FBQztFQUVsQztFQUNBO0VBQ0E7RUFDQSxJQUFBUSxvREFBeUIsRUFBQ0osZUFBZSxDQUFDO0VBRTFDLE9BQU8sQ0FBQ0gsU0FBUyxFQUFFRyxlQUFlLENBQUMifQ==