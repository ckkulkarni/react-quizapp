76c0edb0720fffd67b6e59fbb2211d7f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDragDropManager = createDragDropManager;
var _redux = require("redux");
var _DragDropManagerImpl = require("./classes/DragDropManagerImpl.js");
var _DragDropMonitorImpl = require("./classes/DragDropMonitorImpl.js");
var _HandlerRegistryImpl = require("./classes/HandlerRegistryImpl.js");
var _index = require("./reducers/index.js");
function createDragDropManager(backendFactory, globalContext = undefined, backendOptions = {}, debugMode = false) {
  const store = makeStoreInstance(debugMode);
  const monitor = new _DragDropMonitorImpl.DragDropMonitorImpl(store, new _HandlerRegistryImpl.HandlerRegistryImpl(store));
  const manager = new _DragDropManagerImpl.DragDropManagerImpl(store, monitor);
  const backend = backendFactory(manager, globalContext, backendOptions);
  manager.receiveBackend(backend);
  return manager;
}
function makeStoreInstance(debugMode) {
  // TODO: if we ever make a react-native version of this,
  // we'll need to consider how to pull off dev-tooling
  const reduxDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__;
  return (0, _redux.createStore)(_index.reduce, debugMode && reduxDevTools && reduxDevTools({
    name: 'dnd-core',
    instanceId: 'dnd-core'
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVkdXgiLCJyZXF1aXJlIiwiX0RyYWdEcm9wTWFuYWdlckltcGwiLCJfRHJhZ0Ryb3BNb25pdG9ySW1wbCIsIl9IYW5kbGVyUmVnaXN0cnlJbXBsIiwiX2luZGV4IiwiY3JlYXRlRHJhZ0Ryb3BNYW5hZ2VyIiwiYmFja2VuZEZhY3RvcnkiLCJnbG9iYWxDb250ZXh0IiwidW5kZWZpbmVkIiwiYmFja2VuZE9wdGlvbnMiLCJkZWJ1Z01vZGUiLCJzdG9yZSIsIm1ha2VTdG9yZUluc3RhbmNlIiwibW9uaXRvciIsIkRyYWdEcm9wTW9uaXRvckltcGwiLCJIYW5kbGVyUmVnaXN0cnlJbXBsIiwibWFuYWdlciIsIkRyYWdEcm9wTWFuYWdlckltcGwiLCJiYWNrZW5kIiwicmVjZWl2ZUJhY2tlbmQiLCJyZWR1eERldlRvb2xzIiwid2luZG93IiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsImNyZWF0ZVN0b3JlIiwicmVkdWNlIiwibmFtZSIsImluc3RhbmNlSWQiXSwic291cmNlcyI6WyIuLi9zcmMvY3JlYXRlRHJhZ0Ryb3BNYW5hZ2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgU3RvcmUgfSBmcm9tICdyZWR1eCdcbmltcG9ydCB7IGNyZWF0ZVN0b3JlIH0gZnJvbSAncmVkdXgnXG5cbmltcG9ydCB7IERyYWdEcm9wTWFuYWdlckltcGwgfSBmcm9tICcuL2NsYXNzZXMvRHJhZ0Ryb3BNYW5hZ2VySW1wbC5qcydcbmltcG9ydCB7IERyYWdEcm9wTW9uaXRvckltcGwgfSBmcm9tICcuL2NsYXNzZXMvRHJhZ0Ryb3BNb25pdG9ySW1wbC5qcydcbmltcG9ydCB7IEhhbmRsZXJSZWdpc3RyeUltcGwgfSBmcm9tICcuL2NsYXNzZXMvSGFuZGxlclJlZ2lzdHJ5SW1wbC5qcydcbmltcG9ydCB0eXBlIHsgQmFja2VuZEZhY3RvcnksIERyYWdEcm9wTWFuYWdlciB9IGZyb20gJy4vaW50ZXJmYWNlcy5qcydcbmltcG9ydCB0eXBlIHsgU3RhdGUgfSBmcm9tICcuL3JlZHVjZXJzL2luZGV4LmpzJ1xuaW1wb3J0IHsgcmVkdWNlIH0gZnJvbSAnLi9yZWR1Y2Vycy9pbmRleC5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURyYWdEcm9wTWFuYWdlcihcblx0YmFja2VuZEZhY3Rvcnk6IEJhY2tlbmRGYWN0b3J5LFxuXHRnbG9iYWxDb250ZXh0OiB1bmtub3duID0gdW5kZWZpbmVkLFxuXHRiYWNrZW5kT3B0aW9uczogdW5rbm93biA9IHt9LFxuXHRkZWJ1Z01vZGUgPSBmYWxzZSxcbik6IERyYWdEcm9wTWFuYWdlciB7XG5cdGNvbnN0IHN0b3JlID0gbWFrZVN0b3JlSW5zdGFuY2UoZGVidWdNb2RlKVxuXHRjb25zdCBtb25pdG9yID0gbmV3IERyYWdEcm9wTW9uaXRvckltcGwoc3RvcmUsIG5ldyBIYW5kbGVyUmVnaXN0cnlJbXBsKHN0b3JlKSlcblx0Y29uc3QgbWFuYWdlciA9IG5ldyBEcmFnRHJvcE1hbmFnZXJJbXBsKHN0b3JlLCBtb25pdG9yKVxuXHRjb25zdCBiYWNrZW5kID0gYmFja2VuZEZhY3RvcnkobWFuYWdlciwgZ2xvYmFsQ29udGV4dCwgYmFja2VuZE9wdGlvbnMpXG5cdG1hbmFnZXIucmVjZWl2ZUJhY2tlbmQoYmFja2VuZClcblx0cmV0dXJuIG1hbmFnZXJcbn1cblxuZnVuY3Rpb24gbWFrZVN0b3JlSW5zdGFuY2UoZGVidWdNb2RlOiBib29sZWFuKTogU3RvcmU8U3RhdGU+IHtcblx0Ly8gVE9ETzogaWYgd2UgZXZlciBtYWtlIGEgcmVhY3QtbmF0aXZlIHZlcnNpb24gb2YgdGhpcyxcblx0Ly8gd2UnbGwgbmVlZCB0byBjb25zaWRlciBob3cgdG8gcHVsbCBvZmYgZGV2LXRvb2xpbmdcblx0Y29uc3QgcmVkdXhEZXZUb29scyA9XG5cdFx0dHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0XHQod2luZG93IGFzIGFueSkuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fX1xuXHRyZXR1cm4gY3JlYXRlU3RvcmUoXG5cdFx0cmVkdWNlLFxuXHRcdGRlYnVnTW9kZSAmJlxuXHRcdFx0cmVkdXhEZXZUb29scyAmJlxuXHRcdFx0cmVkdXhEZXZUb29scyh7XG5cdFx0XHRcdG5hbWU6ICdkbmQtY29yZScsXG5cdFx0XHRcdGluc3RhbmNlSWQ6ICdkbmQtY29yZScsXG5cdFx0XHR9KSxcblx0KVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFFQSxJQUFBQyxvQkFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsb0JBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLG9CQUFBLEdBQUFILE9BQUE7QUFHQSxJQUFBSSxNQUFBLEdBQUFKLE9BQUE7QUFFTyxTQUFTSyxxQkFBcUJBLENBQ3BDQyxjQUE4QixFQUM5QkMsYUFBc0IsR0FBR0MsU0FBUyxFQUNsQ0MsY0FBdUIsR0FBRyxFQUFFLEVBQzVCQyxTQUFTLEdBQUcsS0FBSyxFQUNDO0VBQ2xCLE1BQU1DLEtBQUssR0FBR0MsaUJBQWlCLENBQUNGLFNBQVMsQ0FBQztFQUMxQyxNQUFNRyxPQUFPLEdBQUcsSUFBSUMsd0NBQW1CLENBQUNILEtBQUssRUFBRSxJQUFJSSx3Q0FBbUIsQ0FBQ0osS0FBSyxDQUFDLENBQUM7RUFDOUUsTUFBTUssT0FBTyxHQUFHLElBQUlDLHdDQUFtQixDQUFDTixLQUFLLEVBQUVFLE9BQU8sQ0FBQztFQUN2RCxNQUFNSyxPQUFPLEdBQUdaLGNBQWMsQ0FBQ1UsT0FBTyxFQUFFVCxhQUFhLEVBQUVFLGNBQWMsQ0FBQztFQUN0RU8sT0FBTyxDQUFDRyxjQUFjLENBQUNELE9BQU8sQ0FBQztFQUMvQixPQUFPRixPQUFPOztBQUdmLFNBQVNKLGlCQUFpQkEsQ0FBQ0YsU0FBa0IsRUFBZ0I7RUFDNUQ7RUFDQTtFQUNBLE1BQU1VLGFBQWEsR0FDbEIsT0FBT0MsTUFBTSxLQUFLLFdBQVcsSUFDN0JBLE1BQU8sQ0FBU0MsNEJBQTRCO0VBQzdDLE9BQU8sSUFBQUMsa0JBQVcsRUFDakJDLGFBQU0sRUFDTmQsU0FBUyxJQUNSVSxhQUFhLElBQ2JBLGFBQWEsQ0FBQztJQUNiSyxJQUFJLEVBQUUsVUFBVTtJQUNoQkMsVUFBVSxFQUFFO0dBQ1osQ0FBQyxDQUNIIn0=