c672fd3b89542bac58dfebacdedf9a5a
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
/**
 * Check if an object is contained within another object.
 *
 * Returns `true` if:
 * - all enumerable keys of *subset* are also enumerable in *superset*, and
 * - every value assigned to an enumerable key of *subset* strictly equals
 *   the value assigned to the same key of *superset* â€“ or is a subset of it.
 *
 * @param  {Object}  superset
 * @param  {Object}  subset
 *
 * @returns  {Boolean}
 *
 * @module    is-subset
 * @function  default
 * @alias     isSubset
 */
var isSubset = function (_isSubset) {
  function isSubset(_x, _x2) {
    return _isSubset.apply(this, arguments);
  }
  isSubset.toString = function () {
    return _isSubset.toString();
  };
  return isSubset;
}(function (superset, subset) {
  if (typeof superset !== 'object' || superset === null || typeof subset !== 'object' || subset === null) return false;
  return Object.keys(subset).every(function (key) {
    if (!superset.propertyIsEnumerable(key)) return false;
    var subsetItem = subset[key];
    var supersetItem = superset[key];
    if (typeof subsetItem === 'object' && subsetItem !== null ? !isSubset(supersetItem, subsetItem) : supersetItem !== subsetItem) return false;
    return true;
  });
});
exports['default'] = isSubset;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzU3Vic2V0IiwiX2lzU3Vic2V0IiwiX3giLCJfeDIiLCJhcHBseSIsImFyZ3VtZW50cyIsInRvU3RyaW5nIiwic3VwZXJzZXQiLCJzdWJzZXQiLCJrZXlzIiwiZXZlcnkiLCJrZXkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInN1YnNldEl0ZW0iLCJzdXBlcnNldEl0ZW0iLCJtb2R1bGUiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLyoqXG4gKiBDaGVjayBpZiBhbiBvYmplY3QgaXMgY29udGFpbmVkIHdpdGhpbiBhbm90aGVyIG9iamVjdC5cbiAqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZjpcbiAqIC0gYWxsIGVudW1lcmFibGUga2V5cyBvZiAqc3Vic2V0KiBhcmUgYWxzbyBlbnVtZXJhYmxlIGluICpzdXBlcnNldCosIGFuZFxuICogLSBldmVyeSB2YWx1ZSBhc3NpZ25lZCB0byBhbiBlbnVtZXJhYmxlIGtleSBvZiAqc3Vic2V0KiBzdHJpY3RseSBlcXVhbHNcbiAqICAgdGhlIHZhbHVlIGFzc2lnbmVkIHRvIHRoZSBzYW1lIGtleSBvZiAqc3VwZXJzZXQqIOKAkyBvciBpcyBhIHN1YnNldCBvZiBpdC5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9ICBzdXBlcnNldFxuICogQHBhcmFtICB7T2JqZWN0fSAgc3Vic2V0XG4gKlxuICogQHJldHVybnMgIHtCb29sZWFufVxuICpcbiAqIEBtb2R1bGUgICAgaXMtc3Vic2V0XG4gKiBAZnVuY3Rpb24gIGRlZmF1bHRcbiAqIEBhbGlhcyAgICAgaXNTdWJzZXRcbiAqL1xudmFyIGlzU3Vic2V0ID0gKGZ1bmN0aW9uIChfaXNTdWJzZXQpIHtcbiAgZnVuY3Rpb24gaXNTdWJzZXQoX3gsIF94Mikge1xuICAgIHJldHVybiBfaXNTdWJzZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGlzU3Vic2V0LnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNTdWJzZXQudG9TdHJpbmcoKTtcbiAgfTtcblxuICByZXR1cm4gaXNTdWJzZXQ7XG59KShmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCkge1xuICBpZiAodHlwZW9mIHN1cGVyc2V0ICE9PSAnb2JqZWN0JyB8fCBzdXBlcnNldCA9PT0gbnVsbCB8fCAodHlwZW9mIHN1YnNldCAhPT0gJ29iamVjdCcgfHwgc3Vic2V0ID09PSBudWxsKSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyhzdWJzZXQpLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIXN1cGVyc2V0LnByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBzdWJzZXRJdGVtID0gc3Vic2V0W2tleV07XG4gICAgdmFyIHN1cGVyc2V0SXRlbSA9IHN1cGVyc2V0W2tleV07XG4gICAgaWYgKHR5cGVvZiBzdWJzZXRJdGVtID09PSAnb2JqZWN0JyAmJiBzdWJzZXRJdGVtICE9PSBudWxsID8gIWlzU3Vic2V0KHN1cGVyc2V0SXRlbSwgc3Vic2V0SXRlbSkgOiBzdXBlcnNldEl0ZW0gIT09IHN1YnNldEl0ZW0pIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn0pO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBpc1N1YnNldDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQyxRQUFRLEdBQUksVUFBVUMsU0FBUyxFQUFFO0VBQ25DLFNBQVNELFFBQVFBLENBQUNFLEVBQUUsRUFBRUMsR0FBRyxFQUFFO0lBQ3pCLE9BQU9GLFNBQVMsQ0FBQ0csS0FBSyxDQUFDLElBQUksRUFBRUMsU0FBUyxDQUFDO0VBQ3pDO0VBRUFMLFFBQVEsQ0FBQ00sUUFBUSxHQUFHLFlBQVk7SUFDOUIsT0FBT0wsU0FBUyxDQUFDSyxRQUFRLEVBQUU7RUFDN0IsQ0FBQztFQUVELE9BQU9OLFFBQVE7QUFDakIsQ0FBQyxDQUFFLFVBQVVPLFFBQVEsRUFBRUMsTUFBTSxFQUFFO0VBQzdCLElBQUksT0FBT0QsUUFBUSxLQUFLLFFBQVEsSUFBSUEsUUFBUSxLQUFLLElBQUksSUFBSyxPQUFPQyxNQUFNLEtBQUssUUFBUSxJQUFJQSxNQUFNLEtBQUssSUFBSyxFQUFFLE9BQU8sS0FBSztFQUV0SCxPQUFPWixNQUFNLENBQUNhLElBQUksQ0FBQ0QsTUFBTSxDQUFDLENBQUNFLEtBQUssQ0FBQyxVQUFVQyxHQUFHLEVBQUU7SUFDOUMsSUFBSSxDQUFDSixRQUFRLENBQUNLLG9CQUFvQixDQUFDRCxHQUFHLENBQUMsRUFBRSxPQUFPLEtBQUs7SUFFckQsSUFBSUUsVUFBVSxHQUFHTCxNQUFNLENBQUNHLEdBQUcsQ0FBQztJQUM1QixJQUFJRyxZQUFZLEdBQUdQLFFBQVEsQ0FBQ0ksR0FBRyxDQUFDO0lBQ2hDLElBQUksT0FBT0UsVUFBVSxLQUFLLFFBQVEsSUFBSUEsVUFBVSxLQUFLLElBQUksR0FBRyxDQUFDYixRQUFRLENBQUNjLFlBQVksRUFBRUQsVUFBVSxDQUFDLEdBQUdDLFlBQVksS0FBS0QsVUFBVSxFQUFFLE9BQU8sS0FBSztJQUUzSSxPQUFPLElBQUk7RUFDYixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRmYsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHRSxRQUFRO0FBQzdCZSxNQUFNLENBQUNqQixPQUFPLEdBQUdBLE9BQU8sQ0FBQyxTQUFTLENBQUMifQ==