{"version":3,"names":["_arrayPrototype","_interopRequireDefault","require","_getComponentName","_renderableChildren","_wrapValidator","onlyTypes","types","children","componentName","every","child","Type","type","typeNames","map","join","TypeError","concat","isRequired","length","childrenOfType","_len","arguments","Array","_key","validator","props","propName"],"sources":["../src/childrenOfType.js"],"sourcesContent":["import find from 'array.prototype.find';\n\nimport getComponentName from './helpers/getComponentName';\nimport renderableChildren from './helpers/renderableChildren';\nimport wrapValidator from './helpers/wrapValidator';\n\nfunction onlyTypes(types, children, componentName) {\n  if (!children.every((child) => child && find(types, (Type) => Type === '*' || child.type === Type))) {\n    const typeNames = types.map(getComponentName).join(', or ');\n    return new TypeError(\n      `\\`${componentName}\\` only accepts children of type ${typeNames}`,\n    );\n  }\n  return null;\n}\n\nfunction isRequired(types, children, componentName) {\n  if (children.length === 0) {\n    const typeNames = types.map(getComponentName).join(', or ');\n    return new TypeError(`\\`${componentName}\\` requires at least one node of type ${typeNames}`);\n  }\n  return null;\n}\n\nfunction childrenOfType(...types) {\n  if (types.length < 1) {\n    throw new TypeError('childrenOfType: at least 1 type is required');\n  }\n\n  function validator(props, propName, componentName) {\n    return onlyTypes(types, renderableChildren(props[propName]), componentName);\n  }\n\n  validator.isRequired = (props, propName, componentName) => {\n    const children = renderableChildren(props[propName]);\n    return isRequired(types, children, componentName) || onlyTypes(types, children, componentName);\n  };\n\n  return wrapValidator(validator, 'childrenOfType', types);\n}\n\nexport default childrenOfType;\n"],"mappings":";;;;;;AAAA,IAAAA,eAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,iBAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,mBAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,cAAA,GAAAJ,sBAAA,CAAAC,OAAA;;;;;;AAEA,SAASI,SAATA,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoCC,aAApC,EAAmD;EACjD,IAAI,CAACD,QAAQ,CAACE,KAAT,CAAe,UAACC,KAAD;IAAA,OAAWA,KAAK,IAAI,IAAAX,eAAA,aAAKO,KAAL,EAAY,UAACK,IAAD;MAAA,OAAUA,IAAI,KAAK,GAAT,IAAgBD,KAAK,CAACE,IAAN,KAAeD,IAAzC;IAAA,CAAZ,CAApB;EAAA,CAAf,CAAL,EAAqG;IACnG,IAAME,SAAS,GAAGP,KAAK,CAACQ,GAAN,CAAUZ,iBAAA,WAAV,EAA4Ba,IAA5B,CAAiC,OAAjC,CAAlB;IACA,OAAO,IAAIC,SAAJ,KAAAC,MAAA,CACAT,aADA,sCAAAS,MAAA,CACiDJ,SADjD,EAAP;EAGD;EACD,OAAO,IAAP;AACD;AAED,SAASK,UAATA,CAAoBZ,KAApB,EAA2BC,QAA3B,EAAqCC,aAArC,EAAoD;EAClD,IAAID,QAAQ,CAACY,MAAT,KAAoB,CAAxB,EAA2B;IACzB,IAAMN,SAAS,GAAGP,KAAK,CAACQ,GAAN,CAAUZ,iBAAA,WAAV,EAA4Ba,IAA5B,CAAiC,OAAjC,CAAlB;IACA,OAAO,IAAIC,SAAJ,KAAAC,MAAA,CAAmBT,aAAnB,2CAAAS,MAAA,CAAyEJ,SAAzE,EAAP;EACD;EACD,OAAO,IAAP;AACD;AAED,SAASO,cAATA,CAAA,EAAkC;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAH,MAAA,EAAPb,KAAO,OAAAiB,KAAA,CAAAF,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;IAAPlB,KAAO,CAAAkB,IAAA,IAAAF,SAAA,CAAAE,IAAA;EAAA;EAChC,IAAIlB,KAAK,CAACa,MAAN,GAAe,CAAnB,EAAsB;IACpB,MAAM,IAAIH,SAAJ,CAAc,6CAAd,CAAN;EACD;EAED,SAASS,SAATA,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoCnB,aAApC,EAAmD;IACjD,OAAOH,SAAS,CAACC,KAAD,EAAQ,IAAAH,mBAAA,aAAmBuB,KAAK,CAACC,QAAD,CAAxB,CAAR,EAA6CnB,aAA7C,CAAhB;EACD;EAEDiB,SAAS,CAACP,UAAV,GAAuB,UAACQ,KAAD,EAAQC,QAAR,EAAkBnB,aAAlB,EAAoC;IACzD,IAAMD,QAAQ,GAAG,IAAAJ,mBAAA,aAAmBuB,KAAK,CAACC,QAAD,CAAxB,CAAjB;IACA,OAAOT,UAAU,CAACZ,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,CAAV,IAA8CH,SAAS,CAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,CAA9D;EACD,CAHD;EAKA,OAAO,IAAAJ,cAAA,aAAcqB,SAAd,EAAyB,gBAAzB,EAA2CnB,KAA3C,CAAP;AACD;eAEcc,c"}