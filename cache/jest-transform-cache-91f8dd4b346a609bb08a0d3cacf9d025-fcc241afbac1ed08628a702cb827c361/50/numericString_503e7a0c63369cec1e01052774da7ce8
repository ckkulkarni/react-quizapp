66703d553df53516531723598100a5c0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _propTypes = require("prop-types");
var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
var validNumericChars = /^[-+]?(?:[1-9][0-9]*(?:\.[0-9]+)?|0|0\.[0-9]+)$/;
var validator = function numericString(props, propName, componentName) {
  if (props[propName] == null) {
    return null;
  }
  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }
  var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));
  if (stringError) {
    return stringError;
  }
  var value = props[propName];
  var passesRegex = validNumericChars.test(value);
  if (passesRegex) {
    return null;
  }
  return new TypeError("".concat(componentName, ": prop \"").concat(propName, "\" (value \"").concat(value, "\") must be a numeric string:\n    - starting with an optional + or -\n    - that does not have a leading zero\n    - with an optional decimal part (that contains only one decimal point, if present)\n    - that otherwise only contains digits (0-9)\n    - not +-NaN, or +-Infinity\n  "));
};
validator.isRequired = function numericStringRequired(props, propName, componentName) {
  if (props[propName] == null) {
    return new TypeError("".concat(componentName, ": ").concat(propName, " is required"));
  }
  for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
    rest[_key2 - 3] = arguments[_key2];
  }
  return validator.apply(void 0, [props, propName, componentName].concat(rest));
};
var _default = function _default() {
  return (0, _wrapValidator["default"])(validator, 'numericString');
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcHJvcFR5cGVzIiwicmVxdWlyZSIsIl93cmFwVmFsaWRhdG9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInZhbGlkTnVtZXJpY0NoYXJzIiwidmFsaWRhdG9yIiwibnVtZXJpY1N0cmluZyIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInJlc3QiLCJBcnJheSIsIl9rZXkiLCJzdHJpbmdFcnJvciIsInN0cmluZyIsImFwcGx5IiwiY29uY2F0IiwidmFsdWUiLCJwYXNzZXNSZWdleCIsInRlc3QiLCJUeXBlRXJyb3IiLCJpc1JlcXVpcmVkIiwibnVtZXJpY1N0cmluZ1JlcXVpcmVkIiwiX2xlbjIiLCJfa2V5MiIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vc3JjL251bWVyaWNTdHJpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd3JhcFZhbGlkYXRvciBmcm9tICcuL2hlbHBlcnMvd3JhcFZhbGlkYXRvcic7XG5cbmNvbnN0IHZhbGlkTnVtZXJpY0NoYXJzID0gL15bLStdPyg/OlsxLTldWzAtOV0qKD86XFwuWzAtOV0rKT98MHwwXFwuWzAtOV0rKSQvO1xuXG5jb25zdCB2YWxpZGF0b3IgPSBmdW5jdGlvbiBudW1lcmljU3RyaW5nKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCkge1xuICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHN0cmluZ0Vycm9yID0gc3RyaW5nKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gIGlmIChzdHJpbmdFcnJvcikge1xuICAgIHJldHVybiBzdHJpbmdFcnJvcjtcbiAgfVxuXG4gIGNvbnN0IHZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXG4gIGNvbnN0IHBhc3Nlc1JlZ2V4ID0gdmFsaWROdW1lcmljQ2hhcnMudGVzdCh2YWx1ZSk7XG4gIGlmIChwYXNzZXNSZWdleCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYCR7Y29tcG9uZW50TmFtZX06IHByb3AgXCIke3Byb3BOYW1lfVwiICh2YWx1ZSBcIiR7dmFsdWV9XCIpIG11c3QgYmUgYSBudW1lcmljIHN0cmluZzpcbiAgICAtIHN0YXJ0aW5nIHdpdGggYW4gb3B0aW9uYWwgKyBvciAtXG4gICAgLSB0aGF0IGRvZXMgbm90IGhhdmUgYSBsZWFkaW5nIHplcm9cbiAgICAtIHdpdGggYW4gb3B0aW9uYWwgZGVjaW1hbCBwYXJ0ICh0aGF0IGNvbnRhaW5zIG9ubHkgb25lIGRlY2ltYWwgcG9pbnQsIGlmIHByZXNlbnQpXG4gICAgLSB0aGF0IG90aGVyd2lzZSBvbmx5IGNvbnRhaW5zIGRpZ2l0cyAoMC05KVxuICAgIC0gbm90ICstTmFOLCBvciArLUluZmluaXR5XG4gIGApO1xufTtcblxudmFsaWRhdG9yLmlzUmVxdWlyZWQgPSBmdW5jdGlvbiBudW1lcmljU3RyaW5nUmVxdWlyZWQocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKGAke2NvbXBvbmVudE5hbWV9OiAke3Byb3BOYW1lfSBpcyByZXF1aXJlZGApO1xuICB9XG4gIHJldHVybiB2YWxpZGF0b3IocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHdyYXBWYWxpZGF0b3IodmFsaWRhdG9yLCAnbnVtZXJpY1N0cmluZycpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxjQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7Ozs7OztBQUVBLElBQU1HLGlCQUFpQixHQUFHLGlEQUExQjtBQUVBLElBQU1DLFNBQVMsR0FBRyxTQUFTQyxhQUFUQSxDQUF1QkMsS0FBdkIsRUFBOEJDLFFBQTlCLEVBQXdDQyxhQUF4QyxFQUFnRTtFQUNoRixJQUFJRixLQUFLLENBQUNDLFFBQUQsQ0FBTCxJQUFtQixJQUF2QixFQUE2QjtJQUMzQixPQUFPLElBQVA7RUFDRDtFQUgrRSxTQUFBRSxJQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUFOQyxJQUFNLE9BQUFDLEtBQUEsQ0FBQUosSUFBQSxPQUFBQSxJQUFBLFdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFBLEVBQUFLLElBQUE7SUFBTkYsSUFBTSxDQUFBRSxJQUFBLFFBQUFKLFNBQUEsQ0FBQUksSUFBQTtFQUFBO0VBS2hGLElBQU1DLFdBQVcsR0FBR2hCLFVBQUEsQ0FBQWlCLE1BQUEsQ0FBQUMsS0FBQSxVQUFPWCxLQUFQLEVBQWNDLFFBQWQsRUFBd0JDLGFBQXhCLEVBQUFVLE1BQUEsQ0FBMENOLElBQTFDLEVBQXBCO0VBQ0EsSUFBSUcsV0FBSixFQUFpQjtJQUNmLE9BQU9BLFdBQVA7RUFDRDtFQUVELElBQU1JLEtBQUssR0FBR2IsS0FBSyxDQUFDQyxRQUFELENBQW5CO0VBRUEsSUFBTWEsV0FBVyxHQUFHakIsaUJBQWlCLENBQUNrQixJQUFsQixDQUF1QkYsS0FBdkIsQ0FBcEI7RUFDQSxJQUFJQyxXQUFKLEVBQWlCO0lBQ2YsT0FBTyxJQUFQO0VBQ0Q7RUFFRCxPQUFPLElBQUlFLFNBQUosSUFBQUosTUFBQSxDQUFpQlYsYUFBakIsZUFBQVUsTUFBQSxDQUF5Q1gsUUFBekMsa0JBQUFXLE1BQUEsQ0FBOERDLEtBQTlELGlTQUFQO0FBT0QsQ0F4QkQ7QUEwQkFmLFNBQVMsQ0FBQ21CLFVBQVYsR0FBdUIsU0FBU0MscUJBQVRBLENBQStCbEIsS0FBL0IsRUFBc0NDLFFBQXRDLEVBQWdEQyxhQUFoRCxFQUF3RTtFQUM3RixJQUFJRixLQUFLLENBQUNDLFFBQUQsQ0FBTCxJQUFtQixJQUF2QixFQUE2QjtJQUMzQixPQUFPLElBQUllLFNBQUosSUFBQUosTUFBQSxDQUFpQlYsYUFBakIsUUFBQVUsTUFBQSxDQUFtQ1gsUUFBbkMsa0JBQVA7RUFDRDtFQUg0RixTQUFBa0IsS0FBQSxHQUFBZixTQUFBLENBQUFDLE1BQUEsRUFBTkMsSUFBTSxPQUFBQyxLQUFBLENBQUFZLEtBQUEsT0FBQUEsS0FBQSxXQUFBQyxLQUFBLE1BQUFBLEtBQUEsR0FBQUQsS0FBQSxFQUFBQyxLQUFBO0lBQU5kLElBQU0sQ0FBQWMsS0FBQSxRQUFBaEIsU0FBQSxDQUFBZ0IsS0FBQTtFQUFBO0VBSTdGLE9BQU90QixTQUFTLENBQUFhLEtBQVQsVUFBVVgsS0FBVixFQUFpQkMsUUFBakIsRUFBMkJDLGFBQTNCLEVBQUFVLE1BQUEsQ0FBNkNOLElBQTdDLEVBQVA7QUFDRCxDQUxEO2VBT2UsU0FBQWUsU0FBQTtFQUFBLE9BQU0sSUFBQTFCLGNBQUEsYUFBY0csU0FBZCxFQUF5QixlQUF6QixDQUFOO0FBQUEsQyJ9