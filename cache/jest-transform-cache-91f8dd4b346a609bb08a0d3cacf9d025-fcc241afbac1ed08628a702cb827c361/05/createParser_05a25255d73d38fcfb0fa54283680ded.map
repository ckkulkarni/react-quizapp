{"version":3,"names":["_nearley","require","_grammar","parse","selector","parser","Parser","_grammar2","default","ParserRules","ParserStart","results","feed","length","Error"],"sources":["../src/createParser.js"],"sourcesContent":["// @flow\n\nimport {\n  Parser\n} from 'nearley';\nimport type {\n  CombinatorTokenType,\n  SelectorTokenType\n} from './types';\nimport grammar from './grammar';\n\nexport default () => {\n  const parse = (selector: string): Array<SelectorTokenType | CombinatorTokenType> => {\n    const parser = new Parser(grammar.ParserRules, grammar.ParserStart);\n\n    const results = parser.feed(selector).results;\n\n    if (results.length === 0) {\n      throw new Error('Found no parsings.');\n    }\n\n    if (results.length > 1) {\n      throw new Error('Ambiguous results.');\n    }\n\n    return results[0];\n  };\n\n  return {\n    parse\n  };\n};\n"],"mappings":";;;;;AAEA,IAAAA,QAAA,GAAAC,OAAA;AAOA,IAAAC,QAAA,GAAAD,OAAA;;;;;;;;;;;oBATA;;kBAWe,YAAM;EACnB,IAAME,KAAA,GAAQ,SAARA,KAAQA,CAACC,QAAD,mEAAsE;IAClF,IAAMC,MAAA,GAAS,IAAAL,QAAA,CAAAM,MAAA,CAAWC,SAAA,CAAAC,OAAA,CAAQC,WAAnB,EAAgCF,SAAA,CAAAC,OAAA,CAAQE,WAAxC,CAAf;IAEA,IAAMC,OAAA,GAAUN,MAAA,CAAOO,IAAP,CAAYR,QAAZ,EAAsBO,OAAtC;IAEA,IAAIA,OAAA,CAAQE,MAAR,KAAmB,CAAvB,EAA0B;MACxB,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;IACD;IAED,IAAIH,OAAA,CAAQE,MAAR,GAAiB,CAArB,EAAwB;MACtB,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;IACD;IAED,OAAOH,OAAA,CAAQ,CAAR,CAAP;EACD,CAdD;EAgBA,OAAO;IACLR,KAAA,EAAAA;EADK,CAAP;AAGD,C"}