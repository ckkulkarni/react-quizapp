f4f6facd12d33523bd9e28edb966f0a1
'use strict';

var GetIntrinsic = require('get-intrinsic');
var $Number = GetIntrinsic('%Number%');
var $RegExp = GetIntrinsic('%RegExp%');
var $TypeError = GetIntrinsic('%TypeError%');
var $parseInteger = GetIntrinsic('%parseInt%');
var callBound = require('call-bind/callBound');
var regexTester = require('safe-regex-test');
var $strSlice = callBound('String.prototype.slice');
var isBinary = regexTester(/^0b[01]+$/i);
var isOctal = regexTester(/^0o[0-7]+$/i);
var isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);
var nonWS = ['\u0085', '\u200b', '\ufffe'].join('');
var nonWSregex = new $RegExp('[' + nonWS + ']', 'g');
var hasNonWS = regexTester(nonWSregex);

// whitespace from: https://es5.github.io/#x15.5.4.20
// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324
var ws = ['\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003', '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028', '\u2029\uFEFF'].join('');
var trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');
var $replace = callBound('String.prototype.replace');
var $trim = function (value) {
  return $replace(value, trimRegex, '');
};
var Type = require('./Type');

// https://ecma-international.org/ecma-262/13.0/#sec-stringtonumber

module.exports = function StringToNumber(argument) {
  if (Type(argument) !== 'String') {
    throw new $TypeError('Assertion failed: `argument` is not a String');
  }
  if (isBinary(argument)) {
    return $Number($parseInteger($strSlice(argument, 2), 2));
  }
  if (isOctal(argument)) {
    return $Number($parseInteger($strSlice(argument, 2), 8));
  }
  if (hasNonWS(argument) || isInvalidHexLiteral(argument)) {
    return NaN;
  }
  var trimmed = $trim(argument);
  if (trimmed !== argument) {
    return StringToNumber(trimmed);
  }
  return $Number(argument);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJE51bWJlciIsIiRSZWdFeHAiLCIkVHlwZUVycm9yIiwiJHBhcnNlSW50ZWdlciIsImNhbGxCb3VuZCIsInJlZ2V4VGVzdGVyIiwiJHN0clNsaWNlIiwiaXNCaW5hcnkiLCJpc09jdGFsIiwiaXNJbnZhbGlkSGV4TGl0ZXJhbCIsIm5vbldTIiwiam9pbiIsIm5vbldTcmVnZXgiLCJoYXNOb25XUyIsIndzIiwidHJpbVJlZ2V4IiwiUmVnRXhwIiwiJHJlcGxhY2UiLCIkdHJpbSIsInZhbHVlIiwiVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJTdHJpbmdUb051bWJlciIsImFyZ3VtZW50IiwiTmFOIiwidHJpbW1lZCJdLCJzb3VyY2VzIjpbIlN0cmluZ1RvTnVtYmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICROdW1iZXIgPSBHZXRJbnRyaW5zaWMoJyVOdW1iZXIlJyk7XG52YXIgJFJlZ0V4cCA9IEdldEludHJpbnNpYygnJVJlZ0V4cCUnKTtcbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICRwYXJzZUludGVnZXIgPSBHZXRJbnRyaW5zaWMoJyVwYXJzZUludCUnKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciByZWdleFRlc3RlciA9IHJlcXVpcmUoJ3NhZmUtcmVnZXgtdGVzdCcpO1xuXG52YXIgJHN0clNsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG52YXIgaXNCaW5hcnkgPSByZWdleFRlc3RlcigvXjBiWzAxXSskL2kpO1xudmFyIGlzT2N0YWwgPSByZWdleFRlc3RlcigvXjBvWzAtN10rJC9pKTtcbnZhciBpc0ludmFsaWRIZXhMaXRlcmFsID0gcmVnZXhUZXN0ZXIoL15bLStdMHhbMC05YS1mXSskL2kpO1xudmFyIG5vbldTID0gWydcXHUwMDg1JywgJ1xcdTIwMGInLCAnXFx1ZmZmZSddLmpvaW4oJycpO1xudmFyIG5vbldTcmVnZXggPSBuZXcgJFJlZ0V4cCgnWycgKyBub25XUyArICddJywgJ2cnKTtcbnZhciBoYXNOb25XUyA9IHJlZ2V4VGVzdGVyKG5vbldTcmVnZXgpO1xuXG4vLyB3aGl0ZXNwYWNlIGZyb206IGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjUuNC4yMFxuLy8gaW1wbGVtZW50YXRpb24gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vYmxvYi92My40LjAvZXM1LXNoaW0uanMjTDEzMDQtTDEzMjRcbnZhciB3cyA9IFtcblx0J1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyxcblx0J1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4Jyxcblx0J1xcdTIwMjlcXHVGRUZGJ1xuXS5qb2luKCcnKTtcbnZhciB0cmltUmVnZXggPSBuZXcgUmVnRXhwKCcoXlsnICsgd3MgKyAnXSspfChbJyArIHdzICsgJ10rJCknLCAnZycpO1xudmFyICRyZXBsYWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UnKTtcbnZhciAkdHJpbSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gJHJlcGxhY2UodmFsdWUsIHRyaW1SZWdleCwgJycpO1xufTtcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzEzLjAvI3NlYy1zdHJpbmd0b251bWJlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFN0cmluZ1RvTnVtYmVyKGFyZ3VtZW50KSB7XG5cdGlmIChUeXBlKGFyZ3VtZW50KSAhPT0gJ1N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYGFyZ3VtZW50YCBpcyBub3QgYSBTdHJpbmcnKTtcblx0fVxuXHRpZiAoaXNCaW5hcnkoYXJndW1lbnQpKSB7XG5cdFx0cmV0dXJuICROdW1iZXIoJHBhcnNlSW50ZWdlcigkc3RyU2xpY2UoYXJndW1lbnQsIDIpLCAyKSk7XG5cdH1cblx0aWYgKGlzT2N0YWwoYXJndW1lbnQpKSB7XG5cdFx0cmV0dXJuICROdW1iZXIoJHBhcnNlSW50ZWdlcigkc3RyU2xpY2UoYXJndW1lbnQsIDIpLCA4KSk7XG5cdH1cblx0aWYgKGhhc05vbldTKGFyZ3VtZW50KSB8fCBpc0ludmFsaWRIZXhMaXRlcmFsKGFyZ3VtZW50KSkge1xuXHRcdHJldHVybiBOYU47XG5cdH1cblx0dmFyIHRyaW1tZWQgPSAkdHJpbShhcmd1bWVudCk7XG5cdGlmICh0cmltbWVkICE9PSBhcmd1bWVudCkge1xuXHRcdHJldHVybiBTdHJpbmdUb051bWJlcih0cmltbWVkKTtcblx0fVxuXHRyZXR1cm4gJE51bWJlcihhcmd1bWVudCk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLFlBQVksR0FBR0MsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUUzQyxJQUFJQyxPQUFPLEdBQUdGLFlBQVksQ0FBQyxVQUFVLENBQUM7QUFDdEMsSUFBSUcsT0FBTyxHQUFHSCxZQUFZLENBQUMsVUFBVSxDQUFDO0FBQ3RDLElBQUlJLFVBQVUsR0FBR0osWUFBWSxDQUFDLGFBQWEsQ0FBQztBQUM1QyxJQUFJSyxhQUFhLEdBQUdMLFlBQVksQ0FBQyxZQUFZLENBQUM7QUFFOUMsSUFBSU0sU0FBUyxHQUFHTCxPQUFPLENBQUMscUJBQXFCLENBQUM7QUFDOUMsSUFBSU0sV0FBVyxHQUFHTixPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFFNUMsSUFBSU8sU0FBUyxHQUFHRixTQUFTLENBQUMsd0JBQXdCLENBQUM7QUFDbkQsSUFBSUcsUUFBUSxHQUFHRixXQUFXLENBQUMsWUFBWSxDQUFDO0FBQ3hDLElBQUlHLE9BQU8sR0FBR0gsV0FBVyxDQUFDLGFBQWEsQ0FBQztBQUN4QyxJQUFJSSxtQkFBbUIsR0FBR0osV0FBVyxDQUFDLG9CQUFvQixDQUFDO0FBQzNELElBQUlLLEtBQUssR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUNDLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDbkQsSUFBSUMsVUFBVSxHQUFHLElBQUlYLE9BQU8sQ0FBQyxHQUFHLEdBQUdTLEtBQUssR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDO0FBQ3BELElBQUlHLFFBQVEsR0FBR1IsV0FBVyxDQUFDTyxVQUFVLENBQUM7O0FBRXRDO0FBQ0E7QUFDQSxJQUFJRSxFQUFFLEdBQUcsQ0FDUixrRUFBa0UsRUFDbEUsb0VBQW9FLEVBQ3BFLGNBQWMsQ0FDZCxDQUFDSCxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ1YsSUFBSUksU0FBUyxHQUFHLElBQUlDLE1BQU0sQ0FBQyxLQUFLLEdBQUdGLEVBQUUsR0FBRyxRQUFRLEdBQUdBLEVBQUUsR0FBRyxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQ3BFLElBQUlHLFFBQVEsR0FBR2IsU0FBUyxDQUFDLDBCQUEwQixDQUFDO0FBQ3BELElBQUljLEtBQUssR0FBRyxTQUFBQSxDQUFVQyxLQUFLLEVBQUU7RUFDNUIsT0FBT0YsUUFBUSxDQUFDRSxLQUFLLEVBQUVKLFNBQVMsRUFBRSxFQUFFLENBQUM7QUFDdEMsQ0FBQztBQUVELElBQUlLLElBQUksR0FBR3JCLE9BQU8sQ0FBQyxRQUFRLENBQUM7O0FBRTVCOztBQUVBc0IsTUFBTSxDQUFDQyxPQUFPLEdBQUcsU0FBU0MsY0FBY0EsQ0FBQ0MsUUFBUSxFQUFFO0VBQ2xELElBQUlKLElBQUksQ0FBQ0ksUUFBUSxDQUFDLEtBQUssUUFBUSxFQUFFO0lBQ2hDLE1BQU0sSUFBSXRCLFVBQVUsQ0FBQyw4Q0FBOEMsQ0FBQztFQUNyRTtFQUNBLElBQUlLLFFBQVEsQ0FBQ2lCLFFBQVEsQ0FBQyxFQUFFO0lBQ3ZCLE9BQU94QixPQUFPLENBQUNHLGFBQWEsQ0FBQ0csU0FBUyxDQUFDa0IsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ3pEO0VBQ0EsSUFBSWhCLE9BQU8sQ0FBQ2dCLFFBQVEsQ0FBQyxFQUFFO0lBQ3RCLE9BQU94QixPQUFPLENBQUNHLGFBQWEsQ0FBQ0csU0FBUyxDQUFDa0IsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ3pEO0VBQ0EsSUFBSVgsUUFBUSxDQUFDVyxRQUFRLENBQUMsSUFBSWYsbUJBQW1CLENBQUNlLFFBQVEsQ0FBQyxFQUFFO0lBQ3hELE9BQU9DLEdBQUc7RUFDWDtFQUNBLElBQUlDLE9BQU8sR0FBR1IsS0FBSyxDQUFDTSxRQUFRLENBQUM7RUFDN0IsSUFBSUUsT0FBTyxLQUFLRixRQUFRLEVBQUU7SUFDekIsT0FBT0QsY0FBYyxDQUFDRyxPQUFPLENBQUM7RUFDL0I7RUFDQSxPQUFPMUIsT0FBTyxDQUFDd0IsUUFBUSxDQUFDO0FBQ3pCLENBQUMifQ==