e19f5bbac0bff781af753728415607fd
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reduce = reduce;
var _index = require("../actions/dragDrop/index.js");
var _registry = require("../actions/registry.js");
var _dirtiness = require("../utils/dirtiness.js");
var _equality = require("../utils/equality.js");
var _js_utils = require("../utils/js_utils.js");
function reduce(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
_state = _dirtiness.NONE, action) {
  switch (action.type) {
    case _index.HOVER:
      break;
    case _registry.ADD_SOURCE:
    case _registry.ADD_TARGET:
    case _registry.REMOVE_TARGET:
    case _registry.REMOVE_SOURCE:
      return _dirtiness.NONE;
    case _index.BEGIN_DRAG:
    case _index.PUBLISH_DRAG_SOURCE:
    case _index.END_DRAG:
    case _index.DROP:
    default:
      return _dirtiness.ALL;
  }
  const {
    targetIds = [],
    prevTargetIds = []
  } = action.payload;
  const result = (0, _js_utils.xor)(targetIds, prevTargetIds);
  const didChange = result.length > 0 || !(0, _equality.areArraysEqual)(targetIds, prevTargetIds);
  if (!didChange) {
    return _dirtiness.NONE;
  }
  // Check the target ids at the innermost position. If they are valid, add them
  // to the result
  const prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];
  const innermostTargetId = targetIds[targetIds.length - 1];
  if (prevInnermostTargetId !== innermostTargetId) {
    if (prevInnermostTargetId) {
      result.push(prevInnermostTargetId);
    }
    if (innermostTargetId) {
      result.push(innermostTargetId);
    }
  }
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW5kZXgiLCJyZXF1aXJlIiwiX3JlZ2lzdHJ5IiwiX2RpcnRpbmVzcyIsIl9lcXVhbGl0eSIsIl9qc191dGlscyIsInJlZHVjZSIsIl9zdGF0ZSIsIk5PTkUiLCJhY3Rpb24iLCJ0eXBlIiwiSE9WRVIiLCJBRERfU09VUkNFIiwiQUREX1RBUkdFVCIsIlJFTU9WRV9UQVJHRVQiLCJSRU1PVkVfU09VUkNFIiwiQkVHSU5fRFJBRyIsIlBVQkxJU0hfRFJBR19TT1VSQ0UiLCJFTkRfRFJBRyIsIkRST1AiLCJBTEwiLCJ0YXJnZXRJZHMiLCJwcmV2VGFyZ2V0SWRzIiwicGF5bG9hZCIsInJlc3VsdCIsInhvciIsImRpZENoYW5nZSIsImxlbmd0aCIsImFyZUFycmF5c0VxdWFsIiwicHJldklubmVybW9zdFRhcmdldElkIiwiaW5uZXJtb3N0VGFyZ2V0SWQiLCJwdXNoIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JlZHVjZXJzL2RpcnR5SGFuZGxlcklkcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRCRUdJTl9EUkFHLFxuXHREUk9QLFxuXHRFTkRfRFJBRyxcblx0SE9WRVIsXG5cdFBVQkxJU0hfRFJBR19TT1VSQ0UsXG59IGZyb20gJy4uL2FjdGlvbnMvZHJhZ0Ryb3AvaW5kZXguanMnXG5pbXBvcnQge1xuXHRBRERfU09VUkNFLFxuXHRBRERfVEFSR0VULFxuXHRSRU1PVkVfU09VUkNFLFxuXHRSRU1PVkVfVEFSR0VULFxufSBmcm9tICcuLi9hY3Rpb25zL3JlZ2lzdHJ5LmpzJ1xuaW1wb3J0IHR5cGUgeyBBY3Rpb24gfSBmcm9tICcuLi9pbnRlcmZhY2VzLmpzJ1xuaW1wb3J0IHsgQUxMLCBOT05FIH0gZnJvbSAnLi4vdXRpbHMvZGlydGluZXNzLmpzJ1xuaW1wb3J0IHsgYXJlQXJyYXlzRXF1YWwgfSBmcm9tICcuLi91dGlscy9lcXVhbGl0eS5qcydcbmltcG9ydCB7IHhvciB9IGZyb20gJy4uL3V0aWxzL2pzX3V0aWxzLmpzJ1xuXG5leHBvcnQgdHlwZSBTdGF0ZSA9IHN0cmluZ1tdXG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlydHlIYW5kbGVySWRQYXlsb2FkIHtcblx0dGFyZ2V0SWRzOiBzdHJpbmdbXVxuXHRwcmV2VGFyZ2V0SWRzOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlKFxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5cdF9zdGF0ZTogU3RhdGUgPSBOT05FLFxuXHRhY3Rpb246IEFjdGlvbjxEaXJ0eUhhbmRsZXJJZFBheWxvYWQ+LFxuKTogU3RhdGUge1xuXHRzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG5cdFx0Y2FzZSBIT1ZFUjpcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSBBRERfU09VUkNFOlxuXHRcdGNhc2UgQUREX1RBUkdFVDpcblx0XHRjYXNlIFJFTU9WRV9UQVJHRVQ6XG5cdFx0Y2FzZSBSRU1PVkVfU09VUkNFOlxuXHRcdFx0cmV0dXJuIE5PTkVcblx0XHRjYXNlIEJFR0lOX0RSQUc6XG5cdFx0Y2FzZSBQVUJMSVNIX0RSQUdfU09VUkNFOlxuXHRcdGNhc2UgRU5EX0RSQUc6XG5cdFx0Y2FzZSBEUk9QOlxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gQUxMXG5cdH1cblxuXHRjb25zdCB7IHRhcmdldElkcyA9IFtdLCBwcmV2VGFyZ2V0SWRzID0gW10gfSA9IGFjdGlvbi5wYXlsb2FkXG5cdGNvbnN0IHJlc3VsdCA9IHhvcih0YXJnZXRJZHMsIHByZXZUYXJnZXRJZHMpXG5cdGNvbnN0IGRpZENoYW5nZSA9XG5cdFx0cmVzdWx0Lmxlbmd0aCA+IDAgfHwgIWFyZUFycmF5c0VxdWFsKHRhcmdldElkcywgcHJldlRhcmdldElkcylcblxuXHRpZiAoIWRpZENoYW5nZSkge1xuXHRcdHJldHVybiBOT05FXG5cdH1cblxuXHQvLyBDaGVjayB0aGUgdGFyZ2V0IGlkcyBhdCB0aGUgaW5uZXJtb3N0IHBvc2l0aW9uLiBJZiB0aGV5IGFyZSB2YWxpZCwgYWRkIHRoZW1cblx0Ly8gdG8gdGhlIHJlc3VsdFxuXHRjb25zdCBwcmV2SW5uZXJtb3N0VGFyZ2V0SWQgPSBwcmV2VGFyZ2V0SWRzW3ByZXZUYXJnZXRJZHMubGVuZ3RoIC0gMV1cblx0Y29uc3QgaW5uZXJtb3N0VGFyZ2V0SWQgPSB0YXJnZXRJZHNbdGFyZ2V0SWRzLmxlbmd0aCAtIDFdXG5cdGlmIChwcmV2SW5uZXJtb3N0VGFyZ2V0SWQgIT09IGlubmVybW9zdFRhcmdldElkKSB7XG5cdFx0aWYgKHByZXZJbm5lcm1vc3RUYXJnZXRJZCkge1xuXHRcdFx0cmVzdWx0LnB1c2gocHJldklubmVybW9zdFRhcmdldElkKVxuXHRcdH1cblx0XHRpZiAoaW5uZXJtb3N0VGFyZ2V0SWQpIHtcblx0XHRcdHJlc3VsdC5wdXNoKGlubmVybW9zdFRhcmdldElkKVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXN1bHRcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBT0EsSUFBQUMsU0FBQSxHQUFBRCxPQUFBO0FBT0EsSUFBQUUsVUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsU0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksU0FBQSxHQUFBSixPQUFBO0FBU08sU0FBU0ssTUFBTUE7QUFDckI7QUFDQUMsTUFBYSxHQUFHQyxlQUFJLEVBQ3BCQyxNQUFxQyxFQUM3QjtFQUNSLFFBQVFBLE1BQU0sQ0FBQ0MsSUFBSTtJQUNsQixLQUFLQyxZQUFLO01BQ1Q7SUFDRCxLQUFLQyxvQkFBVTtJQUNmLEtBQUtDLG9CQUFVO0lBQ2YsS0FBS0MsdUJBQWE7SUFDbEIsS0FBS0MsdUJBQWE7TUFDakIsT0FBT1AsZUFBSTtJQUNaLEtBQUtRLGlCQUFVO0lBQ2YsS0FBS0MsMEJBQW1CO0lBQ3hCLEtBQUtDLGVBQVE7SUFDYixLQUFLQyxXQUFJO0lBQ1Q7TUFDQyxPQUFPQyxjQUFHO0VBQUE7RUFHWixNQUFNO0lBQUVDLFNBQVMsR0FBRyxFQUFFO0lBQUVDLGFBQWEsR0FBRztFQUFFLENBQUUsR0FBR2IsTUFBTSxDQUFDYyxPQUFPO0VBQzdELE1BQU1DLE1BQU0sR0FBRyxJQUFBQyxhQUFHLEVBQUNKLFNBQVMsRUFBRUMsYUFBYSxDQUFDO0VBQzVDLE1BQU1JLFNBQVMsR0FDZEYsTUFBTSxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBQUMsd0JBQWMsRUFBQ1AsU0FBUyxFQUFFQyxhQUFhLENBQUM7RUFFL0QsSUFBSSxDQUFDSSxTQUFTLEVBQUU7SUFDZixPQUFPbEIsZUFBSTs7RUFHWjtFQUNBO0VBQ0EsTUFBTXFCLHFCQUFxQixHQUFHUCxhQUFhLENBQUNBLGFBQWEsQ0FBQ0ssTUFBTSxHQUFHLENBQUMsQ0FBQztFQUNyRSxNQUFNRyxpQkFBaUIsR0FBR1QsU0FBUyxDQUFDQSxTQUFTLENBQUNNLE1BQU0sR0FBRyxDQUFDLENBQUM7RUFDekQsSUFBSUUscUJBQXFCLEtBQUtDLGlCQUFpQixFQUFFO0lBQ2hELElBQUlELHFCQUFxQixFQUFFO01BQzFCTCxNQUFNLENBQUNPLElBQUksQ0FBQ0YscUJBQXFCLENBQUM7O0lBRW5DLElBQUlDLGlCQUFpQixFQUFFO01BQ3RCTixNQUFNLENBQUNPLElBQUksQ0FBQ0QsaUJBQWlCLENBQUM7OztFQUloQyxPQUFPTixNQUFNIn0=