cd860baf3f8131aff7062207f1cc0959
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uniqueSort = exports.compareDocumentPosition = exports.DocumentPosition = exports.removeSubsets = void 0;
var domhandler_1 = require("domhandler");
/**
 * Given an array of nodes, remove any member that is contained by another.
 *
 * @category Helpers
 * @param nodes Nodes to filter.
 * @returns Remaining nodes that aren't subtrees of each other.
 */
function removeSubsets(nodes) {
  var idx = nodes.length;
  /*
   * Check if each node (or one of its ancestors) is already contained in the
   * array.
   */
  while (--idx >= 0) {
    var node = nodes[idx];
    /*
     * Remove the node if it is not unique.
     * We are going through the array from the end, so we only
     * have to check nodes that preceed the node under consideration in the array.
     */
    if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
      nodes.splice(idx, 1);
      continue;
    }
    for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
      if (nodes.includes(ancestor)) {
        nodes.splice(idx, 1);
        break;
      }
    }
  }
  return nodes;
}
exports.removeSubsets = removeSubsets;
/**
 * @category Helpers
 * @see {@link http://dom.spec.whatwg.org/#dom-node-comparedocumentposition}
 */
var DocumentPosition;
(function (DocumentPosition) {
  DocumentPosition[DocumentPosition["DISCONNECTED"] = 1] = "DISCONNECTED";
  DocumentPosition[DocumentPosition["PRECEDING"] = 2] = "PRECEDING";
  DocumentPosition[DocumentPosition["FOLLOWING"] = 4] = "FOLLOWING";
  DocumentPosition[DocumentPosition["CONTAINS"] = 8] = "CONTAINS";
  DocumentPosition[DocumentPosition["CONTAINED_BY"] = 16] = "CONTAINED_BY";
})(DocumentPosition = exports.DocumentPosition || (exports.DocumentPosition = {}));
/**
 * Compare the position of one node against another node in any other document.
 * The return value is a bitmask with the values from {@link DocumentPosition}.
 *
 * Document order:
 * > There is an ordering, document order, defined on all the nodes in the
 * > document corresponding to the order in which the first character of the
 * > XML representation of each node occurs in the XML representation of the
 * > document after expansion of general entities. Thus, the document element
 * > node will be the first node. Element nodes occur before their children.
 * > Thus, document order orders element nodes in order of the occurrence of
 * > their start-tag in the XML (after expansion of entities). The attribute
 * > nodes of an element occur after the element and before its children. The
 * > relative order of attribute nodes is implementation-dependent.
 *
 * Source:
 * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
 *
 * @category Helpers
 * @param nodeA The first node to use in the comparison
 * @param nodeB The second node to use in the comparison
 * @returns A bitmask describing the input nodes' relative position.
 *
 * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
 * a description of these values.
 */
function compareDocumentPosition(nodeA, nodeB) {
  var aParents = [];
  var bParents = [];
  if (nodeA === nodeB) {
    return 0;
  }
  var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;
  while (current) {
    aParents.unshift(current);
    current = current.parent;
  }
  current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;
  while (current) {
    bParents.unshift(current);
    current = current.parent;
  }
  var maxIdx = Math.min(aParents.length, bParents.length);
  var idx = 0;
  while (idx < maxIdx && aParents[idx] === bParents[idx]) {
    idx++;
  }
  if (idx === 0) {
    return DocumentPosition.DISCONNECTED;
  }
  var sharedParent = aParents[idx - 1];
  var siblings = sharedParent.children;
  var aSibling = aParents[idx];
  var bSibling = bParents[idx];
  if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
    if (sharedParent === nodeB) {
      return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;
    }
    return DocumentPosition.FOLLOWING;
  }
  if (sharedParent === nodeA) {
    return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;
  }
  return DocumentPosition.PRECEDING;
}
exports.compareDocumentPosition = compareDocumentPosition;
/**
 * Sort an array of nodes based on their relative position in the document and
 * remove any duplicate nodes. If the array contains nodes that do not belong to
 * the same document, sort order is unspecified.
 *
 * @category Helpers
 * @param nodes Array of DOM nodes.
 * @returns Collection of unique nodes, sorted in document order.
 */
function uniqueSort(nodes) {
  nodes = nodes.filter(function (node, i, arr) {
    return !arr.includes(node, i + 1);
  });
  nodes.sort(function (a, b) {
    var relative = compareDocumentPosition(a, b);
    if (relative & DocumentPosition.PRECEDING) {
      return -1;
    } else if (relative & DocumentPosition.FOLLOWING) {
      return 1;
    }
    return 0;
  });
  return nodes;
}
exports.uniqueSort = uniqueSort;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb21oYW5kbGVyXzEiLCJyZXF1aXJlIiwicmVtb3ZlU3Vic2V0cyIsIm5vZGVzIiwiaWR4IiwibGVuZ3RoIiwibm9kZSIsImxhc3RJbmRleE9mIiwic3BsaWNlIiwiYW5jZXN0b3IiLCJwYXJlbnQiLCJpbmNsdWRlcyIsImV4cG9ydHMiLCJEb2N1bWVudFBvc2l0aW9uIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJub2RlQSIsIm5vZGVCIiwiYVBhcmVudHMiLCJiUGFyZW50cyIsImN1cnJlbnQiLCJoYXNDaGlsZHJlbiIsInVuc2hpZnQiLCJtYXhJZHgiLCJNYXRoIiwibWluIiwiRElTQ09OTkVDVEVEIiwic2hhcmVkUGFyZW50Iiwic2libGluZ3MiLCJjaGlsZHJlbiIsImFTaWJsaW5nIiwiYlNpYmxpbmciLCJpbmRleE9mIiwiRk9MTE9XSU5HIiwiQ09OVEFJTkVEX0JZIiwiUFJFQ0VESU5HIiwiQ09OVEFJTlMiLCJ1bmlxdWVTb3J0IiwiZmlsdGVyIiwiaSIsImFyciIsInNvcnQiLCJhIiwiYiIsInJlbGF0aXZlIl0sInNvdXJjZXMiOlsiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2ZiNTUvZG9tdXRpbHMvZjdlMzU3YjVjMjEwYjY3MzFjMmE2MGUwYjdiM2NmYWExZjk2YjcwNi9zcmMvaGVscGVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBRUE7Ozs7Ozs7QUFPQSxTQUFnQkMsYUFBYUEsQ0FBQ0MsS0FBZ0I7RUFDMUMsSUFBSUMsR0FBRyxHQUFHRCxLQUFLLENBQUNFLE1BQU07RUFFdEI7Ozs7RUFJQSxPQUFPLEVBQUVELEdBQUcsSUFBSSxDQUFDLEVBQUU7SUFDZixJQUFNRSxJQUFJLEdBQUdILEtBQUssQ0FBQ0MsR0FBRyxDQUFDO0lBRXZCOzs7OztJQUtBLElBQUlBLEdBQUcsR0FBRyxDQUFDLElBQUlELEtBQUssQ0FBQ0ksV0FB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