85d8dd0f4f031382f9e0743f091a0471
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _CanvasRenderingContext2D = _interopRequireDefault(require("./CanvasRenderingContext2D"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
// Path2D.prototype
const Path2DFunc = ['addPath'];
const borrowedFromCanvas = ['closePath', 'moveTo', 'lineTo', 'bezierCurveTo', 'quadraticCurveTo', 'arc', 'arcTo', 'ellipse', 'rect'];
class Path2D {
  constructor() {
    _defineProperty(this, "_path", []);
    _defineProperty(this, "_events", []);
    _defineProperty(this, "_stackIndex", 0);
    _defineProperty(this, "_transformStack", [[1, 0, 0, 1, 0, 0]]);
    borrowedFromCanvas.forEach(key => {
      this[key] = jest.fn(_CanvasRenderingContext2D.default.prototype[key].bind(this));
    });
    Path2DFunc.forEach(key => {
      this[key] = jest.fn(this[key].bind(this));
    });
  }
  addPath(path) {
    if (arguments.length < 1) throw new TypeError("Failed to execute 'addPath' on 'Path2D': 1 argument required, but only 0 present.");
    if (!(path instanceof Path2D)) throw new TypeError("Failed to execute 'addPath' on 'Path2D': parameter 1 is not of type 'Path2D'.");
    for (let i = 0; i < path._path.length; i++) this._path.push(path._path[i]);
  }
}
exports.default = Path2D;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwiX3RvUHJvcGVydHlLZXkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiUGF0aDJERnVuYyIsImJvcnJvd2VkRnJvbUNhbnZhcyIsIlBhdGgyRCIsImNvbnN0cnVjdG9yIiwiZm9yRWFjaCIsImplc3QiLCJmbiIsInByb3RvdHlwZSIsImJpbmQiLCJhZGRQYXRoIiwicGF0aCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImkiLCJfcGF0aCIsInB1c2giXSwic291cmNlcyI6WyJQYXRoMkQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIHR5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmICh0eXBlb2YgaW5wdXQgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAodHlwZW9mIHJlcyAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9XG4vLyBQYXRoMkQucHJvdG90eXBlXG5jb25zdCBQYXRoMkRGdW5jID0gWydhZGRQYXRoJ107XG5jb25zdCBib3Jyb3dlZEZyb21DYW52YXMgPSBbJ2Nsb3NlUGF0aCcsICdtb3ZlVG8nLCAnbGluZVRvJywgJ2JlemllckN1cnZlVG8nLCAncXVhZHJhdGljQ3VydmVUbycsICdhcmMnLCAnYXJjVG8nLCAnZWxsaXBzZScsICdyZWN0J107XG5jbGFzcyBQYXRoMkQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfcGF0aFwiLCBbXSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX2V2ZW50c1wiLCBbXSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3N0YWNrSW5kZXhcIiwgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3RyYW5zZm9ybVN0YWNrXCIsIFtbMSwgMCwgMCwgMSwgMCwgMF1dKTtcbiAgICBib3Jyb3dlZEZyb21DYW52YXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgdGhpc1trZXldID0gamVzdC5mbihfQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELmRlZmF1bHQucHJvdG90eXBlW2tleV0uYmluZCh0aGlzKSk7XG4gICAgfSk7XG4gICAgUGF0aDJERnVuYy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICB0aGlzW2tleV0gPSBqZXN0LmZuKHRoaXNba2V5XS5iaW5kKHRoaXMpKTtcbiAgICB9KTtcbiAgfVxuICBhZGRQYXRoKHBhdGgpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnYWRkUGF0aCcgb24gJ1BhdGgyRCc6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7XG4gICAgaWYgKCEocGF0aCBpbnN0YW5jZW9mIFBhdGgyRCkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnYWRkUGF0aCcgb24gJ1BhdGgyRCc6IHBhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlICdQYXRoMkQnLlwiKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGguX3BhdGgubGVuZ3RoOyBpKyspIHRoaXMuX3BhdGgucHVzaChwYXRoLl9wYXRoW2ldKTtcbiAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUGF0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