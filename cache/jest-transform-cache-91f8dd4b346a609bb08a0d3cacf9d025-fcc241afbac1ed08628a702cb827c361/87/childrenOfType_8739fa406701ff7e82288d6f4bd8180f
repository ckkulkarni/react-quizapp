81120abf1d2bbb50537fe69ff56b6ff0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _arrayPrototype = _interopRequireDefault(require("array.prototype.find"));
var _getComponentName = _interopRequireDefault(require("./helpers/getComponentName"));
var _renderableChildren = _interopRequireDefault(require("./helpers/renderableChildren"));
var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function onlyTypes(types, children, componentName) {
  if (!children.every(function (child) {
    return child && (0, _arrayPrototype["default"])(types, function (Type) {
      return Type === '*' || child.type === Type;
    });
  })) {
    var typeNames = types.map(_getComponentName["default"]).join(', or ');
    return new TypeError("`".concat(componentName, "` only accepts children of type ").concat(typeNames));
  }
  return null;
}
function isRequired(types, children, componentName) {
  if (children.length === 0) {
    var typeNames = types.map(_getComponentName["default"]).join(', or ');
    return new TypeError("`".concat(componentName, "` requires at least one node of type ").concat(typeNames));
  }
  return null;
}
function childrenOfType() {
  for (var _len = arguments.length, types = new Array(_len), _key = 0; _key < _len; _key++) {
    types[_key] = arguments[_key];
  }
  if (types.length < 1) {
    throw new TypeError('childrenOfType: at least 1 type is required');
  }
  function validator(props, propName, componentName) {
    return onlyTypes(types, (0, _renderableChildren["default"])(props[propName]), componentName);
  }
  validator.isRequired = function (props, propName, componentName) {
    var children = (0, _renderableChildren["default"])(props[propName]);
    return isRequired(types, children, componentName) || onlyTypes(types, children, componentName);
  };
  return (0, _wrapValidator["default"])(validator, 'childrenOfType', types);
}
var _default = childrenOfType;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXJyYXlQcm90b3R5cGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9nZXRDb21wb25lbnROYW1lIiwiX3JlbmRlcmFibGVDaGlsZHJlbiIsIl93cmFwVmFsaWRhdG9yIiwib25seVR5cGVzIiwidHlwZXMiLCJjaGlsZHJlbiIsImNvbXBvbmVudE5hbWUiLCJldmVyeSIsImNoaWxkIiwiVHlwZSIsInR5cGUiLCJ0eXBlTmFtZXMiLCJtYXAiLCJqb2luIiwiVHlwZUVycm9yIiwiY29uY2F0IiwiaXNSZXF1aXJlZCIsImxlbmd0aCIsImNoaWxkcmVuT2ZUeXBlIiwiX2xlbiIsImFyZ3VtZW50cyIsIkFycmF5IiwiX2tleSIsInZhbGlkYXRvciIsInByb3BzIiwicHJvcE5hbWUiXSwic291cmNlcyI6WyIuLi9zcmMvY2hpbGRyZW5PZlR5cGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZpbmQgZnJvbSAnYXJyYXkucHJvdG90eXBlLmZpbmQnO1xuXG5pbXBvcnQgZ2V0Q29tcG9uZW50TmFtZSBmcm9tICcuL2hlbHBlcnMvZ2V0Q29tcG9uZW50TmFtZSc7XG5pbXBvcnQgcmVuZGVyYWJsZUNoaWxkcmVuIGZyb20gJy4vaGVscGVycy9yZW5kZXJhYmxlQ2hpbGRyZW4nO1xuaW1wb3J0IHdyYXBWYWxpZGF0b3IgZnJvbSAnLi9oZWxwZXJzL3dyYXBWYWxpZGF0b3InO1xuXG5mdW5jdGlvbiBvbmx5VHlwZXModHlwZXMsIGNoaWxkcmVuLCBjb21wb25lbnROYW1lKSB7XG4gIGlmICghY2hpbGRyZW4uZXZlcnkoKGNoaWxkKSA9PiBjaGlsZCAmJiBmaW5kKHR5cGVzLCAoVHlwZSkgPT4gVHlwZSA9PT0gJyonIHx8IGNoaWxkLnR5cGUgPT09IFR5cGUpKSkge1xuICAgIGNvbnN0IHR5cGVOYW1lcyA9IHR5cGVzLm1hcChnZXRDb21wb25lbnROYW1lKS5qb2luKCcsIG9yICcpO1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKFxuICAgICAgYFxcYCR7Y29tcG9uZW50TmFtZX1cXGAgb25seSBhY2NlcHRzIGNoaWxkcmVuIG9mIHR5cGUgJHt0eXBlTmFtZXN9YCxcbiAgICApO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1JlcXVpcmVkKHR5cGVzLCBjaGlsZHJlbiwgY29tcG9uZW50TmFtZSkge1xuICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgY29uc3QgdHlwZU5hbWVzID0gdHlwZXMubWFwKGdldENvbXBvbmVudE5hbWUpLmpvaW4oJywgb3IgJyk7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYFxcYCR7Y29tcG9uZW50TmFtZX1cXGAgcmVxdWlyZXMgYXQgbGVhc3Qgb25lIG5vZGUgb2YgdHlwZSAke3R5cGVOYW1lc31gKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW5PZlR5cGUoLi4udHlwZXMpIHtcbiAgaWYgKHR5cGVzLmxlbmd0aCA8IDEpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjaGlsZHJlbk9mVHlwZTogYXQgbGVhc3QgMSB0eXBlIGlzIHJlcXVpcmVkJyk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0b3IocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAgcmV0dXJuIG9ubHlUeXBlcyh0eXBlcywgcmVuZGVyYWJsZUNoaWxkcmVuKHByb3BzW3Byb3BOYW1lXSksIGNvbXBvbmVudE5hbWUpO1xuICB9XG5cbiAgdmFsaWRhdG9yLmlzUmVxdWlyZWQgPSAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSA9PiB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSByZW5kZXJhYmxlQ2hpbGRyZW4ocHJvcHNbcHJvcE5hbWVdKTtcbiAgICByZXR1cm4gaXNSZXF1aXJlZCh0eXBlcywgY2hpbGRyZW4sIGNvbXBvbmVudE5hbWUpIHx8IG9ubHlUeXBlcyh0eXBlcywgY2hpbGRyZW4sIGNvbXBvbmVudE5hbWUpO1xuICB9O1xuXG4gIHJldHVybiB3cmFwVmFsaWRhdG9yKHZhbGlkYXRvciwgJ2NoaWxkcmVuT2ZUeXBlJywgdHlwZXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjaGlsZHJlbk9mVHlwZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsZUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsaUJBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLG1CQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxjQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7Ozs7OztBQUVBLFNBQVNJLFNBQVRBLENBQW1CQyxLQUFuQixFQUEwQkMsUUFBMUIsRUFBb0NDLGFBQXBDLEVBQW1EO0VBQ2pELElBQUksQ0FBQ0QsUUFBUSxDQUFDRSxLQUFULENBQWUsVUFBQ0MsS0FBRDtJQUFBLE9BQVdBLEtBQUssSUFBSSxJQUFBWCxlQUFBLGFBQUtPLEtBQUwsRUFBWSxVQUFDSyxJQUFEO01BQUEsT0FBVUEsSUFBSSxLQUFLLEdBQVQsSUFBZ0JELEtBQUssQ0FBQ0UsSUFBTixLQUFlRCxJQUF6QztJQUFBLENBQVosQ0FBcEI7RUFBQSxDQUFmLENBQUwsRUFBcUc7SUFDbkcsSUFBTUUsU0FBUyxHQUFHUCxLQUFLLENBQUNRLEdBQU4sQ0FBVVosaUJBQUEsV0FBVixFQUE0QmEsSUFBNUIsQ0FBaUMsT0FBakMsQ0FBbEI7SUFDQSxPQUFPLElBQUlDLFNBQUosS0FBQUMsTUFBQSxDQUNBVCxhQURBLHNDQUFBUyxNQUFBLENBQ2lESixTQURqRCxFQUFQO0VBR0Q7RUFDRCxPQUFPLElBQVA7QUFDRDtBQUVELFNBQVNLLFVBQVRBLENBQW9CWixLQUFwQixFQUEyQkMsUUFBM0IsRUFBcUNDLGFBQXJDLEVBQW9EO0VBQ2xELElBQUlELFFBQVEsQ0FBQ1ksTUFBVCxLQUFvQixDQUF4QixFQUEyQjtJQUN6QixJQUFNTixTQUFTLEdBQUdQLEtBQUssQ0FBQ1EsR0FBTixDQUFVWixpQkFBQSxXQUFWLEVBQTRCYSxJQUE1QixDQUFpQyxPQUFqQyxDQUFsQjtJQUNBLE9BQU8sSUFBSUMsU0FBSixLQUFBQyxNQUFBLENBQW1CVCxhQUFuQiwyQ0FBQVMsTUFBQSxDQUF5RUosU0FBekUsRUFBUDtFQUNEO0VBQ0QsT0FBTyxJQUFQO0FBQ0Q7QUFFRCxTQUFTTyxjQUFUQSxDQUFBLEVBQWtDO0VBQUEsU0FBQUMsSUFBQSxHQUFBQyxTQUFBLENBQUFILE1BQUEsRUFBUGIsS0FBTyxPQUFBaUIsS0FBQSxDQUFBRixJQUFBLEdBQUFHLElBQUEsTUFBQUEsSUFBQSxHQUFBSCxJQUFBLEVBQUFHLElBQUE7SUFBUGxCLEtBQU8sQ0FBQWtCLElBQUEsSUFBQUYsU0FBQSxDQUFBRSxJQUFBO0VBQUE7RUFDaEMsSUFBSWxCLEtBQUssQ0FBQ2EsTUFBTixHQUFlLENBQW5CLEVBQXNCO0lBQ3BCLE1BQU0sSUFBSUgsU0FBSixDQUFjLDZDQUFkLENBQU47RUFDRDtFQUVELFNBQVNTLFNBQVRBLENBQW1CQyxLQUFuQixFQUEwQkMsUUFBMUIsRUFBb0NuQixhQUFwQyxFQUFtRDtJQUNqRCxPQUFPSCxTQUFTLENBQUNDLEtBQUQsRUFBUSxJQUFBSCxtQkFBQSxhQUFtQnVCLEtBQUssQ0FBQ0MsUUFBRCxDQUF4QixDQUFSLEVBQTZDbkIsYUFBN0MsQ0FBaEI7RUFDRDtFQUVEaUIsU0FBUyxDQUFDUCxVQUFWLEdBQXVCLFVBQUNRLEtBQUQsRUFBUUMsUUFBUixFQUFrQm5CLGFBQWxCLEVBQW9DO0lBQ3pELElBQU1ELFFBQVEsR0FBRyxJQUFBSixtQkFBQSxhQUFtQnVCLEtBQUssQ0FBQ0MsUUFBRCxDQUF4QixDQUFqQjtJQUNBLE9BQU9ULFVBQVUsQ0FBQ1osS0FBRCxFQUFRQyxRQUFSLEVBQWtCQyxhQUFsQixDQUFWLElBQThDSCxTQUFTLENBQUNDLEtBQUQsRUFBUUMsUUFBUixFQUFrQkMsYUFBbEIsQ0FBOUQ7RUFDRCxDQUhEO0VBS0EsT0FBTyxJQUFBSixjQUFBLGFBQWNxQixTQUFkLEVBQXlCLGdCQUF6QixFQUEyQ25CLEtBQTNDLENBQVA7QUFDRDtlQUVjYyxjIn0=