80c6d31f829db14762da439911b7ab52
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeRequestCall = void 0;
exports.makeRequestCallFromMutationObserver = makeRequestCallFromMutationObserver;
exports.makeRequestCallFromTimer = makeRequestCallFromTimer;
// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
// have WebKitMutationObserver but not un-prefixed MutationObserver.
// Must use `global` or `self` instead of `window` to work in both frames and web
// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
/* globals self */
const scope = typeof global !== 'undefined' ? global : self;
const BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
function makeRequestCallFromTimer(callback) {
  return function requestCall() {
    // We dispatch a timeout with a specified delay of 0 for engines that
    // can reliably accommodate that request. This will usually be snapped
    // to a 4 milisecond delay, but once we're flushing, there's no delay
    // between events.
    const timeoutHandle = setTimeout(handleTimer, 0);
    // However, since this timer gets frequently dropped in Firefox
    // workers, we enlist an interval handle that will try to fire
    // an event 20 times per second until it succeeds.
    const intervalHandle = setInterval(handleTimer, 50);
    function handleTimer() {
      // Whichever timer succeeds will cancel both timers and
      // execute the callback.
      clearTimeout(timeoutHandle);
      clearInterval(intervalHandle);
      callback();
    }
  };
}
// To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".
function makeRequestCallFromMutationObserver(callback) {
  let toggle = 1;
  const observer = new BrowserMutationObserver(callback);
  const node = document.createTextNode('');
  observer.observe(node, {
    characterData: true
  });
  return function requestCall() {
    toggle = -toggle;
    node.data = toggle;
  };
}
const makeRequestCall = typeof BrowserMutationObserver === 'function' ?
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7
makeRequestCallFromMutationObserver :
// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
// 11-12, and in web workers in many engines.
// Although message channels yield to any queued rendering and IO tasks, they
// would be better than imposing the 4ms delay of timers.
// However, they do not work reliably in Internet Explorer or Safari.
// Internet Explorer 10 is the only browser that has setImmediate but does
// not have MutationObservers.
// Although setImmediate yields to the browser's renderer, it would be
// preferrable to falling back to setTimeout since it does not have
// the minimum 4ms penalty.
// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
// Desktop to a lesser extent) that renders both setImmediate and
// MessageChannel useless for the purposes of ASAP.
// https://github.com/kriskowal/q/issues/396
// Timers are implemented universally.
// We fall back to timers in workers in most engines, and in foreground
// contexts in the following browsers.
// However, note that even this simple case requires nuances to operate in a
// broad spectrum of browsers.
//
// - Firefox 3-13
// - Internet Explorer 6-9
// - iPad Safari 4.3
// - Lynx 2.8.7
makeRequestCallFromTimer;
exports.makeRequestCall = makeRequestCall;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzY29wZSIsImdsb2JhbCIsInNlbGYiLCJCcm93c2VyTXV0YXRpb25PYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwibWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyIiwiY2FsbGJhY2siLCJyZXF1ZXN0Q2FsbCIsInRpbWVvdXRIYW5kbGUiLCJzZXRUaW1lb3V0IiwiaGFuZGxlVGltZXIiLCJpbnRlcnZhbEhhbmRsZSIsInNldEludGVydmFsIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsIm1ha2VSZXF1ZXN0Q2FsbEZyb21NdXRhdGlvbk9ic2VydmVyIiwidG9nZ2xlIiwib2JzZXJ2ZXIiLCJub2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwiZGF0YSIsIm1ha2VSZXF1ZXN0Q2FsbCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi9zcmMvbWFrZVJlcXVlc3RDYWxsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNhZmFyaSA2IGFuZCA2LjEgZm9yIGRlc2t0b3AsIGlQYWQsIGFuZCBpUGhvbmUgYXJlIHRoZSBvbmx5IGJyb3dzZXJzIHRoYXRcbi8vIGhhdmUgV2ViS2l0TXV0YXRpb25PYnNlcnZlciBidXQgbm90IHVuLXByZWZpeGVkIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXN0IHVzZSBgZ2xvYmFsYCBvciBgc2VsZmAgaW5zdGVhZCBvZiBgd2luZG93YCB0byB3b3JrIGluIGJvdGggZnJhbWVzIGFuZCB3ZWJcbi8vIHdvcmtlcnMuIGBnbG9iYWxgIGlzIGEgcHJvdmlzaW9uIG9mIEJyb3dzZXJpZnksIE1yLCBNcnMsIG9yIE1vcC5cblxuLyogZ2xvYmFscyBzZWxmICovXG5jb25zdCBzY29wZSA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogc2VsZlxuY29uc3QgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPVxuXHQoc2NvcGUgYXMgYW55KS5NdXRhdGlvbk9ic2VydmVyIHx8IChzY29wZSBhcyBhbnkpLldlYktpdE11dGF0aW9uT2JzZXJ2ZXJcblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lcihjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuXHRyZXR1cm4gZnVuY3Rpb24gcmVxdWVzdENhbGwoKSB7XG5cdFx0Ly8gV2UgZGlzcGF0Y2ggYSB0aW1lb3V0IHdpdGggYSBzcGVjaWZpZWQgZGVsYXkgb2YgMCBmb3IgZW5naW5lcyB0aGF0XG5cdFx0Ly8gY2FuIHJlbGlhYmx5IGFjY29tbW9kYXRlIHRoYXQgcmVxdWVzdC4gVGhpcyB3aWxsIHVzdWFsbHkgYmUgc25hcHBlZFxuXHRcdC8vIHRvIGEgNCBtaWxpc2Vjb25kIGRlbGF5LCBidXQgb25jZSB3ZSdyZSBmbHVzaGluZywgdGhlcmUncyBubyBkZWxheVxuXHRcdC8vIGJldHdlZW4gZXZlbnRzLlxuXHRcdGNvbnN0IHRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGhhbmRsZVRpbWVyLCAwKVxuXHRcdC8vIEhvd2V2ZXIsIHNpbmNlIHRoaXMgdGltZXIgZ2V0cyBmcmVxdWVudGx5IGRyb3BwZWQgaW4gRmlyZWZveFxuXHRcdC8vIHdvcmtlcnMsIHdlIGVubGlzdCBhbiBpbnRlcnZhbCBoYW5kbGUgdGhhdCB3aWxsIHRyeSB0byBmaXJlXG5cdFx0Ly8gYW4gZXZlbnQgMjAgdGltZXMgcGVyIHNlY29uZCB1bnRpbCBpdCBzdWNjZWVkcy5cblx0XHRjb25zdCBpbnRlcnZhbEhhbmRsZSA9IHNldEludGVydmFsKGhhbmRsZVRpbWVyLCA1MClcblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRpbWVyKCkge1xuXHRcdFx0Ly8gV2hpY2hldmVyIHRpbWVyIHN1Y2NlZWRzIHdpbGwgY2FuY2VsIGJvdGggdGltZXJzIGFuZFxuXHRcdFx0Ly8gZXhlY3V0ZSB0aGUgY2FsbGJhY2suXG5cdFx0XHRjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZSlcblx0XHRcdGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGUpXG5cdFx0XHRjYWxsYmFjaygpXG5cdFx0fVxuXHR9XG59XG5cbi8vIFRvIHJlcXVlc3QgYSBoaWdoIHByaW9yaXR5IGV2ZW50LCB3ZSBpbmR1Y2UgYSBtdXRhdGlvbiBvYnNlcnZlciBieSB0b2dnbGluZ1xuLy8gdGhlIHRleHQgb2YgYSB0ZXh0IG5vZGUgYmV0d2VlbiBcIjFcIiBhbmQgXCItMVwiLlxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VSZXF1ZXN0Q2FsbEZyb21NdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG5cdGxldCB0b2dnbGUgPSAxXG5cdGNvbnN0IG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKVxuXHRjb25zdCBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpXG5cdG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pXG5cdHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Q2FsbCgpIHtcblx0XHR0b2dnbGUgPSAtdG9nZ2xlXG5cdFx0Oyhub2RlIGFzIGFueSkuZGF0YSA9IHRvZ2dsZVxuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBtYWtlUmVxdWVzdENhbGwgPVxuXHR0eXBlb2YgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbidcblx0XHQ/IC8vIE11dGF0aW9uT2JzZXJ2ZXJzIGFyZSBkZXNpcmFibGUgYmVjYXVzZSB0aGV5IGhhdmUgaGlnaCBwcmlvcml0eSBhbmQgd29ya1xuXHRcdCAgLy8gcmVsaWFibHkgZXZlcnl3aGVyZSB0aGV5IGFyZSBpbXBsZW1lbnRlZC5cblx0XHQgIC8vIFRoZXkgYXJlIGltcGxlbWVudGVkIGluIGFsbCBtb2Rlcm4gYnJvd3NlcnMuXG5cdFx0ICAvL1xuXHRcdCAgLy8gLSBBbmRyb2lkIDQtNC4zXG5cdFx0ICAvLyAtIENocm9tZSAyNi0zNFxuXHRcdCAgLy8gLSBGaXJlZm94IDE0LTI5XG5cdFx0ICAvLyAtIEludGVybmV0IEV4cGxvcmVyIDExXG5cdFx0ICAvLyAtIGlQYWQgU2FmYXJpIDYtNy4xXG5cdFx0ICAvLyAtIGlQaG9uZSBTYWZhcmkgNy03LjFcblx0XHQgIC8vIC0gU2FmYXJpIDYtN1xuXHRcdCAgbWFrZVJlcXVlc3RDYWxsRnJvbU11dGF0aW9uT2JzZXJ2ZXJcblx0XHQ6IC8vIE1lc3NhZ2VDaGFubmVscyBhcmUgZGVzaXJhYmxlIGJlY2F1c2UgdGhleSBnaXZlIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIEhUTUxcblx0XHQgIC8vIHRhc2sgcXVldWUsIGFyZSBpbXBsZW1lbnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMCwgU2FmYXJpIDUuMC0xLCBhbmQgT3BlcmFcblx0XHQgIC8vIDExLTEyLCBhbmQgaW4gd2ViIHdvcmtlcnMgaW4gbWFueSBlbmdpbmVzLlxuXHRcdCAgLy8gQWx0aG91Z2ggbWVzc2FnZSBjaGFubmVscyB5aWVsZCB0byBhbnkgcXVldWVkIHJlbmRlcmluZyBhbmQgSU8gdGFza3MsIHRoZXlcblx0XHQgIC8vIHdvdWxkIGJlIGJldHRlciB0aGFuIGltcG9zaW5nIHRoZSA0bXMgZGVsYXkgb2YgdGltZXJzLlxuXHRcdCAgLy8gSG93ZXZlciwgdGhleSBkbyBub3Qgd29yayByZWxpYWJseSBpbiBJbnRlcm5ldCBFeHBsb3JlciBvciBTYWZhcmkuXG5cblx0XHQgIC8vIEludGVybmV0IEV4cGxvcmVyIDEwIGlzIHRoZSBvbmx5IGJyb3dzZXIgdGhhdCBoYXMgc2V0SW1tZWRpYXRlIGJ1dCBkb2VzXG5cdFx0ICAvLyBub3QgaGF2ZSBNdXRhdGlvbk9ic2VydmVycy5cblx0XHQgIC8vIEFsdGhvdWdoIHNldEltbWVkaWF0ZSB5aWVsZHMgdG8gdGhlIGJyb3dzZXIncyByZW5kZXJlciwgaXQgd291bGQgYmVcblx0XHQgIC8vIHByZWZlcnJhYmxlIHRvIGZhbGxpbmcgYmFjayB0byBzZXRUaW1lb3V0IHNpbmNlIGl0IGRvZXMgbm90IGhhdmVcblx0XHQgIC8vIHRoZSBtaW5pbXVtIDRtcyBwZW5hbHR5LlxuXHRcdCAgLy8gVW5mb3J0dW5hdGVseSB0aGVyZSBhcHBlYXJzIHRvIGJlIGEgYnVnIGluIEludGVybmV0IEV4cGxvcmVyIDEwIE1vYmlsZSAoYW5kXG5cdFx0ICAvLyBEZXNrdG9wIHRvIGEgbGVzc2VyIGV4dGVudCkgdGhhdCByZW5kZXJzIGJvdGggc2V0SW1tZWRpYXRlIGFuZFxuXHRcdCAgLy8gTWVzc2FnZUNoYW5uZWwgdXNlbGVzcyBmb3IgdGhlIHB1cnBvc2VzIG9mIEFTQVAuXG5cdFx0ICAvLyBodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EvaXNzdWVzLzM5NlxuXG5cdFx0ICAvLyBUaW1lcnMgYXJlIGltcGxlbWVudGVkIHVuaXZlcnNhbGx5LlxuXHRcdCAgLy8gV2UgZmFsbCBiYWNrIHRvIHRpbWVycyBpbiB3b3JrZXJzIGluIG1vc3QgZW5naW5lcywgYW5kIGluIGZvcmVncm91bmRcblx0XHQgIC8vIGNvbnRleHRzIGluIHRoZSBmb2xsb3dpbmcgYnJvd3NlcnMuXG5cdFx0ICAvLyBIb3dldmVyLCBub3RlIHRoYXQgZXZlbiB0aGlzIHNpbXBsZSBjYXNlIHJlcXVpcmVzIG51YW5jZXMgdG8gb3BlcmF0ZSBpbiBhXG5cdFx0ICAvLyBicm9hZCBzcGVjdHJ1bSBvZiBicm93c2Vycy5cblx0XHQgIC8vXG5cdFx0ICAvLyAtIEZpcmVmb3ggMy0xM1xuXHRcdCAgLy8gLSBJbnRlcm5ldCBFeHBsb3JlciA2LTlcblx0XHQgIC8vIC0gaVBhZCBTYWZhcmkgNC4zXG5cdFx0ICAvLyAtIEx5bnggMi44Ljdcblx0XHQgIG1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQSxNQUFNQSxLQUFLLEdBQUcsT0FBT0MsTUFBTSxLQUFLLFdBQVcsR0FBR0EsTUFBTSxHQUFHQyxJQUFJO0FBQzNELE1BQU1DLHVCQUF1QixHQUM1QkgsS0FBTSxDQUFTSSxnQkFBZ0IsSUFBSUosS0FBTSxDQUFTSyxzQkFBc0I7QUFFbEUsU0FBU0Msd0JBQXdCQSxDQUFDQyxRQUFvQixFQUFFO0VBQzlELE9BQU8sU0FBU0MsV0FBV0EsQ0FBQSxFQUFHO0lBQzdCO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsTUFBTUMsYUFBYSxHQUFHQyxVQUFVLENBQUNDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDaEQ7SUFDQTtJQUNBO0lBQ0EsTUFBTUMsY0FBYyxHQUFHQyxXQUFXLENBQUNGLFdBQVcsRUFBRSxFQUFFLENBQUM7SUFFbkQsU0FBU0EsV0FBV0EsQ0FBQSxFQUFHO01BQ3RCO01BQ0E7TUFDQUcsWUFBWSxDQUFDTCxhQUFhLENBQUM7TUFDM0JNLGFBQWEsQ0FBQ0gsY0FBYyxDQUFDO01BQzdCTCxRQUFRLEVBQUU7O0dBRVg7O0FBR0Y7QUFDQTtBQUNPLFNBQVNTLG1DQUFtQ0EsQ0FBQ1QsUUFBb0IsRUFBRTtFQUN6RSxJQUFJVSxNQUFNLEdBQUcsQ0FBQztFQUNkLE1BQU1DLFFBQVEsR0FBRyxJQUFJZix1QkFBdUIsQ0FBQ0ksUUFBUSxDQUFDO0VBQ3RELE1BQU1ZLElBQUksR0FBR0MsUUFBUSxDQUFDQyxjQUFjLENBQUMsRUFBRSxDQUFDO0VBQ3hDSCxRQUFRLENBQUNJLE9BQU8sQ0FBQ0gsSUFBSSxFQUFFO0lBQUVJLGFBQWEsRUFBRTtHQUFNLENBQUM7RUFDL0MsT0FBTyxTQUFTZixXQUFXQSxDQUFBLEVBQUc7SUFDN0JTLE1BQU0sR0FBRyxDQUFDQSxNQUFNO0lBQ2ZFLElBQUssQ0FBU0ssSUFBSSxHQUFHUCxNQUFNO0dBQzVCOztBQUdLLE1BQU1RLGVBQWUsR0FDM0IsT0FBT3RCLHVCQUF1QixLQUFLLFVBQVU7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQWEsbUNBQW1DO0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBVix3QkFBd0I7QUFBQW9CLE9BQUEsQ0FBQUQsZUFBQSxHQUFBQSxlQUFBIn0=